
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 27 23:22:34 GMT-06:00 2017
//----------------------------------------------------

package mx.edu.ittepic.automatas;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 27 23:22:34 GMT-06:00 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\351\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\007\000\002\003\003" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\032\003\000\002" +
    "\032\004\000\002\021\003\000\002\021\004\000\002\021" +
    "\003\000\002\021\004\000\002\022\006\000\002\022\005" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\023\012\000\002\023\012\000\002\023\012" +
    "\000\002\023\012\000\002\023\012\000\002\023\012\000" +
    "\002\023\013\000\002\033\003\000\002\033\003\000\002" +
    "\024\005\000\002\024\006\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\002\000\002\030\006" +
    "\000\002\030\007\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\005\000\002\027" +
    "\005\000\002\007\003\000\002\007\004\000\002\007\003" +
    "\000\002\007\004\000\002\007\003\000\002\007\004\000" +
    "\002\007\003\000\002\007\004\000\002\007\003\000\002" +
    "\007\004\000\002\007\003\000\002\007\004\000\002\007" +
    "\003\000\002\007\004\000\002\007\003\000\002\007\004" +
    "\000\002\007\003\000\002\007\004\000\002\036\006\000" +
    "\002\037\010\000\002\037\010\000\002\040\010\000\002" +
    "\042\006\000\002\042\010\000\002\042\005\000\002\042" +
    "\006\000\002\042\006\000\002\042\006\000\002\042\006" +
    "\000\002\042\010\000\002\042\010\000\002\042\010\000" +
    "\002\042\010\000\002\042\010\000\002\042\010\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\045\003\000\002\041\006\000\002\041\005\000\002\046" +
    "\012\000\002\034\005\000\002\034\033\000\002\035\003" +
    "\000\002\035\005\000\002\004\007\000\002\004\010\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\015\011\000\002\015\010\000\002\015" +
    "\010\000\002\015\010\000\002\015\010\000\002\015\010" +
    "\000\002\015\011\000\002\015\011\000\002\015\011\000" +
    "\002\015\011\000\002\014\007\000\002\014\007\000\002" +
    "\014\007\000\002\014\007\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\017\005\000\002\017\003\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\004\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\004" +
    "\000\002\005\007\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\007\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\004\000\002\026\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\011\012\000\002\011" +
    "\010\000\002\011\011\000\002\011\011\000\002\011\012" +
    "\000\002\011\012\000\002\011\012\000\002\011\012\000" +
    "\002\011\012\000\002\011\011\000\002\011\011\000\002" +
    "\011\011\000\002\011\012\000\002\011\012\000\002\011" +
    "\011\000\002\011\011\000\002\011\011\000\002\011\011" +
    "\000\002\011\011\000\002\011\010\000\002\011\010\000" +
    "\002\011\010\000\002\011\010\000\002\011\011\000\002" +
    "\011\011\000\002\011\011\000\002\011\011\000\002\011" +
    "\011\000\002\011\011\000\002\011\010\000\002\011\010" +
    "\000\002\011\010\000\002\011\010\000\002\011\011\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\007\000\002\011" +
    "\007\000\002\011\007\000\002\011\010\000\002\011\010" +
    "\000\002\012\003\000\002\012\004\000\002\031\004\000" +
    "\002\031\005\000\002\031\004\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0200\000\010\003\005\013\006\104\004\001\002\000" +
    "\004\044\u0200\001\002\000\004\002\ufffe\001\002\000\012" +
    "\002\ufffc\021\ufffc\044\034\104\033\001\002\000\006\002" +
    "\000\021\012\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\006\003\015\024\014\001\002\000" +
    "\004\002\uffff\001\002\000\006\003\022\104\021\001\002" +
    "\000\004\104\016\001\002\000\004\044\017\001\002\000" +
    "\004\045\020\001\002\000\004\002\uff90\001\002\000\006" +
    "\003\025\044\026\001\002\000\004\044\023\001\002\000" +
    "\004\045\024\001\002\000\004\002\uff8f\001\002\000\004" +
    "\045\032\001\002\000\006\003\027\045\030\001\002\000" +
    "\004\002\uff8d\001\002\000\006\002\uff92\021\012\001\002" +
    "\000\004\002\uff91\001\002\000\004\002\uff8e\001\002\000" +
    "\006\011\036\044\u01fb\001\002\000\006\011\036\044\037" +
    "\001\002\000\014\002\ufff6\010\u01ab\021\ufff6\022\u01af\045" +
    "\ufff6\001\002\000\034\012\067\014\052\016\064\044\u01a6" +
    "\045\u01a5\075\057\104\053\117\061\120\044\123\055\127" +
    "\043\164\054\167\047\001\002\000\032\012\067\014\052" +
    "\016\064\045\062\075\057\104\053\117\061\120\044\123" +
    "\055\127\043\164\054\167\047\001\002\000\004\045\041" +
    "\001\002\000\006\002\ufff9\021\ufff9\001\002\000\044\002" +
    "\uffc8\003\uffc8\010\uffc8\012\uffc8\014\uffc8\016\uffc8\021\uffc8" +
    "\022\uffc8\045\uffc8\075\uffc8\104\uffc8\117\uffc8\120\uffc8\123" +
    "\uffc8\127\uffc8\164\uffc8\167\uffc8\001\002\000\004\042\u01a1" +
    "\001\002\000\004\042\u019c\001\002\000\032\012\067\014" +
    "\052\016\064\045\u019b\075\057\104\053\117\061\120\044" +
    "\123\055\127\043\164\054\167\047\001\002\000\044\002" +
    "\uffbe\003\uffbe\010\uffbe\012\uffbe\014\uffbe\016\uffbe\021\uffbe" +
    "\022\uffbe\045\uffbe\075\uffbe\104\uffbe\117\uffbe\120\uffbe\123" +
    "\uffbe\127\uffbe\164\uffbe\167\uffbe\001\002\000\004\042\u0194" +
    "\001\002\000\044\002\uffca\003\uffca\010\uffca\012\uffca\014" +
    "\uffca\016\uffca\021\uffca\022\uffca\045\uffca\075\uffca\104\uffca" +
    "\117\uffca\120\uffca\123\uffca\127\uffca\164\uffca\167\uffca\001" +
    "\002\000\044\002\uffba\003\uffba\010\uffba\012\uffba\014\uffba" +
    "\016\uffba\021\uffba\022\uffba\045\uffba\075\uffba\104\uffba\117" +
    "\uffba\120\uffba\123\uffba\127\uffba\164\uffba\167\uffba\001\002" +
    "\000\010\003\u0125\042\u0126\104\u0124\001\002\000\020\003" +
    "\u010c\042\u010d\075\u010b\104\075\106\077\107\074\163\100" +
    "\001\002\000\004\042\356\001\002\000\004\042\351\001" +
    "\002\000\044\002\uffc0\003\uffc0\010\uffc0\012\uffc0\014\uffc0" +
    "\016\uffc0\021\uffc0\022\uffc0\045\uffc0\075\uffc0\104\uffc0\117" +
    "\uffc0\120\uffc0\123\uffc0\127\uffc0\164\uffc0\167\uffc0\001\002" +
    "\000\012\104\075\106\077\107\074\163\100\001\002\000" +
    "\044\002\uffbc\003\uffbc\010\uffbc\012\uffbc\014\uffbc\016\uffbc" +
    "\021\uffbc\022\uffbc\045\uffbc\075\uffbc\104\uffbc\117\uffbc\120" +
    "\uffbc\123\uffbc\127\uffbc\164\uffbc\167\uffbc\001\002\000\004" +
    "\042\252\001\002\000\014\002\uffec\010\uffec\021\uffec\022" +
    "\uffec\045\uffec\001\002\000\044\002\uffc2\003\uffc2\010\uffc2" +
    "\012\uffc2\014\uffc2\016\uffc2\021\uffc2\022\uffc2\045\uffc2\075" +
    "\uffc2\104\uffc2\117\uffc2\120\uffc2\123\uffc2\127\uffc2\164\uffc2" +
    "\167\uffc2\001\002\000\006\003\123\042\124\001\002\000" +
    "\044\002\uffc4\003\uffc4\010\uffc4\012\uffc4\014\uffc4\016\uffc4" +
    "\021\uffc4\022\uffc4\045\uffc4\075\uffc4\104\uffc4\117\uffc4\120" +
    "\uffc4\123\uffc4\127\uffc4\164\uffc4\167\uffc4\001\002\000\044" +
    "\002\uffc6\003\uffc6\010\uffc6\012\uffc6\014\uffc6\016\uffc6\021" +
    "\uffc6\022\uffc6\045\uffc6\075\uffc6\104\uffc6\117\uffc6\120\uffc6" +
    "\123\uffc6\127\uffc6\164\uffc6\167\uffc6\001\002\000\010\003" +
    "\072\075\071\104\070\001\002\000\020\003\110\051\111" +
    "\075\107\104\075\106\077\107\074\163\100\001\002\000" +
    "\012\104\075\106\077\107\074\163\100\001\002\000\004" +
    "\075\073\001\002\000\012\104\075\106\077\107\074\163" +
    "\100\001\002\000\012\003\uff5b\043\uff5b\051\uff5b\163\103" +
    "\001\002\000\010\003\uff5a\043\uff5a\051\uff5a\001\002\000" +
    "\004\051\102\001\002\000\010\003\uff59\043\uff59\051\uff59" +
    "\001\002\000\004\107\101\001\002\000\010\003\uff57\043" +
    "\uff57\051\uff57\001\002\000\044\002\uff63\003\uff63\010\uff63" +
    "\012\uff63\014\uff63\016\uff63\021\uff63\022\uff63\045\uff63\075" +
    "\uff63\104\uff63\117\uff63\120\uff63\123\uff63\127\uff63\164\uff63" +
    "\167\uff63\001\002\000\010\003\uff58\043\uff58\051\uff58\001" +
    "\002\000\004\051\105\001\002\000\044\002\uff68\003\uff68" +
    "\010\uff68\012\uff68\014\uff68\016\uff68\021\uff68\022\uff68\045" +
    "\uff68\075\uff68\104\uff68\117\uff68\120\uff68\123\uff68\127\uff68" +
    "\164\uff68\167\uff68\001\002\000\004\051\122\001\002\000" +
    "\016\003\115\051\116\104\075\106\077\107\074\163\100" +
    "\001\002\000\012\104\075\106\077\107\074\163\100\001" +
    "\002\000\044\002\uff67\003\uff67\010\uff67\012\uff67\014\uff67" +
    "\016\uff67\021\uff67\022\uff67\045\uff67\075\uff67\104\uff67\117" +
    "\uff67\120\uff67\123\uff67\127\uff67\164\uff67\167\uff67\001\002" +
    "\000\004\051\113\001\002\000\044\002\uff62\003\uff62\010" +
    "\uff62\012\uff62\014\uff62\016\uff62\021\uff62\022\uff62\045\uff62" +
    "\075\uff62\104\uff62\117\uff62\120\uff62\123\uff62\127\uff62\164" +
    "\uff62\167\uff62\001\002\000\006\003\120\051\121\001\002" +
    "\000\004\051\117\001\002\000\044\002\uff69\003\uff69\010" +
    "\uff69\012\uff69\014\uff69\016\uff69\021\uff69\022\uff69\045\uff69" +
    "\075\uff69\104\uff69\117\uff69\120\uff69\123\uff69\127\uff69\164" +
    "\uff69\167\uff69\001\002\000\044\002\uff61\003\uff61\010\uff61" +
    "\012\uff61\014\uff61\016\uff61\021\uff61\022\uff61\045\uff61\075" +
    "\uff61\104\uff61\117\uff61\120\uff61\123\uff61\127\uff61\164\uff61" +
    "\167\uff61\001\002\000\044\002\uff60\003\uff60\010\uff60\012" +
    "\uff60\014\uff60\016\uff60\021\uff60\022\uff60\045\uff60\075\uff60" +
    "\104\uff60\117\uff60\120\uff60\123\uff60\127\uff60\164\uff60\167" +
    "\uff60\001\002\000\044\002\uff6c\003\uff6c\010\uff6c\012\uff6c" +
    "\014\uff6c\016\uff6c\021\uff6c\022\uff6c\045\uff6c\075\uff6c\104" +
    "\uff6c\117\uff6c\120\uff6c\123\uff6c\127\uff6c\164\uff6c\167\uff6c" +
    "\001\002\000\044\002\uff6a\003\uff6a\010\uff6a\012\uff6a\014" +
    "\uff6a\016\uff6a\021\uff6a\022\uff6a\045\uff6a\075\uff6a\104\uff6a" +
    "\117\uff6a\120\uff6a\123\uff6a\127\uff6a\164\uff6a\167\uff6a\001" +
    "\002\000\006\012\125\051\127\001\002\000\006\012\125" +
    "\051\127\001\002\000\006\003\234\104\233\001\002\000" +
    "\014\003\213\051\214\104\164\107\162\163\166\001\002" +
    "\000\010\104\164\107\162\163\166\001\002\000\006\003" +
    "\131\043\132\001\002\000\004\044\156\001\002\000\006" +
    "\003\133\044\134\001\002\000\032\012\067\014\052\016" +
    "\064\045\154\075\057\104\053\117\061\120\044\123\055" +
    "\127\043\164\054\167\047\001\002\000\034\003\136\012" +
    "\067\014\052\016\064\045\137\075\057\104\053\117\061" +
    "\120\044\123\055\127\043\164\054\167\047\001\002\000" +
    "\034\003\146\012\067\014\052\016\064\045\147\075\057" +
    "\104\053\117\061\120\044\123\055\127\043\164\054\167" +
    "\047\001\002\000\044\002\uff87\003\uff87\010\uff87\012\uff87" +
    "\014\uff87\016\uff87\021\uff87\022\uff87\045\uff87\075\uff87\104" +
    "\uff87\117\uff87\120\uff87\123\uff87\127\uff87\164\uff87\167\uff87" +
    "\001\002\000\044\002\uff8b\003\uff8b\010\uff8b\012\uff8b\014" +
    "\uff8b\016\uff8b\021\uff8b\022\uff8b\045\uff8b\075\uff8b\104\uff8b" +
    "\117\uff8b\120\uff8b\123\uff8b\127\uff8b\164\uff8b\167\uff8b\001" +
    "\002\000\044\002\uffc7\003\uffc7\010\uffc7\012\uffc7\014\uffc7" +
    "\016\uffc7\021\uffc7\022\uffc7\045\uffc7\075\uffc7\104\uffc7\117" +
    "\uffc7\120\uffc7\123\uffc7\127\uffc7\164\uffc7\167\uffc7\001\002" +
    "\000\044\002\uffbd\003\uffbd\010\uffbd\012\uffbd\014\uffbd\016" +
    "\uffbd\021\uffbd\022\uffbd\045\uffbd\075\uffbd\104\uffbd\117\uffbd" +
    "\120\uffbd\123\uffbd\127\uffbd\164\uffbd\167\uffbd\001\002\000" +
    "\044\002\uffc9\003\uffc9\010\uffc9\012\uffc9\014\uffc9\016\uffc9" +
    "\021\uffc9\022\uffc9\045\uffc9\075\uffc9\104\uffc9\117\uffc9\120" +
    "\uffc9\123\uffc9\127\uffc9\164\uffc9\167\uffc9\001\002\000\044" +
    "\002\uffb9\003\uffb9\010\uffb9\012\uffb9\014\uffb9\016\uffb9\021" +
    "\uffb9\022\uffb9\045\uffb9\075\uffb9\104\uffb9\117\uffb9\120\uffb9" +
    "\123\uffb9\127\uffb9\164\uffb9\167\uffb9\001\002\000\044\002" +
    "\uffbf\003\uffbf\010\uffbf\012\uffbf\014\uffbf\016\uffbf\021\uffbf" +
    "\022\uffbf\045\uffbf\075\uffbf\104\uffbf\117\uffbf\120\uffbf\123" +
    "\uffbf\127\uffbf\164\uffbf\167\uffbf\001\002\000\044\002\uffbb" +
    "\003\uffbb\010\uffbb\012\uffbb\014\uffbb\016\uffbb\021\uffbb\022" +
    "\uffbb\045\uffbb\075\uffbb\104\uffbb\117\uffbb\120\uffbb\123\uffbb" +
    "\127\uffbb\164\uffbb\167\uffbb\001\002\000\044\002\uff83\003" +
    "\uff83\010\uff83\012\uff83\014\uff83\016\uff83\021\uff83\022\uff83" +
    "\045\uff83\075\uff83\104\uff83\117\uff83\120\uff83\123\uff83\127" +
    "\uff83\164\uff83\167\uff83\001\002\000\044\002\uff8c\003\uff8c" +
    "\010\uff8c\012\uff8c\014\uff8c\016\uff8c\021\uff8c\022\uff8c\045" +
    "\uff8c\075\uff8c\104\uff8c\117\uff8c\120\uff8c\123\uff8c\127\uff8c" +
    "\164\uff8c\167\uff8c\001\002\000\044\002\uffc1\003\uffc1\010" +
    "\uffc1\012\uffc1\014\uffc1\016\uffc1\021\uffc1\022\uffc1\045\uffc1" +
    "\075\uffc1\104\uffc1\117\uffc1\120\uffc1\123\uffc1\127\uffc1\164" +
    "\uffc1\167\uffc1\001\002\000\044\002\uffc3\003\uffc3\010\uffc3" +
    "\012\uffc3\014\uffc3\016\uffc3\021\uffc3\022\uffc3\045\uffc3\075" +
    "\uffc3\104\uffc3\117\uffc3\120\uffc3\123\uffc3\127\uffc3\164\uffc3" +
    "\167\uffc3\001\002\000\044\002\uffc5\003\uffc5\010\uffc5\012" +
    "\uffc5\014\uffc5\016\uffc5\021\uffc5\022\uffc5\045\uffc5\075\uffc5" +
    "\104\uffc5\117\uffc5\120\uffc5\123\uffc5\127\uffc5\164\uffc5\167" +
    "\uffc5\001\002\000\032\012\067\014\052\016\064\045\155" +
    "\075\057\104\053\117\061\120\044\123\055\127\043\164" +
    "\054\167\047\001\002\000\044\002\uff88\003\uff88\010\uff88" +
    "\012\uff88\014\uff88\016\uff88\021\uff88\022\uff88\045\uff88\075" +
    "\uff88\104\uff88\117\uff88\120\uff88\123\uff88\127\uff88\164\uff88" +
    "\167\uff88\001\002\000\044\002\uff84\003\uff84\010\uff84\012" +
    "\uff84\014\uff84\016\uff84\021\uff84\022\uff84\045\uff84\075\uff84" +
    "\104\uff84\117\uff84\120\uff84\123\uff84\127\uff84\164\uff84\167" +
    "\uff84\001\002\000\032\012\067\014\052\016\064\045\160" +
    "\075\057\104\053\117\061\120\044\123\055\127\043\164" +
    "\054\167\047\001\002\000\032\012\067\014\052\016\064" +
    "\045\161\075\057\104\053\117\061\120\044\123\055\127" +
    "\043\164\054\167\047\001\002\000\044\002\uff89\003\uff89" +
    "\010\uff89\012\uff89\014\uff89\016\uff89\021\uff89\022\uff89\045" +
    "\uff89\075\uff89\104\uff89\117\uff89\120\uff89\123\uff89\127\uff89" +
    "\164\uff89\167\uff89\001\002\000\044\002\uff85\003\uff85\010" +
    "\uff85\012\uff85\014\uff85\016\uff85\021\uff85\022\uff85\045\uff85" +
    "\075\uff85\104\uff85\117\uff85\120\uff85\123\uff85\127\uff85\164" +
    "\uff85\167\uff85\001\002\000\030\003\uff6f\051\uff6f\062\uff6f" +
    "\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f\104" +
    "\uff6f\163\211\001\002\000\004\051\201\001\002\000\026" +
    "\003\uff70\051\uff70\062\uff70\063\uff70\064\uff70\065\uff70\066" +
    "\uff70\067\uff70\070\uff70\104\uff70\001\002\000\026\003\uff75" +
    "\051\uff75\062\173\063\171\064\175\065\170\066\172\067" +
    "\176\070\174\104\uff75\001\002\000\004\107\167\001\002" +
    "\000\026\003\uff6d\051\uff6d\062\uff6d\063\uff6d\064\uff6d\065" +
    "\uff6d\066\uff6d\067\uff6d\070\uff6d\104\uff6d\001\002\000\010" +
    "\104\uff4e\107\uff4e\163\uff4e\001\002\000\010\104\uff50\107" +
    "\uff50\163\uff50\001\002\000\010\104\uff4d\107\uff4d\163\uff4d" +
    "\001\002\000\010\104\uff51\107\uff51\163\uff51\001\002\000" +
    "\010\104\uff4b\107\uff4b\163\uff4b\001\002\000\010\104\uff4f" +
    "\107\uff4f\163\uff4f\001\002\000\010\104\uff4c\107\uff4c\163" +
    "\uff4c\001\002\000\010\104\164\107\162\163\166\001\002" +
    "\000\010\003\uff76\051\uff76\104\uff76\001\002\000\006\003" +
    "\203\104\202\001\002\000\010\003\207\102\210\103\206" +
    "\001\002\000\004\102\205\001\002\000\006\003\uff7e\043" +
    "\uff7e\001\002\000\006\003\uff72\043\uff72\001\002\000\006" +
    "\003\uff74\043\uff74\001\002\000\006\003\uff71\043\uff71\001" +
    "\002\000\006\003\uff73\043\uff73\001\002\000\026\003\uff6e" +
    "\051\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067" +
    "\uff6e\070\uff6e\104\uff6e\001\002\000\004\051\231\001\002" +
    "\000\010\104\164\107\162\163\166\001\002\000\012\051" +
    "\216\104\164\107\162\163\166\001\002\000\010\003\220" +
    "\051\221\104\202\001\002\000\006\003\203\104\202\001" +
    "\002\000\006\003\uff7c\043\uff7c\001\002\000\010\003\203" +
    "\102\205\104\202\001\002\000\006\003\223\104\202\001" +
    "\002\000\006\003\uff7b\043\uff7b\001\002\000\010\003\uff7f" +
    "\043\uff7f\102\205\001\002\000\006\003\uff82\043\uff82\001" +
    "\002\000\006\003\uff80\043\uff80\001\002\000\004\051\227" +
    "\001\002\000\006\003\203\104\202\001\002\000\006\003" +
    "\uff81\043\uff81\001\002\000\006\003\203\104\202\001\002" +
    "\000\006\003\uff7d\043\uff7d\001\002\000\006\003\240\075" +
    "\237\001\002\000\004\075\235\001\002\000\004\107\236" +
    "\001\002\000\014\003\uff79\051\uff79\104\uff79\107\uff79\163" +
    "\uff79\001\002\000\006\107\242\163\243\001\002\000\004" +
    "\107\241\001\002\000\014\003\uff78\051\uff78\104\uff78\107" +
    "\uff78\163\uff78\001\002\000\014\003\uff7a\051\uff7a\104\uff7a" +
    "\107\uff7a\163\uff7a\001\002\000\014\003\uff77\051\uff77\104" +
    "\uff77\107\uff77\163\uff77\001\002\000\004\043\245\001\002" +
    "\000\004\044\246\001\002\000\032\012\067\014\052\016" +
    "\064\045\250\075\057\104\053\117\061\120\044\123\055" +
    "\127\043\164\054\167\047\001\002\000\032\012\067\014" +
    "\052\016\064\045\251\075\057\104\053\117\061\120\044" +
    "\123\055\127\043\164\054\167\047\001\002\000\044\002" +
    "\uff8a\003\uff8a\010\uff8a\012\uff8a\014\uff8a\016\uff8a\021\uff8a" +
    "\022\uff8a\045\uff8a\075\uff8a\104\uff8a\117\uff8a\120\uff8a\123" +
    "\uff8a\127\uff8a\164\uff8a\167\uff8a\001\002\000\044\002\uff86" +
    "\003\uff86\010\uff86\012\uff86\014\uff86\016\uff86\021\uff86\022" +
    "\uff86\045\uff86\075\uff86\104\uff86\117\uff86\120\uff86\123\uff86" +
    "\127\uff86\164\uff86\167\uff86\001\002\000\004\106\253\001" +
    "\002\000\004\043\254\001\002\000\004\053\255\001\002" +
    "\000\032\003\265\115\262\125\264\130\273\131\272\132" +
    "\260\133\270\137\263\142\256\160\271\161\261\166\267" +
    "\001\002\000\006\003\uff9a\042\uff9a\001\002\000\006\003" +
    "\323\042\324\001\002\000\006\003\uff9e\042\uff9e\001\002" +
    "\000\006\003\uff9c\042\uff9c\001\002\000\006\003\uff9f\042" +
    "\uff9f\001\002\000\006\003\uffa4\042\uffa4\001\002\000\006" +
    "\003\uff9b\042\uff9b\001\002\000\004\042\314\001\002\000" +
    "\044\002\uffb7\003\uffb7\010\uffb7\012\uffb7\014\uffb7\016\uffb7" +
    "\021\uffb7\022\uffb7\045\uffb7\075\uffb7\104\uffb7\117\uffb7\120" +
    "\uffb7\123\uffb7\127\uffb7\164\uffb7\167\uffb7\001\002\000\006" +
    "\003\uffa3\042\uffa3\001\002\000\006\003\uffa0\042\uffa0\001" +
    "\002\000\006\003\uff9d\042\uff9d\001\002\000\006\003\uffa2" +
    "\042\uffa2\001\002\000\006\003\uffa1\042\uffa1\001\002\000" +
    "\006\003\307\042\310\001\002\000\006\003\276\042\277" +
    "\001\002\000\004\106\305\001\002\000\006\003\301\106" +
    "\300\001\002\000\006\003\303\043\304\001\002\000\004" +
    "\043\302\001\002\000\044\002\uffaf\003\uffaf\010\uffaf\012" +
    "\uffaf\014\uffaf\016\uffaf\021\uffaf\022\uffaf\045\uffaf\075\uffaf" +
    "\104\uffaf\117\uffaf\120\uffaf\123\uffaf\127\uffaf\164\uffaf\167" +
    "\uffaf\001\002\000\044\002\uffae\003\uffae\010\uffae\012\uffae" +
    "\014\uffae\016\uffae\021\uffae\022\uffae\045\uffae\075\uffae\104" +
    "\uffae\117\uffae\120\uffae\123\uffae\127\uffae\164\uffae\167\uffae" +
    "\001\002\000\044\002\uffb4\003\uffb4\010\uffb4\012\uffb4\014" +
    "\uffb4\016\uffb4\021\uffb4\022\uffb4\045\uffb4\075\uffb4\104\uffb4" +
    "\117\uffb4\120\uffb4\123\uffb4\127\uffb4\164\uffb4\167\uffb4\001" +
    "\002\000\004\043\306\001\002\000\044\002\uffb0\003\uffb0" +
    "\010\uffb0\012\uffb0\014\uffb0\016\uffb0\021\uffb0\022\uffb0\045" +
    "\uffb0\075\uffb0\104\uffb0\117\uffb0\120\uffb0\123\uffb0\127\uffb0" +
    "\164\uffb0\167\uffb0\001\002\000\004\043\313\001\002\000" +
    "\006\003\311\043\312\001\002\000\044\002\uffa5\003\uffa5" +
    "\010\uffa5\012\uffa5\014\uffa5\016\uffa5\021\uffa5\022\uffa5\045" +
    "\uffa5\075\uffa5\104\uffa5\117\uffa5\120\uffa5\123\uffa5\127\uffa5" +
    "\164\uffa5\167\uffa5\001\002\000\044\002\uffb2\003\uffb2\010" +
    "\uffb2\012\uffb2\014\uffb2\016\uffb2\021\uffb2\022\uffb2\045\uffb2" +
    "\075\uffb2\104\uffb2\117\uffb2\120\uffb2\123\uffb2\127\uffb2\164" +
    "\uffb2\167\uffb2\001\002\000\044\002\uffa6\003\uffa6\010\uffa6" +
    "\012\uffa6\014\uffa6\016\uffa6\021\uffa6\022\uffa6\045\uffa6\075" +
    "\uffa6\104\uffa6\117\uffa6\120\uffa6\123\uffa6\127\uffa6\164\uffa6" +
    "\167\uffa6\001\002\000\006\043\316\106\315\001\002\000" +
    "\006\043\320\110\317\001\002\000\044\002\uffa7\003\uffa7" +
    "\010\uffa7\012\uffa7\014\uffa7\016\uffa7\021\uffa7\022\uffa7\045" +
    "\uffa7\075\uffa7\104\uffa7\117\uffa7\120\uffa7\123\uffa7\127\uffa7" +
    "\164\uffa7\167\uffa7\001\002\000\004\106\321\001\002\000" +
    "\044\002\uffb1\003\uffb1\010\uffb1\012\uffb1\014\uffb1\016\uffb1" +
    "\021\uffb1\022\uffb1\045\uffb1\075\uffb1\104\uffb1\117\uffb1\120" +
    "\uffb1\123\uffb1\127\uffb1\164\uffb1\167\uffb1\001\002\000\004" +
    "\043\322\001\002\000\044\002\uffad\003\uffad\010\uffad\012" +
    "\uffad\014\uffad\016\uffad\021\uffad\022\uffad\045\uffad\075\uffad" +
    "\104\uffad\117\uffad\120\uffad\123\uffad\127\uffad\164\uffad\167" +
    "\uffad\001\002\000\004\106\343\001\002\000\006\003\326" +
    "\106\325\001\002\000\006\003\333\110\332\001\002\000" +
    "\004\110\327\001\002\000\004\106\330\001\002\000\004" +
    "\043\331\001\002\000\044\002\uffab\003\uffab\010\uffab\012" +
    "\uffab\014\uffab\016\uffab\021\uffab\022\uffab\045\uffab\075\uffab" +
    "\104\uffab\117\uffab\120\uffab\123\uffab\127\uffab\164\uffab\167" +
    "\uffab\001\002\000\006\003\337\106\336\001\002\000\004" +
    "\106\334\001\002\000\004\043\335\001\002\000\044\002" +
    "\uffaa\003\uffaa\010\uffaa\012\uffaa\014\uffaa\016\uffaa\021\uffaa" +
    "\022\uffaa\045\uffaa\075\uffaa\104\uffaa\117\uffaa\120\uffaa\123" +
    "\uffaa\127\uffaa\164\uffaa\167\uffaa\001\002\000\006\003\341" +
    "\043\342\001\002\000\004\043\340\001\002\000\044\002" +
    "\uffa9\003\uffa9\010\uffa9\012\uffa9\014\uffa9\016\uffa9\021\uffa9" +
    "\022\uffa9\045\uffa9\075\uffa9\104\uffa9\117\uffa9\120\uffa9\123" +
    "\uffa9\127\uffa9\164\uffa9\167\uffa9\001\002\000\044\002\uffa8" +
    "\003\uffa8\010\uffa8\012\uffa8\014\uffa8\016\uffa8\021\uffa8\022" +
    "\uffa8\045\uffa8\075\uffa8\104\uffa8\117\uffa8\120\uffa8\123\uffa8" +
    "\127\uffa8\164\uffa8\167\uffa8\001\002\000\044\002\uffb3\003" +
    "\uffb3\010\uffb3\012\uffb3\014\uffb3\016\uffb3\021\uffb3\022\uffb3" +
    "\045\uffb3\075\uffb3\104\uffb3\117\uffb3\120\uffb3\123\uffb3\127" +
    "\uffb3\164\uffb3\167\uffb3\001\002\000\004\110\344\001\002" +
    "\000\004\106\345\001\002\000\004\043\346\001\002\000" +
    "\044\002\uffac\003\uffac\010\uffac\012\uffac\014\uffac\016\uffac" +
    "\021\uffac\022\uffac\045\uffac\075\uffac\104\uffac\117\uffac\120" +
    "\uffac\123\uffac\127\uffac\164\uffac\167\uffac\001\002\000\004" +
    "\051\350\001\002\000\044\002\uff64\003\uff64\010\uff64\012" +
    "\uff64\014\uff64\016\uff64\021\uff64\022\uff64\045\uff64\075\uff64" +
    "\104\uff64\117\uff64\120\uff64\123\uff64\127\uff64\164\uff64\167" +
    "\uff64\001\002\000\004\106\352\001\002\000\004\043\353" +
    "\001\002\000\004\053\354\001\002\000\032\003\265\115" +
    "\262\125\264\130\273\131\272\132\260\133\270\137\263" +
    "\142\256\160\271\161\261\166\267\001\002\000\044\002" +
    "\uffb5\003\uffb5\010\uffb5\012\uffb5\014\uffb5\016\uffb5\021\uffb5" +
    "\022\uffb5\045\uffb5\075\uffb5\104\uffb5\117\uffb5\120\uffb5\123" +
    "\uffb5\127\uffb5\164\uffb5\167\uffb5\001\002\000\006\043\360" +
    "\106\357\001\002\000\004\110\361\001\002\000\044\002" +
    "\uff96\003\uff96\010\uff96\012\uff96\014\uff96\016\uff96\021\uff96" +
    "\022\uff96\045\uff96\075\uff96\104\uff96\117\uff96\120\uff96\123" +
    "\uff96\127\uff96\164\uff96\167\uff96\001\002\000\004\044\362" +
    "\001\002\000\004\165\363\001\002\000\004\044\364\001" +
    "\002\000\004\106\365\001\002\000\010\045\uff94\047\uff94" +
    "\110\u0108\001\002\000\004\045\367\001\002\000\004\045" +
    "\370\001\002\000\004\110\371\001\002\000\004\044\372" +
    "\001\002\000\004\165\373\001\002\000\004\044\374\001" +
    "\002\000\004\106\365\001\002\000\004\045\376\001\002" +
    "\000\004\045\377\001\002\000\004\110\u0100\001\002\000" +
    "\004\044\u0101\001\002\000\004\165\u0102\001\002\000\004" +
    "\044\u0103\001\002\000\004\106\365\001\002\000\004\045" +
    "\u0105\001\002\000\004\045\u0106\001\002\000\004\043\u0107" +
    "\001\002\000\044\002\uff95\003\uff95\010\uff95\012\uff95\014" +
    "\uff95\016\uff95\021\uff95\022\uff95\045\uff95\075\uff95\104\uff95" +
    "\117\uff95\120\uff95\123\uff95\127\uff95\164\uff95\167\uff95\001" +
    "\002\000\004\106\365\001\002\000\006\045\uff93\047\uff93" +
    "\001\002\000\004\051\u0123\001\002\000\016\003\u011e\051" +
    "\u011f\104\075\106\077\107\074\163\100\001\002\000\014" +
    "\075\u0119\104\075\106\077\107\074\163\100\001\002\000" +
    "\006\043\u0110\104\u010e\001\002\000\016\003\uff1e\042\uff1e" +
    "\043\uff1e\044\uff1e\104\u0112\110\u0113\001\002\000\004\043" +
    "\u0111\001\002\000\044\002\uff98\003\uff98\010\uff98\012\uff98" +
    "\014\uff98\016\uff98\021\uff98\022\uff98\045\uff98\075\uff98\104" +
    "\uff98\117\uff98\120\uff98\123\uff98\127\uff98\164\uff98\167\uff98" +
    "\001\002\000\044\002\uff99\003\uff99\010\uff99\012\uff99\014" +
    "\uff99\016\uff99\021\uff99\022\uff99\045\uff99\075\uff99\104\uff99" +
    "\117\uff99\120\uff99\123\uff99\127\uff99\164\uff99\167\uff99\001" +
    "\002\000\004\104\u010e\001\002\000\014\003\uff19\042\uff19" +
    "\043\uff19\044\uff19\104\u0115\001\002\000\012\003\uff1d\042" +
    "\uff1d\043\uff1d\044\uff1d\001\002\000\014\003\uff1c\042\uff1c" +
    "\043\uff1c\044\uff1c\104\u010e\001\002\000\012\003\uff1b\042" +
    "\uff1b\043\uff1b\044\uff1b\001\002\000\012\003\uff1a\042\uff1a" +
    "\043\uff1a\044\uff1a\001\002\000\004\051\u011c\001\002\000" +
    "\012\104\075\106\077\107\074\163\100\001\002\000\004" +
    "\051\u011b\001\002\000\044\002\uff5f\003\uff5f\010\uff5f\012" +
    "\uff5f\014\uff5f\016\uff5f\021\uff5f\022\uff5f\045\uff5f\075\uff5f" +
    "\104\uff5f\117\uff5f\120\uff5f\123\uff5f\127\uff5f\164\uff5f\167" +
    "\uff5f\001\002\000\044\002\uff5c\003\uff5c\010\uff5c\012\uff5c" +
    "\014\uff5c\016\uff5c\021\uff5c\022\uff5c\045\uff5c\075\uff5c\104" +
    "\uff5c\117\uff5c\120\uff5c\123\uff5c\127\uff5c\164\uff5c\167\uff5c" +
    "\001\002\000\006\003\u0121\051\u0122\001\002\000\004\051" +
    "\u0120\001\002\000\044\002\uff65\003\uff65\010\uff65\012\uff65" +
    "\014\uff65\016\uff65\021\uff65\022\uff65\045\uff65\075\uff65\104" +
    "\uff65\117\uff65\120\uff65\123\uff65\127\uff65\164\uff65\167\uff65" +
    "\001\002\000\044\002\uff5e\003\uff5e\010\uff5e\012\uff5e\014" +
    "\uff5e\016\uff5e\021\uff5e\022\uff5e\045\uff5e\075\uff5e\104\uff5e" +
    "\117\uff5e\120\uff5e\123\uff5e\127\uff5e\164\uff5e\167\uff5e\001" +
    "\002\000\044\002\uff5d\003\uff5d\010\uff5d\012\uff5d\014\uff5d" +
    "\016\uff5d\021\uff5d\022\uff5d\045\uff5d\075\uff5d\104\uff5d\117" +
    "\uff5d\120\uff5d\123\uff5d\127\uff5d\164\uff5d\167\uff5d\001\002" +
    "\000\044\002\uff6b\003\uff6b\010\uff6b\012\uff6b\014\uff6b\016" +
    "\uff6b\021\uff6b\022\uff6b\045\uff6b\075\uff6b\104\uff6b\117\uff6b" +
    "\120\uff6b\123\uff6b\127\uff6b\164\uff6b\167\uff6b\001\002\000" +
    "\044\002\uff66\003\uff66\010\uff66\012\uff66\014\uff66\016\uff66" +
    "\021\uff66\022\uff66\045\uff66\075\uff66\104\uff66\117\uff66\120" +
    "\uff66\123\uff66\127\uff66\164\uff66\167\uff66\001\002\000\012" +
    "\003\u0143\042\u0146\043\u0145\104\u010e\001\002\000\006\042" +
    "\u0133\104\u010e\001\002\000\006\043\u0128\104\u010e\001\002" +
    "\000\004\043\u012d\001\002\000\004\044\u0129\001\002\000" +
    "\032\012\067\014\052\016\064\045\u012b\075\057\104\053" +
    "\117\061\120\044\123\055\127\043\164\054\167\047\001" +
    "\002\000\032\012\067\014\052\016\064\045\u012c\075\057" +
    "\104\053\117\061\120\044\123\055\127\043\164\054\167" +
    "\047\001\002\000\044\002\uff23\003\uff23\010\uff23\012\uff23" +
    "\014\uff23\016\uff23\021\uff23\022\uff23\045\uff23\075\uff23\104" +
    "\uff23\117\uff23\120\uff23\123\uff23\127\uff23\164\uff23\167\uff23" +
    "\001\002\000\044\002\uff37\003\uff37\010\uff37\012\uff37\014" +
    "\uff37\016\uff37\021\uff37\022\uff37\045\uff37\075\uff37\104\uff37" +
    "\117\uff37\120\uff37\123\uff37\127\uff37\164\uff37\167\uff37\001" +
    "\002\000\004\044\u012e\001\002\000\032\012\067\014\052" +
    "\016\064\045\u0130\075\057\104\053\117\061\120\044\123" +
    "\055\127\043\164\054\167\047\001\002\000\032\012\067" +
    "\014\052\016\064\045\u0131\075\057\104\053\117\061\120" +
    "\044\123\055\127\043\164\054\167\047\001\002\000\044" +
    "\002\uff2d\003\uff2d\010\uff2d\012\uff2d\014\uff2d\016\uff2d\021" +
    "\uff2d\022\uff2d\045\uff2d\075\uff2d\104\uff2d\117\uff2d\120\uff2d" +
    "\123\uff2d\127\uff2d\164\uff2d\167\uff2d\001\002\000\044\002" +
    "\uff41\003\uff41\010\uff41\012\uff41\014\uff41\016\uff41\021\uff41" +
    "\022\uff41\045\uff41\075\uff41\104\uff41\117\uff41\120\uff41\123" +
    "\uff41\127\uff41\164\uff41\167\uff41\001\002\000\004\043\u013f" +
    "\001\002\000\006\043\u0135\104\u010e\001\002\000\004\043" +
    "\u013a\001\002\000\004\044\u0136\001\002\000\032\012\067" +
    "\014\052\016\064\045\u0138\075\057\104\053\117\061\120" +
    "\044\123\055\127\043\164\054\167\047\001\002\000\032" +
    "\012\067\014\052\016\064\045\u0139\075\057\104\053\117" +
    "\061\120\044\123\055\127\043\164\054\167\047\001\002" +
    "\000\044\002\uff28\003\uff28\010\uff28\012\uff28\014\uff28\016" +
    "\uff28\021\uff28\022\uff28\045\uff28\075\uff28\104\uff28\117\uff28" +
    "\120\uff28\123\uff28\127\uff28\164\uff28\167\uff28\001\002\000" +
    "\044\002\uff3c\003\uff3c\010\uff3c\012\uff3c\014\uff3c\016\uff3c" +
    "\021\uff3c\022\uff3c\045\uff3c\075\uff3c\104\uff3c\117\uff3c\120" +
    "\uff3c\123\uff3c\127\uff3c\164\uff3c\167\uff3c\001\002\000\004" +
    "\044\u013b\001\002\000\032\012\067\014\052\016\064\045" +
    "\u013d\075\057\104\053\117\061\120\044\123\055\127\043" +
    "\164\054\167\047\001\002\000\032\012\067\014\052\016" +
    "\064\045\u013e\075\057\104\053\117\061\120\044\123\055" +
    "\127\043\164\054\167\047\001\002\000\044\002\uff32\003" +
    "\uff32\010\uff32\012\uff32\014\uff32\016\uff32\021\uff32\022\uff32" +
    "\045\uff32\075\uff32\104\uff32\117\uff32\120\uff32\123\uff32\127" +
    "\uff32\164\uff32\167\uff32\001\002\000\044\002\uff46\003\uff46" +
    "\010\uff46\012\uff46\014\uff46\016\uff46\021\uff46\022\uff46\045" +
    "\uff46\075\uff46\104\uff46\117\uff46\120\uff46\123\uff46\127\uff46" +
    "\164\uff46\167\uff46\001\002\000\004\044\u0140\001\002\000" +
    "\030\012\067\014\052\016\064\075\057\104\053\117\061" +
    "\120\044\123\055\127\043\164\054\167\047\001\002\000" +
    "\032\012\067\014\052\016\064\045\u0142\075\057\104\053" +
    "\117\061\120\044\123\055\127\043\164\054\167\047\001" +
    "\002\000\044\002\uff40\003\uff40\010\uff40\012\uff40\014\uff40" +
    "\016\uff40\021\uff40\022\uff40\045\uff40\075\uff40\104\uff40\117" +
    "\uff40\120\uff40\123\uff40\127\uff40\164\uff40\167\uff40\001\002" +
    "\000\006\043\u018a\104\u010e\001\002\000\004\043\u0186\001" +
    "\002\000\004\044\u0182\001\002\000\014\003\u0147\042\u014a" +
    "\043\u0149\044\u014b\104\u010e\001\002\000\004\044\u017e\001" +
    "\002\000\012\003\u0161\042\u0163\043\u0162\044\u0164\001\002" +
    "\000\034\003\u0158\012\067\014\052\016\064\044\u0159\075" +
    "\057\104\053\117\061\120\044\123\055\127\043\164\054" +
    "\167\047\001\002\000\006\003\u014f\044\u0150\001\002\000" +
    "\032\012\067\014\052\016\064\045\u014d\075\057\104\053" +
    "\117\061\120\044\123\055\127\043\164\054\167\047\001" +
    "\002\000\032\012\067\014\052\016\064\045\u014e\075\057" +
    "\104\053\117\061\120\044\123\055\127\043\164\054\167" +
    "\047\001\002\000\044\002\uff21\003\uff21\010\uff21\012\uff21" +
    "\014\uff21\016\uff21\021\uff21\022\uff21\045\uff21\075\uff21\104" +
    "\uff21\117\uff21\120\uff21\123\uff21\127\uff21\164\uff21\167\uff21" +
    "\001\002\000\044\002\uff35\003\uff35\010\uff35\012\uff35\014" +
    "\uff35\016\uff35\021\uff35\022\uff35\045\uff35\075\uff35\104\uff35" +
    "\117\uff35\120\uff35\123\uff35\127\uff35\164\uff35\167\uff35\001" +
    "\002\000\032\012\067\014\052\016\064\045\u0155\075\057" +
    "\104\053\117\061\120\044\123\055\127\043\164\054\167" +
    "\047\001\002\000\032\003\u0152\012\067\014\052\016\064" +
    "\075\057\104\053\117\061\120\044\123\055\127\043\164" +
    "\054\167\047\001\002\000\032\003\u0153\012\067\014\052" +
    "\016\064\075\057\104\053\117\061\120\044\123\055\127" +
    "\043\164\054\167\047\001\002\000\044\002\uff24\003\uff24" +
    "\010\uff24\012\uff24\014\uff24\016\uff24\021\uff24\022\uff24\045" +
    "\uff24\075\uff24\104\uff24\117\uff24\120\uff24\123\uff24\127\uff24" +
    "\164\uff24\167\uff24\001\002\000\044\002\uff38\003\uff38\010" +
    "\uff38\012\uff38\014\uff38\016\uff38\021\uff38\022\uff38\045\uff38" +
    "\075\uff38\104\uff38\117\uff38\120\uff38\123\uff38\127\uff38\164" +
    "\uff38\167\uff38\001\002\000\032\012\067\014\052\016\064" +
    "\045\u0156\075\057\104\053\117\061\120\044\123\055\127" +
    "\043\164\054\167\047\001\002\000\044\002\uff25\003\uff25" +
    "\010\uff25\012\uff25\014\uff25\016\uff25\021\uff25\022\uff25\045" +
    "\uff25\075\uff25\104\uff25\117\uff25\120\uff25\123\uff25\127\uff25" +
    "\164\uff25\167\uff25\001\002\000\044\002\uff39\003\uff39\010" +
    "\uff39\012\uff39\014\uff39\016\uff39\021\uff39\022\uff39\045\uff39" +
    "\075\uff39\104\uff39\117\uff39\120\uff39\123\uff39\127\uff39\164" +
    "\uff39\167\uff39\001\002\000\032\012\067\014\052\016\064" +
    "\045\u0160\075\057\104\053\117\061\120\044\123\055\127" +
    "\043\164\054\167\047\001\002\000\004\045\u015f\001\002" +
    "\000\034\003\u015b\012\067\014\052\016\064\045\u015c\075" +
    "\057\104\053\117\061\120\044\123\055\127\043\164\054" +
    "\167\047\001\002\000\034\003\u015d\012\067\014\052\016" +
    "\064\045\u015e\075\057\104\053\117\061\120\044\123\055" +
    "\127\043\164\054\167\047\001\002\000\044\002\uff1f\003" +
    "\uff1f\010\uff1f\012\uff1f\014\uff1f\016\uff1f\021\uff1f\022\uff1f" +
    "\045\uff1f\075\uff1f\104\uff1f\117\uff1f\120\uff1f\123\uff1f\127" +
    "\uff1f\164\uff1f\167\uff1f\001\002\000\044\002\uff49\003\uff49" +
    "\010\uff49\012\uff49\014\uff49\016\uff49\021\uff49\022\uff49\045" +
    "\uff49\075\uff49\104\uff49\117\uff49\120\uff49\123\uff49\127\uff49" +
    "\164\uff49\167\uff49\001\002\000\044\002\uff33\003\uff33\010" +
    "\uff33\012\uff33\014\uff33\016\uff33\021\uff33\022\uff33\045\uff33" +
    "\075\uff33\104\uff33\117\uff33\120\uff33\123\uff33\127\uff33\164" +
    "\uff33\167\uff33\001\002\000\044\002\uff48\003\uff48\010\uff48" +
    "\012\uff48\014\uff48\016\uff48\021\uff48\022\uff48\045\uff48\075" +
    "\uff48\104\uff48\117\uff48\120\uff48\123\uff48\127\uff48\164\uff48" +
    "\167\uff48\001\002\000\044\002\uff20\003\uff20\010\uff20\012" +
    "\uff20\014\uff20\016\uff20\021\uff20\022\uff20\045\uff20\075\uff20" +
    "\104\uff20\117\uff20\120\uff20\123\uff20\127\uff20\164\uff20\167" +
    "\uff20\001\002\000\044\002\uff34\003\uff34\010\uff34\012\uff34" +
    "\014\uff34\016\uff34\021\uff34\022\uff34\045\uff34\075\uff34\104" +
    "\uff34\117\uff34\120\uff34\123\uff34\127\uff34\164\uff34\167\uff34" +
    "\001\002\000\004\044\u017a\001\002\000\010\003\u0170\044" +
    "\u0172\045\u0171\001\002\000\006\003\u0168\044\u0169\001\002" +
    "\000\032\012\067\014\052\016\064\045\u0166\075\057\104" +
    "\053\117\061\120\044\123\055\127\043\164\054\167\047" +
    "\001\002\000\032\012\067\014\052\016\064\045\u0167\075" +
    "\057\104\053\117\061\120\044\123\055\127\043\164\054" +
    "\167\047\001\002\000\044\002\uff2b\003\uff2b\010\uff2b\012" +
    "\uff2b\014\uff2b\016\uff2b\021\uff2b\022\uff2b\045\uff2b\075\uff2b" +
    "\104\uff2b\117\uff2b\120\uff2b\123\uff2b\127\uff2b\164\uff2b\167" +
    "\uff2b\001\002\000\044\002\uff3f\003\uff3f\010\uff3f\012\uff3f" +
    "\014\uff3f\016\uff3f\021\uff3f\022\uff3f\045\uff3f\075\uff3f\104" +
    "\uff3f\117\uff3f\120\uff3f\123\uff3f\127\uff3f\164\uff3f\167\uff3f" +
    "\001\002\000\032\012\067\014\052\016\064\045\u016e\075" +
    "\057\104\053\117\061\120\044\123\055\127\043\164\054" +
    "\167\047\001\002\000\032\003\u016b\012\067\014\052\016" +
    "\064\075\057\104\053\117\061\120\044\123\055\127\043" +
    "\164\054\167\047\001\002\000\032\003\u016c\012\067\014" +
    "\052\016\064\075\057\104\053\117\061\120\044\123\055" +
    "\127\043\164\054\167\047\001\002\000\044\002\uff2e\003" +
    "\uff2e\010\uff2e\012\uff2e\014\uff2e\016\uff2e\021\uff2e\022\uff2e" +
    "\045\uff2e\075\uff2e\104\uff2e\117\uff2e\120\uff2e\123\uff2e\127" +
    "\uff2e\164\uff2e\167\uff2e\001\002\000\044\002\uff42\003\uff42" +
    "\010\uff42\012\uff42\014\uff42\016\uff42\021\uff42\022\uff42\045" +
    "\uff42\075\uff42\104\uff42\117\uff42\120\uff42\123\uff42\127\uff42" +
    "\164\uff42\167\uff42\001\002\000\032\012\067\014\052\016" +
    "\064\045\u016f\075\057\104\053\117\061\120\044\123\055" +
    "\127\043\164\054\167\047\001\002\000\044\002\uff2f\003" +
    "\uff2f\010\uff2f\012\uff2f\014\uff2f\016\uff2f\021\uff2f\022\uff2f" +
    "\045\uff2f\075\uff2f\104\uff2f\117\uff2f\120\uff2f\123\uff2f\127" +
    "\uff2f\164\uff2f\167\uff2f\001\002\000\044\002\uff43\003\uff43" +
    "\010\uff43\012\uff43\014\uff43\016\uff43\021\uff43\022\uff43\045" +
    "\uff43\075\uff43\104\uff43\117\uff43\120\uff43\123\uff43\127\uff43" +
    "\164\uff43\167\uff43\001\002\000\030\012\067\014\052\016" +
    "\064\075\057\104\053\117\061\120\044\123\055\127\043" +
    "\164\054\167\047\001\002\000\044\002\uff2a\003\uff2a\010" +
    "\uff2a\012\uff2a\014\uff2a\016\uff2a\021\uff2a\022\uff2a\045\uff2a" +
    "\075\uff2a\104\uff2a\117\uff2a\120\uff2a\123\uff2a\127\uff2a\164" +
    "\uff2a\167\uff2a\001\002\000\034\003\u0174\012\067\014\052" +
    "\016\064\045\u0175\075\057\104\053\117\061\120\044\123" +
    "\055\127\043\164\054\167\047\001\002\000\034\003\u0176" +
    "\012\067\014\052\016\064\045\u0177\075\057\104\053\117" +
    "\061\120\044\123\055\127\043\164\054\167\047\001\002" +
    "\000\044\002\uff29\003\uff29\010\uff29\012\uff29\014\uff29\016" +
    "\uff29\021\uff29\022\uff29\045\uff29\075\uff29\104\uff29\117\uff29" +
    "\120\uff29\123\uff29\127\uff29\164\uff29\167\uff29\001\002\000" +
    "\044\002\uff47\003\uff47\010\uff47\012\uff47\014\uff47\016\uff47" +
    "\021\uff47\022\uff47\045\uff47\075\uff47\104\uff47\117\uff47\120" +
    "\uff47\123\uff47\127\uff47\164\uff47\167\uff47\001\002\000\044" +
    "\002\uff3d\003\uff3d\010\uff3d\012\uff3d\014\uff3d\016\uff3d\021" +
    "\uff3d\022\uff3d\045\uff3d\075\uff3d\104\uff3d\117\uff3d\120\uff3d" +
    "\123\uff3d\127\uff3d\164\uff3d\167\uff3d\001\002\000\044\002" +
    "\uff4a\003\uff4a\010\uff4a\012\uff4a\014\uff4a\016\uff4a\021\uff4a" +
    "\022\uff4a\045\uff4a\075\uff4a\104\uff4a\117\uff4a\120\uff4a\123" +
    "\uff4a\127\uff4a\164\uff4a\167\uff4a\001\002\000\032\012\067" +
    "\014\052\016\064\045\u0179\075\057\104\053\117\061\120" +
    "\044\123\055\127\043\164\054\167\047\001\002\000\044" +
    "\002\uff3e\003\uff3e\010\uff3e\012\uff3e\014\uff3e\016\uff3e\021" +
    "\uff3e\022\uff3e\045\uff3e\075\uff3e\104\uff3e\117\uff3e\120\uff3e" +
    "\123\uff3e\127\uff3e\164\uff3e\167\uff3e\001\002\000\032\012" +
    "\067\014\052\016\064\045\u017c\075\057\104\053\117\061" +
    "\120\044\123\055\127\043\164\054\167\047\001\002\000" +
    "\032\012\067\014\052\016\064\045\u017d\075\057\104\053" +
    "\117\061\120\044\123\055\127\043\164\054\167\047\001" +
    "\002\000\044\002\uff30\003\uff30\010\uff30\012\uff30\014\uff30" +
    "\016\uff30\021\uff30\022\uff30\045\uff30\075\uff30\104\uff30\117" +
    "\uff30\120\uff30\123\uff30\127\uff30\164\uff30\167\uff30\001\002" +
    "\000\044\002\uff44\003\uff44\010\uff44\012\uff44\014\uff44\016" +
    "\uff44\021\uff44\022\uff44\045\uff44\075\uff44\104\uff44\117\uff44" +
    "\120\uff44\123\uff44\127\uff44\164\uff44\167\uff44\001\002\000" +
    "\032\012\067\014\052\016\064\045\u0180\075\057\104\053" +
    "\117\061\120\044\123\055\127\043\164\054\167\047\001" +
    "\002\000\032\012\067\014\052\016\064\045\u0181\075\057" +
    "\104\053\117\061\120\044\123\055\127\043\164\054\167" +
    "\047\001\002\000\044\002\uff26\003\uff26\010\uff26\012\uff26" +
    "\014\uff26\016\uff26\021\uff26\022\uff26\045\uff26\075\uff26\104" +
    "\uff26\117\uff26\120\uff26\123\uff26\127\uff26\164\uff26\167\uff26" +
    "\001\002\000\044\002\uff3a\003\uff3a\010\uff3a\012\uff3a\014" +
    "\uff3a\016\uff3a\021\uff3a\022\uff3a\045\uff3a\075\uff3a\104\uff3a" +
    "\117\uff3a\120\uff3a\123\uff3a\127\uff3a\164\uff3a\167\uff3a\001" +
    "\002\000\032\012\067\014\052\016\064\045\u0184\075\057" +
    "\104\053\117\061\120\044\123\055\127\043\164\054\167" +
    "\047\001\002\000\032\012\067\014\052\016\064\045\u0185" +
    "\075\057\104\053\117\061\120\044\123\055\127\043\164" +
    "\054\167\047\001\002\000\044\002\uff22\003\uff22\010\uff22" +
    "\012\uff22\014\uff22\016\uff22\021\uff22\022\uff22\045\uff22\075" +
    "\uff22\104\uff22\117\uff22\120\uff22\123\uff22\127\uff22\164\uff22" +
    "\167\uff22\001\002\000\044\002\uff36\003\uff36\010\uff36\012" +
    "\uff36\014\uff36\016\uff36\021\uff36\022\uff36\045\uff36\075\uff36" +
    "\104\uff36\117\uff36\120\uff36\123\uff36\127\uff36\164\uff36\167" +
    "\uff36\001\002\000\004\044\u0187\001\002\000\004\045\u0188" +
    "\001\002\000\044\002\uff2c\003\uff2c\010\uff2c\012\uff2c\014" +
    "\uff2c\016\uff2c\021\uff2c\022\uff2c\045\uff2c\075\uff2c\104\uff2c" +
    "\117\uff2c\120\uff2c\123\uff2c\127\uff2c\164\uff2c\167\uff2c\001" +
    "\002\000\004\043\u018f\001\002\000\004\044\u018b\001\002" +
    "\000\032\012\067\014\052\016\064\045\u018d\075\057\104" +
    "\053\117\061\120\044\123\055\127\043\164\054\167\047" +
    "\001\002\000\032\012\067\014\052\016\064\045\u018e\075" +
    "\057\104\053\117\061\120\044\123\055\127\043\164\054" +
    "\167\047\001\002\000\044\002\uff27\003\uff27\010\uff27\012" +
    "\uff27\014\uff27\016\uff27\021\uff27\022\uff27\045\uff27\075\uff27" +
    "\104\uff27\117\uff27\120\uff27\123\uff27\127\uff27\164\uff27\167" +
    "\uff27\001\002\000\044\002\uff3b\003\uff3b\010\uff3b\012\uff3b" +
    "\014\uff3b\016\uff3b\021\uff3b\022\uff3b\045\uff3b\075\uff3b\104" +
    "\uff3b\117\uff3b\120\uff3b\123\uff3b\127\uff3b\164\uff3b\167\uff3b" +
    "\001\002\000\004\044\u0190\001\002\000\032\012\067\014" +
    "\052\016\064\045\u0192\075\057\104\053\117\061\120\044" +
    "\123\055\127\043\164\054\167\047\001\002\000\032\012" +
    "\067\014\052\016\064\045\u0193\075\057\104\053\117\061" +
    "\120\044\123\055\127\043\164\054\167\047\001\002\000" +
    "\044\002\uff31\003\uff31\010\uff31\012\uff31\014\uff31\016\uff31" +
    "\021\uff31\022\uff31\045\uff31\075\uff31\104\uff31\117\uff31\120" +
    "\uff31\123\uff31\127\uff31\164\uff31\167\uff31\001\002\000\044" +
    "\002\uff45\003\uff45\010\uff45\012\uff45\014\uff45\016\uff45\021" +
    "\uff45\022\uff45\045\uff45\075\uff45\104\uff45\117\uff45\120\uff45" +
    "\123\uff45\127\uff45\164\uff45\167\uff45\001\002\000\004\106" +
    "\u0195\001\002\000\004\110\u0196\001\002\000\004\046\u0197" +
    "\001\002\000\004\106\365\001\002\000\004\047\u0199\001" +
    "\002\000\004\043\u019a\001\002\000\044\002\uff97\003\uff97" +
    "\010\uff97\012\uff97\014\uff97\016\uff97\021\uff97\022\uff97\045" +
    "\uff97\075\uff97\104\uff97\117\uff97\120\uff97\123\uff97\127\uff97" +
    "\164\uff97\167\uff97\001\002\000\014\002\uffeb\010\uffeb\021" +
    "\uffeb\022\uffeb\045\uffeb\001\002\000\004\106\u019d\001\002" +
    "\000\004\043\u019e\001\002\000\004\053\u019f\001\002\000" +
    "\032\003\265\115\262\125\264\130\273\131\272\132\260" +
    "\133\270\137\263\142\256\160\271\161\261\166\267\001" +
    "\002\000\044\002\uffb6\003\uffb6\010\uffb6\012\uffb6\014\uffb6" +
    "\016\uffb6\021\uffb6\022\uffb6\045\uffb6\075\uffb6\104\uffb6\117" +
    "\uffb6\120\uffb6\123\uffb6\127\uffb6\164\uffb6\167\uffb6\001\002" +
    "\000\012\104\075\106\077\107\074\163\100\001\002\000" +
    "\004\043\u01a3\001\002\000\044\002\uffb8\003\uffb8\010\uffb8" +
    "\012\uffb8\014\uffb8\016\uffb8\021\uffb8\022\uffb8\045\uffb8\075" +
    "\uffb8\104\uffb8\117\uffb8\120\uffb8\123\uffb8\127\uffb8\164\uffb8" +
    "\167\uffb8\001\002\000\032\012\067\014\052\016\064\045" +
    "\u01aa\075\057\104\053\117\061\120\044\123\055\127\043" +
    "\164\054\167\047\001\002\000\014\002\uffee\010\uffee\021" +
    "\uffee\022\uffee\045\uffee\001\002\000\042\002\uffed\010\uffed" +
    "\012\067\014\052\016\064\021\uffed\022\uffed\045\u01a8\075" +
    "\057\104\053\117\061\120\044\123\055\127\043\164\054" +
    "\167\047\001\002\000\042\002\uffea\010\uffea\012\067\014" +
    "\052\016\064\021\uffea\022\uffea\045\u01a9\075\057\104\053" +
    "\117\061\120\044\123\055\127\043\164\054\167\047\001" +
    "\002\000\014\002\uffef\010\uffef\021\uffef\022\uffef\045\uffef" +
    "\001\002\000\014\002\ufff0\010\ufff0\021\ufff0\022\ufff0\045" +
    "\ufff0\001\002\000\014\002\uffe9\010\uffe9\021\uffe9\022\uffe9" +
    "\045\uffe9\001\002\000\006\003\u01be\042\u01bf\001\002\000" +
    "\010\002\ufff5\021\ufff5\045\ufff5\001\002\000\014\002\ufff2" +
    "\010\u01ab\021\ufff2\022\u01af\045\ufff2\001\002\000\014\002" +
    "\ufff4\010\u01ab\021\ufff4\022\u01af\045\ufff4\001\002\000\006" +
    "\003\u01b1\104\u01b0\001\002\000\006\003\u01b5\044\u01b6\001" +
    "\002\000\004\044\u01b2\001\002\000\030\012\067\014\052" +
    "\016\064\075\057\104\053\117\061\120\044\123\055\127" +
    "\043\164\054\167\047\001\002\000\032\012\067\014\052" +
    "\016\064\045\u01b4\075\057\104\053\117\061\120\044\123" +
    "\055\127\043\164\054\167\047\001\002\000\014\002\uffe7" +
    "\010\uffe7\021\uffe7\022\uffe7\045\uffe7\001\002\000\030\012" +
    "\067\014\052\016\064\075\057\104\053\117\061\120\044" +
    "\123\055\127\043\164\054\167\047\001\002\000\030\012" +
    "\067\014\052\016\064\075\057\104\053\117\061\120\044" +
    "\123\055\127\043\164\054\167\047\001\002\000\034\003" +
    "\u01b8\012\067\014\052\016\064\045\u01b9\075\057\104\053" +
    "\117\061\120\044\123\055\127\043\164\054\167\047\001" +
    "\002\000\014\002\uffe6\010\uffe6\021\uffe6\022\uffe6\045\uffe6" +
    "\001\002\000\014\002\uffe8\010\uffe8\021\uffe8\022\uffe8\045" +
    "\uffe8\001\002\000\032\012\067\014\052\016\064\045\u01bb" +
    "\075\057\104\053\117\061\120\044\123\055\127\043\164" +
    "\054\167\047\001\002\000\014\002\uffe5\010\uffe5\021\uffe5" +
    "\022\uffe5\045\uffe5\001\002\000\010\002\ufff3\021\ufff3\045" +
    "\ufff3\001\002\000\010\002\ufff1\021\ufff1\045\ufff1\001\002" +
    "\000\006\104\u01c0\106\u01c1\001\002\000\010\003\u01c3\104" +
    "\u01c0\106\u01c1\001\002\000\006\003\uffdc\110\uffdc\001\002" +
    "\000\006\003\uffdd\110\uffdd\001\002\000\006\003\u01e3\110" +
    "\u01e2\001\002\000\004\110\u01c4\001\002\000\004\046\u01c5" +
    "\001\002\000\010\047\uffd6\052\u01c7\106\u01c6\001\002\000" +
    "\012\052\u01d4\104\u01cc\106\u01cd\107\u01cb\001\002\000\010" +
    "\104\u01cc\106\u01cd\107\u01cb\001\002\000\004\047\u01c9\001" +
    "\002\000\004\043\u01ca\001\002\000\014\002\uffe2\010\uffe2" +
    "\021\uffe2\022\uffe2\045\uffe2\001\002\000\014\003\uffcf\047" +
    "\uffcf\071\u01d1\106\uffcf\110\uffcf\001\002\000\012\003\uffce" +
    "\047\uffce\106\uffce\110\uffce\001\002\000\014\003\uffcd\047" +
    "\uffcd\071\u01cf\106\uffcd\110\uffcd\001\002\000\006\003\uffd9" +
    "\047\uffd9\001\002\000\004\107\u01d0\001\002\000\012\003" +
    "\uffcb\047\uffcb\106\uffcb\110\uffcb\001\002\000\004\106\u01d2" +
    "\001\002\000\012\003\uffcc\047\uffcc\106\uffcc\110\uffcc\001" +
    "\002\000\006\003\uffd8\047\uffd8\001\002\000\014\003\uffd7" +
    "\047\uffd7\104\u01cc\106\u01cd\107\u01cb\001\002\000\012\003" +
    "\uffdb\047\uffdb\106\u01d7\110\u01d6\001\002\000\006\052\u01dc" +
    "\106\u01db\001\002\000\004\052\u01d9\001\002\000\006\003" +
    "\uffda\047\uffda\001\002\000\010\104\u01cc\106\u01cd\107\u01cb" +
    "\001\002\000\006\003\uffd3\047\uffd3\001\002\000\012\052" +
    "\u01df\104\u01cc\106\u01cd\107\u01cb\001\002\000\010\104\u01cc" +
    "\106\u01cd\107\u01cb\001\002\000\006\003\uffd2\047\uffd2\001" +
    "\002\000\006\003\uffd1\047\uffd1\001\002\000\014\003\uffd0" +
    "\047\uffd0\104\u01cc\106\u01cd\107\u01cb\001\002\000\012\003" +
    "\uffd5\047\uffd5\106\u01d7\110\u01d6\001\002\000\006\003\uffd4" +
    "\047\uffd4\001\002\000\006\003\u01e8\046\u01e9\001\002\000" +
    "\004\046\u01e4\001\002\000\010\047\uffd6\052\u01c7\106\u01c6" +
    "\001\002\000\004\047\u01e6\001\002\000\004\043\u01e7\001" +
    "\002\000\014\002\uffe1\010\uffe1\021\uffe1\022\uffe1\045\uffe1" +
    "\001\002\000\010\047\uffd6\052\u01c7\106\u01c6\001\002\000" +
    "\012\003\uffd6\047\uffd6\052\u01c7\106\u01c6\001\002\000\006" +
    "\003\u01eb\047\u01ec\001\002\000\004\043\u01f0\001\002\000" +
    "\006\003\u01ed\043\u01ee\001\002\000\004\051\u01ef\001\002" +
    "\000\014\002\uffe4\010\uffe4\021\uffe4\022\uffe4\045\uffe4\001" +
    "\002\000\014\002\uffde\010\uffde\021\uffde\022\uffde\045\uffde" +
    "\001\002\000\014\002\uffdf\010\uffdf\021\uffdf\022\uffdf\045" +
    "\uffdf\001\002\000\004\047\u01f2\001\002\000\004\043\u01f3" +
    "\001\002\000\014\002\uffe0\010\uffe0\021\uffe0\022\uffe0\045" +
    "\uffe0\001\002\000\004\110\u01f5\001\002\000\004\046\u01f6" +
    "\001\002\000\010\047\uffd6\052\u01c7\106\u01c6\001\002\000" +
    "\004\047\u01f8\001\002\000\004\043\u01f9\001\002\000\014" +
    "\002\uffe3\010\uffe3\021\uffe3\022\uffe3\045\uffe3\001\002\000" +
    "\004\045\u01ff\001\002\000\036\011\036\012\067\014\052" +
    "\016\064\044\037\045\u01fd\075\057\104\053\117\061\120" +
    "\044\123\055\127\043\164\054\167\047\001\002\000\010" +
    "\002\ufff7\021\ufff7\045\u01fe\001\002\000\014\002\ufffb\010" +
    "\uffec\021\ufffb\022\uffec\045\uffec\001\002\000\006\002\ufffd" +
    "\021\ufffd\001\002\000\006\002\ufff8\021\ufff8\001\002\000" +
    "\006\011\036\044\037\001\002\000\004\045\u0202\001\002" +
    "\000\006\002\ufffa\021\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0200\000\006\002\007\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\034\032\u01f9\001\001\000\006\022" +
    "\034\032\037\001\001\000\010\013\u01ad\021\u01ab\023\u01ac" +
    "\001\001\000\026\005\041\007\u01a3\011\065\015\047\034" +
    "\064\036\062\037\055\040\045\041\057\046\050\001\001" +
    "\000\026\005\041\007\044\011\065\015\047\034\064\036" +
    "\062\037\055\040\045\041\057\046\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\137\011\151\015\141" +
    "\034\150\036\147\037\143\040\140\041\144\046\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\105\001\001\000\004\026\103\001\001\000\002" +
    "\001\001\000\004\026\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\113\001\001\000\004\026\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\243\016\125\001\001\000\006\014\127\016" +
    "\125\001\001\000\002\001\001\000\006\017\211\025\164" +
    "\001\001\000\006\017\162\025\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\041" +
    "\007\152\011\065\015\047\034\064\036\062\037\055\040" +
    "\045\041\057\046\050\001\001\000\026\005\041\007\134" +
    "\011\065\015\047\034\064\036\062\037\055\040\045\041" +
    "\057\046\050\001\001\000\024\005\137\011\151\015\141" +
    "\034\150\036\147\037\143\040\140\041\144\046\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\137\011\151\015\141\034\150\036\147" +
    "\037\143\040\140\041\144\046\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\041\007\156\011\065" +
    "\015\047\034\064\036\062\037\055\040\045\041\057\046" +
    "\050\001\001\000\024\005\137\011\151\015\141\034\150" +
    "\036\147\037\143\040\140\041\144\046\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\177" +
    "\001\001\000\002\001\001\000\004\020\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\225" +
    "\025\164\001\001\000\006\017\214\025\164\001\001\000" +
    "\004\020\221\001\001\000\004\020\216\001\001\000\002" +
    "\001\001\000\004\020\224\001\001\000\004\020\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\227\001" +
    "\001\000\002\001\001\000\004\020\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\041\007\246" +
    "\011\065\015\047\034\064\036\062\037\055\040\045\041" +
    "\057\046\050\001\001\000\024\005\137\011\151\015\141" +
    "\034\150\036\147\037\143\040\140\041\144\046\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\042\265\043" +
    "\256\044\274\045\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\042\354\043" +
    "\256\044\274\045\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u0108\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u011c\001\001\000\004" +
    "\026\u0117\001\001\000\004\012\u010e\001\001\000\004\031" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u0115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0143\001\001\000\004\012\u0131\001" +
    "\001\000\004\012\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\041\007\u0129\011\065\015\047\034" +
    "\064\036\062\037\055\040\045\041\057\046\050\001\001" +
    "\000\024\005\137\011\151\015\141\034\150\036\147\037" +
    "\143\040\140\041\144\046\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\041\007" +
    "\u012e\011\065\015\047\034\064\036\062\037\055\040\045" +
    "\041\057\046\050\001\001\000\024\005\137\011\151\015" +
    "\141\034\150\036\147\037\143\040\140\041\144\046\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\041\007\u0136\011\065\015\047\034" +
    "\064\036\062\037\055\040\045\041\057\046\050\001\001" +
    "\000\024\005\137\011\151\015\141\034\150\036\147\037" +
    "\143\040\140\041\144\046\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\041\007" +
    "\u013b\011\065\015\047\034\064\036\062\037\055\040\045" +
    "\041\057\046\050\001\001\000\024\005\137\011\151\015" +
    "\141\034\150\036\147\037\143\040\140\041\144\046\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\041\007\u0140\011\065\015\047\034\064" +
    "\036\062\037\055\040\045\041\057\046\050\001\001\000" +
    "\024\005\137\011\151\015\141\034\150\036\147\037\143" +
    "\040\140\041\144\046\142\001\001\000\002\001\001\000" +
    "\004\012\u0188\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\041\007\u0156\011\065\015\047\034\064" +
    "\036\062\037\055\040\045\041\057\046\050\001\001\000" +
    "\002\001\001\000\026\005\041\007\u014b\011\065\015\047" +
    "\034\064\036\062\037\055\040\045\041\057\046\050\001" +
    "\001\000\024\005\137\011\151\015\141\034\150\036\147" +
    "\037\143\040\140\041\144\046\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\041\007\u0153\011\065" +
    "\015\047\034\064\036\062\037\055\040\045\041\057\046" +
    "\050\001\001\000\026\005\041\007\u0150\011\065\015\047" +
    "\034\064\036\062\037\055\040\045\041\057\046\050\001" +
    "\001\000\024\005\137\011\151\015\141\034\150\036\147" +
    "\037\143\040\140\041\144\046\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\137\011\151\015\141" +
    "\034\150\036\147\037\143\040\140\041\144\046\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\137" +
    "\011\151\015\141\034\150\036\147\037\143\040\140\041" +
    "\144\046\142\001\001\000\002\001\001\000\026\005\041" +
    "\007\u0159\011\065\015\047\034\064\036\062\037\055\040" +
    "\045\041\057\046\050\001\001\000\024\005\137\011\151" +
    "\015\141\034\150\036\147\037\143\040\140\041\144\046" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\041\007\u0164\011\065\015\047\034\064\036" +
    "\062\037\055\040\045\041\057\046\050\001\001\000\024" +
    "\005\137\011\151\015\141\034\150\036\147\037\143\040" +
    "\140\041\144\046\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\041\007\u016c\011\065\015\047\034" +
    "\064\036\062\037\055\040\045\041\057\046\050\001\001" +
    "\000\026\005\041\007\u0169\011\065\015\047\034\064\036" +
    "\062\037\055\040\045\041\057\046\050\001\001\000\024" +
    "\005\137\011\151\015\141\034\150\036\147\037\143\040" +
    "\140\041\144\046\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\137\011\151\015\141\034\150\036" +
    "\147\037\143\040\140\041\144\046\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\041\007\u0177\011" +
    "\065\015\047\034\064\036\062\037\055\040\045\041\057" +
    "\046\050\001\001\000\002\001\001\000\026\005\041\007" +
    "\u0172\011\065\015\047\034\064\036\062\037\055\040\045" +
    "\041\057\046\050\001\001\000\024\005\137\011\151\015" +
    "\141\034\150\036\147\037\143\040\140\041\144\046\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\137\011\151\015\141" +
    "\034\150\036\147\037\143\040\140\041\144\046\142\001" +
    "\001\000\002\001\001\000\026\005\041\007\u017a\011\065" +
    "\015\047\034\064\036\062\037\055\040\045\041\057\046" +
    "\050\001\001\000\024\005\137\011\151\015\141\034\150" +
    "\036\147\037\143\040\140\041\144\046\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\041\007\u017e" +
    "\011\065\015\047\034\064\036\062\037\055\040\045\041" +
    "\057\046\050\001\001\000\024\005\137\011\151\015\141" +
    "\034\150\036\147\037\143\040\140\041\144\046\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\041" +
    "\007\u0182\011\065\015\047\034\064\036\062\037\055\040" +
    "\045\041\057\046\050\001\001\000\024\005\137\011\151" +
    "\015\141\034\150\036\147\037\143\040\140\041\144\046" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\041\007\u018b\011\065" +
    "\015\047\034\064\036\062\037\055\040\045\041\057\046" +
    "\050\001\001\000\024\005\137\011\151\015\141\034\150" +
    "\036\147\037\143\040\140\041\144\046\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\041\007\u0190\011\065\015\047\034\064\036\062\037" +
    "\055\040\045\041\057\046\050\001\001\000\024\005\137" +
    "\011\151\015\141\034\150\036\147\037\143\040\140\041" +
    "\144\046\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u0197\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\042\u019f\043\256" +
    "\044\274\045\273\001\001\000\002\001\001\000\004\026" +
    "\u01a1\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\137\011\151\015\141\034\150\036\147\037\143\040" +
    "\140\041\144\046\142\001\001\000\002\001\001\000\026" +
    "\005\041\007\u01a6\011\065\015\047\034\064\036\062\037" +
    "\055\040\045\041\057\046\050\001\001\000\024\005\137" +
    "\011\151\015\141\034\150\036\147\037\143\040\140\041" +
    "\144\046\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\u01ad\021\u01bc\023\u01ac\001\001\000\010\013\u01ad" +
    "\021\u01bb\023\u01ac\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\041\007\u01b2\011\065" +
    "\015\047\034\064\036\062\037\055\040\045\041\057\046" +
    "\050\001\001\000\024\005\137\011\151\015\141\034\150" +
    "\036\147\037\143\040\140\041\144\046\142\001\001\000" +
    "\002\001\001\000\026\005\041\007\u01b9\011\065\015\047" +
    "\034\064\036\062\037\055\040\045\041\057\046\050\001" +
    "\001\000\026\005\041\007\u01b6\011\065\015\047\034\064" +
    "\036\062\037\055\040\045\041\057\046\050\001\001\000" +
    "\024\005\137\011\151\015\141\034\150\036\147\037\143" +
    "\040\140\041\144\046\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\005\137\011\151\015\141\034\150" +
    "\036\147\037\143\040\140\041\144\046\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u01f3\001\001\000\004\033\u01c1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u01c7\001\001\000\004\027" +
    "\u01d2\001\001\000\004\027\u01cd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\u01d4\001\001\000\004" +
    "\030\u01d7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u01d9\001\001\000\002\001\001" +
    "\000\004\027\u01dd\001\001\000\004\027\u01dc\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u01df\001\001" +
    "\000\004\030\u01e0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u01e4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\u01f0\001\001\000\004\024\u01e9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u01f6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\041\007\044\011\065\015\047\022\034" +
    "\032\u01fb\034\064\036\062\037\055\040\045\041\057\046" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\034\032\u0200\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    boolean esDAssig=false;
    int fl;

    public Cup(java_cup.runtime.Scanner s,ArrayList<Error1> m,int tfl) {
        super(s);
        ManejadorDeErrores =m;
        fl = tfl;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }
    /*public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
            try{
                Object result = sintactico.parse().value;
            }catch(Exception ex){


            }
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // parametros2 ::= COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // parametros2 ::= ID parametros 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // parametros2 ::= COMA ID parametros 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // parametros2 ::= COMA ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // parametros ::= ID parametros2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // parametros ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // funcion ::= FUNCTION ID PARENTESIS_A LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // funcion ::= FUNCTION ID PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // funcion ::= FUNCTION PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // funcion ::= FUNCTION ID PARENTESIS_A error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // funcion ::= FUNCTION ID error PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // funcion ::= FUNCTION error PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // funcion ::= FUNCTION ID PARENTESIS_A parametros LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // funcion ::= FUNCTION ID parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // funcion ::= FUNCTION PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // funcion ::= FUNCTION ID PARENTESIS_A parametros error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // funcion ::= FUNCTION ID error parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // funcion ::= FUNCTION error PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // funcion ::= FUNCTION ID PARENTESIS_A LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // funcion ::= FUNCTION ID PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // funcion ::= FUNCTION PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // funcion ::= FUNCTION ID PARENTESIS_A error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // funcion ::= FUNCTION ID error PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // funcion ::= FUNCTION error PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // funcion ::= FUNCTION ID PARENTESIS_A parametros LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // funcion ::= FUNCTION error parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // funcion ::= FUNCTION PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // funcion ::= FUNCTION ID PARENTESIS_A parametros error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // funcion ::= FUNCTION ID error parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // funcion ::= FUNCTION error PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // comparador ::= IGUAL2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // comparador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // comparador ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // comparador ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // compuerta ::= XOR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // compuerta ::= ORSIMPLE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // compuerta ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // compuerta ::= ANDSIMPLE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // compuerta ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NUMIDSTR ::= INVNUMERO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NUMIDSTR ::= NUMERO INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NUMIDSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NUMIDSTR ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NUMIDSTR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // asignarVariable ::= ID error NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '=' ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // asignarVariable ::= ID ASIGNACION NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // asignarVariable ::= ID ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // asignarVariable ::= ID error ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un  '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // asignarVariable ::= VAR ID ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // asignarVariable ::= VAR ID error NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un  '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // asignarVariable ::= VAR error ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // asignarVariable ::= ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // asignarVariable ::= ID ASIGNACION PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" No se asigno un valor a la variable."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // asignarVariable ::= ID NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // asignarVariable ::= VAR ID PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '=."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // asignarVariable ::= VAR ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // asignarVariable ::= VAR ID ASIGNACION PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" No se asigno un valor a la variable."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // asignarVariable ::= VAR ID NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // asignarVariable ::= ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NUMID ::= INVNUMERO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NUMID ::= NUMERO INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NUMID ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NUMID ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expFor3 ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un un operador de decremento o cremento."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expFor3 ::= error OPERDECREMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expFor3 ::= ID OPERDECREMENTO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expFor3 ::= ID OPERCREMENTO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expFor2 ::= NUMID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un operador relacional ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor2",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expFor2 ::= NUMID comparador NUMID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor2",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expFor1 ::= VAR ID ASIGNACION INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expFor1 ::= VAR ID error NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expFor1 ::= VAR error ASIGNACION NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expFor1 ::= VAR ID ASIGNACION NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // condicionFor ::= expFor1 PUNTOCOMA expFor2 expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // condicionFor ::= expFor1 PUNTOCOMA PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el segundo parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condicionFor ::= expFor1 expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condicionFor ::= PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el primer parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el tercer parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condicionFor ::= expFor1 PUNTOCOMA expFor2 error expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condicionFor ::= expFor1 error expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentenciaFor ::= FOR PARENTESIS_A condicionFor error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentenciaFor ::= FOR error condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentenciaFor ::= FOR PARENTESIS_A condicionFor error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentenciaFor ::= FOR error condicionFor PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentenciaDeclare ::= DECLARE PAGE ID error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentenciaDeclare ::= DECLARE PAGE error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentenciaDeclare ::= DECLARE error ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'PAGE'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpoTabla ::= STRING COMA cuerpoTabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpoTabla ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tabla ::= TABLE PARENTESIS_A STRING COMA LLAVE_A TR LLAVE_A cuerpoTabla LLAVE_C LLAVE_C COMA LLAVE_A TR LLAVE_A cuerpoTabla LLAVE_C LLAVE_C COMA LLAVE_A TR LLAVE_A cuerpoTabla LLAVE_C LLAVE_C PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-24)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tabla ::= TABLE PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista ::= LIST PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // llamarFuncion ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // llamarFuncion ::= ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // funciones4 ::= inHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones4",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // funciones3 ::= Remove 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // funciones3 ::= RClass 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funciones3 ::= AClass 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // funciones3 ::= RChild 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // funciones3 ::= getAtt 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funciones3 ::= beforeChild 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funciones3 ::= Child 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funciones3 ::= ChildText 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // funciones2 ::= optSelect 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones2",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // funciones2 ::= setHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones2",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // funciones ::= funciones4 PARENTESIS_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // funciones ::= funciones4 error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // funciones ::= error PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Funcion invalida."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // funciones ::= funciones2 PARENTESIS_A STRING COMA STRING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // funciones ::= funciones2 PARENTESIS_A STRING COMA error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // funciones ::= funciones2 PARENTESIS_A STRING error STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // funciones ::= funciones2 PARENTESIS_A error COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // funciones ::= funciones2 error STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // funciones ::= error PARENTESIS_A STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Funcion invalida."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funciones ::= funciones3 PARENTESIS_A STRING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funciones ::= funciones3 PARENTESIS_A error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING"));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // funciones ::= funciones3 error STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('"));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // funciones ::= error PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Funcion invalida."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // funciones ::= funciones4 PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funciones ::= funciones2 PARENTESIS_A STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funciones ::= funciones3 PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // crearElemento ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("crearElemento",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // obtenerElemento ::= docGetElemClass PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // obtenerElemento ::= docGetElemID PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // consola ::= CONSOL PARENTESIS_A NUMIDSTR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("consola",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpo ::= cuerpo lista 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpo ::= lista 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cuerpo ::= cuerpo llamarFuncion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpo ::= llamarFuncion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cuerpo ::= cuerpo crearElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpo ::= crearElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpo ::= cuerpo obtenerElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpo ::= obtenerElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpo ::= cuerpo consola 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo ::= consola 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpo ::= cuerpo tabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpo ::= tabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpo ::= cuerpo funcion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpo ::= funcion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo ::= cuerpo asignarVariable 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo ::= asignarVariable 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo ::= cuerpo sentenciaFor 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NI ::= STRING SUMA NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NI ::= NUMERO SUMA STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NI ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NI ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NI ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicionCSS2 ::= COMA STRING DOSPUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING', 'NUMERO' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicionCSS2 ::= COMA STRING NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicionCSS2 ::= COMA DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicionCSS2 ::= STRING DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ',''."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicionCSS ::= 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicionCSS ::= STRING DOSPUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING', 'NUMERO' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicionCSS ::= STRING NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicionCSS ::= DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicionCSS ::= STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicionCSS ::= STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cadena ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA error condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaCSS ::= CSS PARENTESIS_A cadena error CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba una ',' despues del primero parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaCSS ::= CSS PARENTESIS_A error COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaCSS ::= CSS error cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaJS ::= JS ID error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaJS ::= JS ID LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaJS ::= JS error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaJS ::= JS ID LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaHTML ::= HTML cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaHTML ::= HTML LLAVE_A cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaHTML ::= LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaHTML ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentenciaHTML ::= HTML LLAVE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentenciaHTML ::= HTML LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentenciaHTML ::= HTML LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentenciaHTML ::= HTML LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentenciasInterior ::= sentenciaCSS sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentenciasInterior ::= sentenciaCSS 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentenciasInterior ::= sentenciaJS sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentenciasInterior ::= sentenciaJS 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // primeraSentencia ::= sentenciaHTML sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primeraSentencia",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primeraSentencia ::= sentenciaHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primeraSentencia",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciaMain ::= MAIN ID primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentenciaMain ::= MAIN LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentenciaMain ::= ID LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'MAIN'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciaMain ::= MAIN ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba funcion 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciaMain ::= MAIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{};'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error en la estructura del programa."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sentenciaMain sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentenciaMain 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

