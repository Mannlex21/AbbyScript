
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 27 11:11:06 MST 2017
//----------------------------------------------------

package mx.edu.ittepic.automatas;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 27 11:11:06 MST 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\007\000\002\003\003" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\065\003\000\002" +
    "\065\004\000\002\043\003\000\002\043\004\000\002\043" +
    "\003\000\002\043\004\000\002\044\006\000\002\044\005" +
    "\000\002\044\004\000\002\044\004\000\002\044\004\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\045\012\000\002\045\012\000\002\045\012" +
    "\000\002\045\012\000\002\045\012\000\002\045\012\000" +
    "\002\045\013\000\002\066\003\000\002\066\003\000\002" +
    "\046\005\000\002\046\006\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\002\000\002\054\006" +
    "\000\002\054\007\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\005\000\002\053" +
    "\005\000\002\012\003\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\003\000\002\012\004\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\004\000\002\012\003\000\002\012\004\000\002\012" +
    "\003\000\002\012\004\000\002\012\003\000\002\012\004" +
    "\000\002\012\003\000\002\012\004\000\002\073\006\000" +
    "\002\074\010\000\002\074\010\000\002\075\010\000\002" +
    "\077\006\000\002\077\010\000\002\077\005\000\002\100" +
    "\003\000\002\100\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\102\003\000\002\076\006\000\002\076\005\000\002\103" +
    "\011\000\002\067\005\000\002\067\033\000\002\070\003" +
    "\000\002\070\005\000\002\004\007\000\002\004\010\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\020\011\000\002\020\010\000\002\020" +
    "\010\000\002\020\010\000\002\020\010\000\002\020\010" +
    "\000\002\020\011\000\002\020\011\000\002\020\011\000" +
    "\002\020\011\000\002\017\007\000\002\017\007\000\002" +
    "\017\007\000\002\017\007\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\022\005\000\002\022\003\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\050" +
    "\003\000\002\050\003\000\002\050\004\000\002\050\004" +
    "\000\002\005\007\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\007\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\004\000\002\051\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\014\012\000\002\014" +
    "\010\000\002\014\011\000\002\014\011\000\002\014\012" +
    "\000\002\014\012\000\002\014\012\000\002\014\012\000" +
    "\002\014\012\000\002\014\011\000\002\014\011\000\002" +
    "\014\011\000\002\014\012\000\002\014\012\000\002\014" +
    "\011\000\002\014\011\000\002\014\011\000\002\014\011" +
    "\000\002\014\011\000\002\014\010\000\002\014\010\000" +
    "\002\014\010\000\002\014\010\000\002\014\011\000\002" +
    "\014\011\000\002\014\011\000\002\014\011\000\002\014" +
    "\011\000\002\014\011\000\002\014\010\000\002\014\010" +
    "\000\002\014\010\000\002\014\010\000\002\014\011\000" +
    "\002\014\010\000\002\014\010\000\002\014\010\000\002" +
    "\014\010\000\002\014\010\000\002\014\007\000\002\014" +
    "\007\000\002\014\007\000\002\014\010\000\002\014\010" +
    "\000\002\015\003\000\002\015\004\000\002\055\004\000" +
    "\002\055\005\000\002\055\004\000\002\055\003\000\002" +
    "\037\003\000\002\037\003\000\002\026\007\000\002\026" +
    "\014\000\002\026\016\000\002\026\007\000\002\026\006" +
    "\000\002\026\014\000\002\026\014\000\002\026\014\000" +
    "\002\026\014\000\002\026\014\000\002\026\014\000\002" +
    "\026\014\000\002\026\014\000\002\026\014\000\002\026" +
    "\016\000\002\026\016\000\002\026\016\000\002\026\016" +
    "\000\002\026\016\000\002\026\016\000\002\026\016\000" +
    "\002\026\016\000\002\026\016\000\002\026\016\000\002" +
    "\026\016\000\002\026\007\000\002\026\007\000\002\026" +
    "\007\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\004\000\002" +
    "\034\003\000\002\040\004\000\002\040\004\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\042\007" +
    "\000\002\042\007\000\002\042\007\000\002\042\007\000" +
    "\002\042\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01df\000\010\003\005\013\006\104\004\001\002\000" +
    "\004\044\u01df\001\002\000\004\002\ufffe\001\002\000\012" +
    "\002\ufffc\021\ufffc\044\034\104\033\001\002\000\006\002" +
    "\000\021\012\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\006\003\015\024\014\001\002\000" +
    "\004\002\uffff\001\002\000\006\003\022\104\021\001\002" +
    "\000\004\104\016\001\002\000\004\044\017\001\002\000" +
    "\004\045\020\001\002\000\004\002\uff9d\001\002\000\006" +
    "\003\025\044\026\001\002\000\004\044\023\001\002\000" +
    "\004\045\024\001\002\000\004\002\uff9c\001\002\000\004" +
    "\045\032\001\002\000\006\003\027\045\030\001\002\000" +
    "\004\002\uff9a\001\002\000\006\002\uff9f\021\012\001\002" +
    "\000\004\002\uff9e\001\002\000\004\002\uff9b\001\002\000" +
    "\006\011\036\044\u01da\001\002\000\006\011\036\044\037" +
    "\001\002\000\014\002\ufff6\010\u018a\021\ufff6\022\u018e\045" +
    "\ufff6\001\002\000\034\012\067\014\052\016\064\044\u0185" +
    "\045\u0184\075\057\104\053\117\061\120\045\123\055\127" +
    "\043\164\054\167\047\001\002\000\032\012\067\014\052" +
    "\016\064\045\062\075\057\104\053\117\061\120\045\123" +
    "\055\127\043\164\054\167\047\001\002\000\004\045\041" +
    "\001\002\000\006\002\ufff9\021\ufff9\001\002\000\044\002" +
    "\uffc8\003\uffc8\010\uffc8\012\uffc8\014\uffc8\016\uffc8\021\uffc8" +
    "\022\uffc8\045\uffc8\075\uffc8\104\uffc8\117\uffc8\120\uffc8\123" +
    "\uffc8\127\uffc8\164\uffc8\167\uffc8\001\002\000\004\042\u0180" +
    "\001\002\000\032\012\067\014\052\016\064\045\u017f\075" +
    "\057\104\053\117\061\120\045\123\055\127\043\164\054" +
    "\167\047\001\002\000\004\042\u017a\001\002\000\044\002" +
    "\uffbe\003\uffbe\010\uffbe\012\uffbe\014\uffbe\016\uffbe\021\uffbe" +
    "\022\uffbe\045\uffbe\075\uffbe\104\uffbe\117\uffbe\120\uffbe\123" +
    "\uffbe\127\uffbe\164\uffbe\167\uffbe\001\002\000\004\042\u0174" +
    "\001\002\000\044\002\uffca\003\uffca\010\uffca\012\uffca\014" +
    "\uffca\016\uffca\021\uffca\022\uffca\045\uffca\075\uffca\104\uffca" +
    "\117\uffca\120\uffca\123\uffca\127\uffca\164\uffca\167\uffca\001" +
    "\002\000\044\002\uffba\003\uffba\010\uffba\012\uffba\014\uffba" +
    "\016\uffba\021\uffba\022\uffba\045\uffba\075\uffba\104\uffba\117" +
    "\uffba\120\uffba\123\uffba\127\uffba\164\uffba\167\uffba\001\002" +
    "\000\010\003\u0105\042\u0106\104\u0104\001\002\000\020\003" +
    "\354\042\355\075\353\104\074\106\077\107\075\163\100" +
    "\001\002\000\004\042\316\001\002\000\004\042\311\001" +
    "\002\000\044\002\uffc0\003\uffc0\010\uffc0\012\uffc0\014\uffc0" +
    "\016\uffc0\021\uffc0\022\uffc0\045\uffc0\075\uffc0\104\uffc0\117" +
    "\uffc0\120\uffc0\123\uffc0\127\uffc0\164\uffc0\167\uffc0\001\002" +
    "\000\012\104\074\106\077\107\075\163\100\001\002\000" +
    "\044\002\uffbc\003\uffbc\010\uffbc\012\uffbc\014\uffbc\016\uffbc" +
    "\021\uffbc\022\uffbc\045\uffbc\075\uffbc\104\uffbc\117\uffbc\120" +
    "\uffbc\123\uffbc\127\uffbc\164\uffbc\167\uffbc\001\002\000\004" +
    "\042\252\001\002\000\014\002\uffec\010\uffec\021\uffec\022" +
    "\uffec\045\uffec\001\002\000\044\002\uffc2\003\uffc2\010\uffc2" +
    "\012\uffc2\014\uffc2\016\uffc2\021\uffc2\022\uffc2\045\uffc2\075" +
    "\uffc2\104\uffc2\117\uffc2\120\uffc2\123\uffc2\127\uffc2\164\uffc2" +
    "\167\uffc2\001\002\000\006\003\123\042\124\001\002\000" +
    "\044\002\uffc4\003\uffc4\010\uffc4\012\uffc4\014\uffc4\016\uffc4" +
    "\021\uffc4\022\uffc4\045\uffc4\075\uffc4\104\uffc4\117\uffc4\120" +
    "\uffc4\123\uffc4\127\uffc4\164\uffc4\167\uffc4\001\002\000\044" +
    "\002\uffc6\003\uffc6\010\uffc6\012\uffc6\014\uffc6\016\uffc6\021" +
    "\uffc6\022\uffc6\045\uffc6\075\uffc6\104\uffc6\117\uffc6\120\uffc6" +
    "\123\uffc6\127\uffc6\164\uffc6\167\uffc6\001\002\000\010\003" +
    "\072\075\071\104\070\001\002\000\020\003\110\051\111" +
    "\075\107\104\074\106\077\107\075\163\100\001\002\000" +
    "\012\104\074\106\077\107\075\163\100\001\002\000\004" +
    "\075\073\001\002\000\012\104\074\106\077\107\075\163" +
    "\100\001\002\000\010\003\uff67\043\uff67\051\uff67\001\002" +
    "\000\012\003\uff68\043\uff68\051\uff68\163\103\001\002\000" +
    "\004\051\102\001\002\000\010\003\uff66\043\uff66\051\uff66" +
    "\001\002\000\004\107\101\001\002\000\010\003\uff64\043" +
    "\uff64\051\uff64\001\002\000\044\002\uff70\003\uff70\010\uff70" +
    "\012\uff70\014\uff70\016\uff70\021\uff70\022\uff70\045\uff70\075" +
    "\uff70\104\uff70\117\uff70\120\uff70\123\uff70\127\uff70\164\uff70" +
    "\167\uff70\001\002\000\010\003\uff65\043\uff65\051\uff65\001" +
    "\002\000\004\051\105\001\002\000\044\002\uff75\003\uff75" +
    "\010\uff75\012\uff75\014\uff75\016\uff75\021\uff75\022\uff75\045" +
    "\uff75\075\uff75\104\uff75\117\uff75\120\uff75\123\uff75\127\uff75" +
    "\164\uff75\167\uff75\001\002\000\004\051\122\001\002\000" +
    "\016\003\115\051\116\104\074\106\077\107\075\163\100" +
    "\001\002\000\012\104\074\106\077\107\075\163\100\001" +
    "\002\000\044\002\uff74\003\uff74\010\uff74\012\uff74\014\uff74" +
    "\016\uff74\021\uff74\022\uff74\045\uff74\075\uff74\104\uff74\117" +
    "\uff74\120\uff74\123\uff74\127\uff74\164\uff74\167\uff74\001\002" +
    "\000\004\051\113\001\002\000\044\002\uff6f\003\uff6f\010" +
    "\uff6f\012\uff6f\014\uff6f\016\uff6f\021\uff6f\022\uff6f\045\uff6f" +
    "\075\uff6f\104\uff6f\117\uff6f\120\uff6f\123\uff6f\127\uff6f\164" +
    "\uff6f\167\uff6f\001\002\000\006\003\120\051\121\001\002" +
    "\000\004\051\117\001\002\000\044\002\uff76\003\uff76\010" +
    "\uff76\012\uff76\014\uff76\016\uff76\021\uff76\022\uff76\045\uff76" +
    "\075\uff76\104\uff76\117\uff76\120\uff76\123\uff76\127\uff76\164" +
    "\uff76\167\uff76\001\002\000\044\002\uff6e\003\uff6e\010\uff6e" +
    "\012\uff6e\014\uff6e\016\uff6e\021\uff6e\022\uff6e\045\uff6e\075" +
    "\uff6e\104\uff6e\117\uff6e\120\uff6e\123\uff6e\127\uff6e\164\uff6e" +
    "\167\uff6e\001\002\000\044\002\uff6d\003\uff6d\010\uff6d\012" +
    "\uff6d\014\uff6d\016\uff6d\021\uff6d\022\uff6d\045\uff6d\075\uff6d" +
    "\104\uff6d\117\uff6d\120\uff6d\123\uff6d\127\uff6d\164\uff6d\167" +
    "\uff6d\001\002\000\044\002\uff79\003\uff79\010\uff79\012\uff79" +
    "\014\uff79\016\uff79\021\uff79\022\uff79\045\uff79\075\uff79\104" +
    "\uff79\117\uff79\120\uff79\123\uff79\127\uff79\164\uff79\167\uff79" +
    "\001\002\000\044\002\uff77\003\uff77\010\uff77\012\uff77\014" +
    "\uff77\016\uff77\021\uff77\022\uff77\045\uff77\075\uff77\104\uff77" +
    "\117\uff77\120\uff77\123\uff77\127\uff77\164\uff77\167\uff77\001" +
    "\002\000\006\012\125\051\127\001\002\000\006\012\125" +
    "\051\127\001\002\000\006\003\234\104\233\001\002\000" +
    "\014\003\213\051\214\104\163\107\164\163\166\001\002" +
    "\000\010\104\163\107\164\163\166\001\002\000\006\003" +
    "\131\043\132\001\002\000\004\044\156\001\002\000\006" +
    "\003\133\044\134\001\002\000\032\012\067\014\052\016" +
    "\064\045\154\075\057\104\053\117\061\120\045\123\055" +
    "\127\043\164\054\167\047\001\002\000\034\003\136\012" +
    "\067\014\052\016\064\045\137\075\057\104\053\117\061" +
    "\120\045\123\055\127\043\164\054\167\047\001\002\000" +
    "\034\003\146\012\067\014\052\016\064\045\147\075\057" +
    "\104\053\117\061\120\045\123\055\127\043\164\054\167" +
    "\047\001\002\000\044\002\uff94\003\uff94\010\uff94\012\uff94" +
    "\014\uff94\016\uff94\021\uff94\022\uff94\045\uff94\075\uff94\104" +
    "\uff94\117\uff94\120\uff94\123\uff94\127\uff94\164\uff94\167\uff94" +
    "\001\002\000\044\002\uff98\003\uff98\010\uff98\012\uff98\014" +
    "\uff98\016\uff98\021\uff98\022\uff98\045\uff98\075\uff98\104\uff98" +
    "\117\uff98\120\uff98\123\uff98\127\uff98\164\uff98\167\uff98\001" +
    "\002\000\044\002\uffc7\003\uffc7\010\uffc7\012\uffc7\014\uffc7" +
    "\016\uffc7\021\uffc7\022\uffc7\045\uffc7\075\uffc7\104\uffc7\117" +
    "\uffc7\120\uffc7\123\uffc7\127\uffc7\164\uffc7\167\uffc7\001\002" +
    "\000\044\002\uffbd\003\uffbd\010\uffbd\012\uffbd\014\uffbd\016" +
    "\uffbd\021\uffbd\022\uffbd\045\uffbd\075\uffbd\104\uffbd\117\uffbd" +
    "\120\uffbd\123\uffbd\127\uffbd\164\uffbd\167\uffbd\001\002\000" +
    "\044\002\uffc9\003\uffc9\010\uffc9\012\uffc9\014\uffc9\016\uffc9" +
    "\021\uffc9\022\uffc9\045\uffc9\075\uffc9\104\uffc9\117\uffc9\120" +
    "\uffc9\123\uffc9\127\uffc9\164\uffc9\167\uffc9\001\002\000\044" +
    "\002\uffb9\003\uffb9\010\uffb9\012\uffb9\014\uffb9\016\uffb9\021" +
    "\uffb9\022\uffb9\045\uffb9\075\uffb9\104\uffb9\117\uffb9\120\uffb9" +
    "\123\uffb9\127\uffb9\164\uffb9\167\uffb9\001\002\000\044\002" +
    "\uffbf\003\uffbf\010\uffbf\012\uffbf\014\uffbf\016\uffbf\021\uffbf" +
    "\022\uffbf\045\uffbf\075\uffbf\104\uffbf\117\uffbf\120\uffbf\123" +
    "\uffbf\127\uffbf\164\uffbf\167\uffbf\001\002\000\044\002\uffbb" +
    "\003\uffbb\010\uffbb\012\uffbb\014\uffbb\016\uffbb\021\uffbb\022" +
    "\uffbb\045\uffbb\075\uffbb\104\uffbb\117\uffbb\120\uffbb\123\uffbb" +
    "\127\uffbb\164\uffbb\167\uffbb\001\002\000\044\002\uff90\003" +
    "\uff90\010\uff90\012\uff90\014\uff90\016\uff90\021\uff90\022\uff90" +
    "\045\uff90\075\uff90\104\uff90\117\uff90\120\uff90\123\uff90\127" +
    "\uff90\164\uff90\167\uff90\001\002\000\044\002\uff99\003\uff99" +
    "\010\uff99\012\uff99\014\uff99\016\uff99\021\uff99\022\uff99\045" +
    "\uff99\075\uff99\104\uff99\117\uff99\120\uff99\123\uff99\127\uff99" +
    "\164\uff99\167\uff99\001\002\000\044\002\uffc1\003\uffc1\010" +
    "\uffc1\012\uffc1\014\uffc1\016\uffc1\021\uffc1\022\uffc1\045\uffc1" +
    "\075\uffc1\104\uffc1\117\uffc1\120\uffc1\123\uffc1\127\uffc1\164" +
    "\uffc1\167\uffc1\001\002\000\044\002\uffc3\003\uffc3\010\uffc3" +
    "\012\uffc3\014\uffc3\016\uffc3\021\uffc3\022\uffc3\045\uffc3\075" +
    "\uffc3\104\uffc3\117\uffc3\120\uffc3\123\uffc3\127\uffc3\164\uffc3" +
    "\167\uffc3\001\002\000\044\002\uffc5\003\uffc5\010\uffc5\012" +
    "\uffc5\014\uffc5\016\uffc5\021\uffc5\022\uffc5\045\uffc5\075\uffc5" +
    "\104\uffc5\117\uffc5\120\uffc5\123\uffc5\127\uffc5\164\uffc5\167" +
    "\uffc5\001\002\000\032\012\067\014\052\016\064\045\155" +
    "\075\057\104\053\117\061\120\045\123\055\127\043\164" +
    "\054\167\047\001\002\000\044\002\uff95\003\uff95\010\uff95" +
    "\012\uff95\014\uff95\016\uff95\021\uff95\022\uff95\045\uff95\075" +
    "\uff95\104\uff95\117\uff95\120\uff95\123\uff95\127\uff95\164\uff95" +
    "\167\uff95\001\002\000\044\002\uff91\003\uff91\010\uff91\012" +
    "\uff91\014\uff91\016\uff91\021\uff91\022\uff91\045\uff91\075\uff91" +
    "\104\uff91\117\uff91\120\uff91\123\uff91\127\uff91\164\uff91\167" +
    "\uff91\001\002\000\032\012\067\014\052\016\064\045\160" +
    "\075\057\104\053\117\061\120\045\123\055\127\043\164" +
    "\054\167\047\001\002\000\032\012\067\014\052\016\064" +
    "\045\161\075\057\104\053\117\061\120\045\123\055\127" +
    "\043\164\054\167\047\001\002\000\044\002\uff96\003\uff96" +
    "\010\uff96\012\uff96\014\uff96\016\uff96\021\uff96\022\uff96\045" +
    "\uff96\075\uff96\104\uff96\117\uff96\120\uff96\123\uff96\127\uff96" +
    "\164\uff96\167\uff96\001\002\000\044\002\uff92\003\uff92\010" +
    "\uff92\012\uff92\014\uff92\016\uff92\021\uff92\022\uff92\045\uff92" +
    "\075\uff92\104\uff92\117\uff92\120\uff92\123\uff92\127\uff92\164" +
    "\uff92\167\uff92\001\002\000\004\051\202\001\002\000\026" +
    "\003\uff7d\051\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066" +
    "\uff7d\067\uff7d\070\uff7d\104\uff7d\001\002\000\030\003\uff7c" +
    "\051\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067" +
    "\uff7c\070\uff7c\104\uff7c\163\201\001\002\000\026\003\uff82" +
    "\051\uff82\062\173\063\170\064\175\065\171\066\172\067" +
    "\176\070\174\104\uff82\001\002\000\004\107\167\001\002" +
    "\000\026\003\uff7a\051\uff7a\062\uff7a\063\uff7a\064\uff7a\065" +
    "\uff7a\066\uff7a\067\uff7a\070\uff7a\104\uff7a\001\002\000\010" +
    "\104\uff5d\107\uff5d\163\uff5d\001\002\000\010\104\uff5b\107" +
    "\uff5b\163\uff5b\001\002\000\010\104\uff5a\107\uff5a\163\uff5a" +
    "\001\002\000\010\104\uff5e\107\uff5e\163\uff5e\001\002\000" +
    "\010\104\uff58\107\uff58\163\uff58\001\002\000\010\104\uff5c" +
    "\107\uff5c\163\uff5c\001\002\000\010\104\uff59\107\uff59\163" +
    "\uff59\001\002\000\010\104\163\107\164\163\166\001\002" +
    "\000\010\003\uff83\051\uff83\104\uff83\001\002\000\026\003" +
    "\uff7b\051\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b" +
    "\067\uff7b\070\uff7b\104\uff7b\001\002\000\006\003\204\104" +
    "\203\001\002\000\010\003\211\102\210\103\207\001\002" +
    "\000\004\102\206\001\002\000\006\003\uff8b\043\uff8b\001" +
    "\002\000\006\003\uff7f\043\uff7f\001\002\000\006\003\uff81" +
    "\043\uff81\001\002\000\006\003\uff80\043\uff80\001\002\000" +
    "\006\003\uff7e\043\uff7e\001\002\000\004\051\231\001\002" +
    "\000\010\104\163\107\164\163\166\001\002\000\012\051" +
    "\216\104\163\107\164\163\166\001\002\000\010\003\220" +
    "\051\221\104\203\001\002\000\006\003\204\104\203\001" +
    "\002\000\006\003\uff89\043\uff89\001\002\000\010\003\204" +
    "\102\206\104\203\001\002\000\006\003\223\104\203\001" +
    "\002\000\006\003\uff88\043\uff88\001\002\000\010\003\uff8c" +
    "\043\uff8c\102\206\001\002\000\006\003\uff8f\043\uff8f\001" +
    "\002\000\006\003\uff8d\043\uff8d\001\002\000\004\051\227" +
    "\001\002\000\006\003\204\104\203\001\002\000\006\003" +
    "\uff8e\043\uff8e\001\002\000\006\003\204\104\203\001\002" +
    "\000\006\003\uff8a\043\uff8a\001\002\000\006\003\240\075" +
    "\237\001\002\000\004\075\235\001\002\000\004\107\236" +
    "\001\002\000\014\003\uff86\051\uff86\104\uff86\107\uff86\163" +
    "\uff86\001\002\000\006\107\242\163\243\001\002\000\004" +
    "\107\241\001\002\000\014\003\uff85\051\uff85\104\uff85\107" +
    "\uff85\163\uff85\001\002\000\014\003\uff87\051\uff87\104\uff87" +
    "\107\uff87\163\uff87\001\002\000\014\003\uff84\051\uff84\104" +
    "\uff84\107\uff84\163\uff84\001\002\000\004\043\245\001\002" +
    "\000\004\044\246\001\002\000\032\012\067\014\052\016" +
    "\064\045\250\075\057\104\053\117\061\120\045\123\055" +
    "\127\043\164\054\167\047\001\002\000\032\012\067\014" +
    "\052\016\064\045\251\075\057\104\053\117\061\120\045" +
    "\123\055\127\043\164\054\167\047\001\002\000\044\002" +
    "\uff97\003\uff97\010\uff97\012\uff97\014\uff97\016\uff97\021\uff97" +
    "\022\uff97\045\uff97\075\uff97\104\uff97\117\uff97\120\uff97\123" +
    "\uff97\127\uff97\164\uff97\167\uff97\001\002\000\044\002\uff93" +
    "\003\uff93\010\uff93\012\uff93\014\uff93\016\uff93\021\uff93\022" +
    "\uff93\045\uff93\075\uff93\104\uff93\117\uff93\120\uff93\123\uff93" +
    "\127\uff93\164\uff93\167\uff93\001\002\000\004\106\253\001" +
    "\002\000\004\043\254\001\002\000\004\053\255\001\002" +
    "\000\030\115\262\125\264\130\273\131\271\132\260\133" +
    "\267\137\263\142\257\160\270\161\261\166\266\001\002" +
    "\000\004\042\302\001\002\000\004\042\uffa7\001\002\000" +
    "\004\042\uffab\001\002\000\004\042\uffa9\001\002\000\004" +
    "\042\uffac\001\002\000\004\042\uffb1\001\002\000\004\042" +
    "\uffa8\001\002\000\044\002\uffb7\003\uffb7\010\uffb7\012\uffb7" +
    "\014\uffb7\016\uffb7\021\uffb7\022\uffb7\045\uffb7\075\uffb7\104" +
    "\uffb7\117\uffb7\120\uffb7\123\uffb7\127\uffb7\164\uffb7\167\uffb7" +
    "\001\002\000\004\042\uffb0\001\002\000\004\042\uffad\001" +
    "\002\000\004\042\uffaa\001\002\000\004\042\uffaf\001\002" +
    "\000\004\042\300\001\002\000\004\042\uffae\001\002\000" +
    "\004\042\275\001\002\000\004\106\276\001\002\000\004" +
    "\043\277\001\002\000\044\002\uffb4\003\uffb4\010\uffb4\012" +
    "\uffb4\014\uffb4\016\uffb4\021\uffb4\022\uffb4\045\uffb4\075\uffb4" +
    "\104\uffb4\117\uffb4\120\uffb4\123\uffb4\127\uffb4\164\uffb4\167" +
    "\uffb4\001\002\000\004\043\301\001\002\000\044\002\uffb2" +
    "\003\uffb2\010\uffb2\012\uffb2\014\uffb2\016\uffb2\021\uffb2\022" +
    "\uffb2\045\uffb2\075\uffb2\104\uffb2\117\uffb2\120\uffb2\123\uffb2" +
    "\127\uffb2\164\uffb2\167\uffb2\001\002\000\004\106\303\001" +
    "\002\000\004\110\304\001\002\000\004\106\305\001\002" +
    "\000\004\043\306\001\002\000\044\002\uffb3\003\uffb3\010" +
    "\uffb3\012\uffb3\014\uffb3\016\uffb3\021\uffb3\022\uffb3\045\uffb3" +
    "\075\uffb3\104\uffb3\117\uffb3\120\uffb3\123\uffb3\127\uffb3\164" +
    "\uffb3\167\uffb3\001\002\000\004\051\310\001\002\000\044" +
    "\002\uff71\003\uff71\010\uff71\012\uff71\014\uff71\016\uff71\021" +
    "\uff71\022\uff71\045\uff71\075\uff71\104\uff71\117\uff71\120\uff71" +
    "\123\uff71\127\uff71\164\uff71\167\uff71\001\002\000\004\106" +
    "\312\001\002\000\004\043\313\001\002\000\004\053\314" +
    "\001\002\000\030\115\262\125\264\130\273\131\271\132" +
    "\260\133\267\137\263\142\257\160\270\161\261\166\266" +
    "\001\002\000\044\002\uffb5\003\uffb5\010\uffb5\012\uffb5\014" +
    "\uffb5\016\uffb5\021\uffb5\022\uffb5\045\uffb5\075\uffb5\104\uffb5" +
    "\117\uffb5\120\uffb5\123\uffb5\127\uffb5\164\uffb5\167\uffb5\001" +
    "\002\000\006\043\320\106\317\001\002\000\004\110\321" +
    "\001\002\000\044\002\uffa3\003\uffa3\010\uffa3\012\uffa3\014" +
    "\uffa3\016\uffa3\021\uffa3\022\uffa3\045\uffa3\075\uffa3\104\uffa3" +
    "\117\uffa3\120\uffa3\123\uffa3\127\uffa3\164\uffa3\167\uffa3\001" +
    "\002\000\004\044\322\001\002\000\004\165\323\001\002" +
    "\000\004\044\324\001\002\000\004\106\325\001\002\000" +
    "\010\045\uffa1\047\uffa1\110\350\001\002\000\004\045\327" +
    "\001\002\000\004\045\330\001\002\000\004\110\331\001" +
    "\002\000\004\044\332\001\002\000\004\165\333\001\002" +
    "\000\004\044\334\001\002\000\004\106\325\001\002\000" +
    "\004\045\336\001\002\000\004\045\337\001\002\000\004" +
    "\110\340\001\002\000\004\044\341\001\002\000\004\165" +
    "\342\001\002\000\004\044\343\001\002\000\004\106\325" +
    "\001\002\000\004\045\345\001\002\000\004\045\346\001" +
    "\002\000\004\043\347\001\002\000\044\002\uffa2\003\uffa2" +
    "\010\uffa2\012\uffa2\014\uffa2\016\uffa2\021\uffa2\022\uffa2\045" +
    "\uffa2\075\uffa2\104\uffa2\117\uffa2\120\uffa2\123\uffa2\127\uffa2" +
    "\164\uffa2\167\uffa2\001\002\000\004\106\325\001\002\000" +
    "\006\045\uffa0\047\uffa0\001\002\000\004\051\u0103\001\002" +
    "\000\016\003\376\051\377\104\074\106\077\107\075\163" +
    "\100\001\002\000\014\075\371\104\074\106\077\107\075" +
    "\163\100\001\002\000\006\043\360\104\356\001\002\000" +
    "\016\003\uff2b\042\uff2b\043\uff2b\044\uff2b\104\362\110\363" +
    "\001\002\000\004\043\361\001\002\000\044\002\uffa5\003" +
    "\uffa5\010\uffa5\012\uffa5\014\uffa5\016\uffa5\021\uffa5\022\uffa5" +
    "\045\uffa5\075\uffa5\104\uffa5\117\uffa5\120\uffa5\123\uffa5\127" +
    "\uffa5\164\uffa5\167\uffa5\001\002\000\044\002\uffa6\003\uffa6" +
    "\010\uffa6\012\uffa6\014\uffa6\016\uffa6\021\uffa6\022\uffa6\045" +
    "\uffa6\075\uffa6\104\uffa6\117\uffa6\120\uffa6\123\uffa6\127\uffa6" +
    "\164\uffa6\167\uffa6\001\002\000\004\104\356\001\002\000" +
    "\014\003\uff26\042\uff26\043\uff26\044\uff26\104\365\001\002" +
    "\000\012\003\uff2a\042\uff2a\043\uff2a\044\uff2a\001\002\000" +
    "\014\003\uff29\042\uff29\043\uff29\044\uff29\104\356\001\002" +
    "\000\012\003\uff28\042\uff28\043\uff28\044\uff28\001\002\000" +
    "\012\003\uff27\042\uff27\043\uff27\044\uff27\001\002\000\004" +
    "\051\374\001\002\000\012\104\074\106\077\107\075\163" +
    "\100\001\002\000\004\051\373\001\002\000\044\002\uff6c" +
    "\003\uff6c\010\uff6c\012\uff6c\014\uff6c\016\uff6c\021\uff6c\022" +
    "\uff6c\045\uff6c\075\uff6c\104\uff6c\117\uff6c\120\uff6c\123\uff6c" +
    "\127\uff6c\164\uff6c\167\uff6c\001\002\000\044\002\uff69\003" +
    "\uff69\010\uff69\012\uff69\014\uff69\016\uff69\021\uff69\022\uff69" +
    "\045\uff69\075\uff69\104\uff69\117\uff69\120\uff69\123\uff69\127" +
    "\uff69\164\uff69\167\uff69\001\002\000\006\003\u0101\051\u0102" +
    "\001\002\000\004\051\u0100\001\002\000\044\002\uff72\003" +
    "\uff72\010\uff72\012\uff72\014\uff72\016\uff72\021\uff72\022\uff72" +
    "\045\uff72\075\uff72\104\uff72\117\uff72\120\uff72\123\uff72\127" +
    "\uff72\164\uff72\167\uff72\001\002\000\044\002\uff6b\003\uff6b" +
    "\010\uff6b\012\uff6b\014\uff6b\016\uff6b\021\uff6b\022\uff6b\045" +
    "\uff6b\075\uff6b\104\uff6b\117\uff6b\120\uff6b\123\uff6b\127\uff6b" +
    "\164\uff6b\167\uff6b\001\002\000\044\002\uff6a\003\uff6a\010" +
    "\uff6a\012\uff6a\014\uff6a\016\uff6a\021\uff6a\022\uff6a\045\uff6a" +
    "\075\uff6a\104\uff6a\117\uff6a\120\uff6a\123\uff6a\127\uff6a\164" +
    "\uff6a\167\uff6a\001\002\000\044\002\uff78\003\uff78\010\uff78" +
    "\012\uff78\014\uff78\016\uff78\021\uff78\022\uff78\045\uff78\075" +
    "\uff78\104\uff78\117\uff78\120\uff78\123\uff78\127\uff78\164\uff78" +
    "\167\uff78\001\002\000\044\002\uff73\003\uff73\010\uff73\012" +
    "\uff73\014\uff73\016\uff73\021\uff73\022\uff73\045\uff73\075\uff73" +
    "\104\uff73\117\uff73\120\uff73\123\uff73\127\uff73\164\uff73\167" +
    "\uff73\001\002\000\012\003\u0124\042\u0126\043\u0125\104\356" +
    "\001\002\000\006\042\u0113\104\356\001\002\000\006\043" +
    "\u0108\104\356\001\002\000\004\043\u010d\001\002\000\004" +
    "\044\u0109\001\002\000\032\012\067\014\052\016\064\045" +
    "\u010b\075\057\104\053\117\061\120\045\123\055\127\043" +
    "\164\054\167\047\001\002\000\032\012\067\014\052\016" +
    "\064\045\u010c\075\057\104\053\117\061\120\045\123\055" +
    "\127\043\164\054\167\047\001\002\000\044\002\uff30\003" +
    "\uff30\010\uff30\012\uff30\014\uff30\016\uff30\021\uff30\022\uff30" +
    "\045\uff30\075\uff30\104\uff30\117\uff30\120\uff30\123\uff30\127" +
    "\uff30\164\uff30\167\uff30\001\002\000\044\002\uff44\003\uff44" +
    "\010\uff44\012\uff44\014\uff44\016\uff44\021\uff44\022\uff44\045" +
    "\uff44\075\uff44\104\uff44\117\uff44\120\uff44\123\uff44\127\uff44" +
    "\164\uff44\167\uff44\001\002\000\004\044\u010e\001\002\000" +
    "\032\012\067\014\052\016\064\045\u0110\075\057\104\053" +
    "\117\061\120\045\123\055\127\043\164\054\167\047\001" +
    "\002\000\032\012\067\014\052\016\064\045\u0111\075\057" +
    "\104\053\117\061\120\045\123\055\127\043\164\054\167" +
    "\047\001\002\000\044\002\uff3a\003\uff3a\010\uff3a\012\uff3a" +
    "\014\uff3a\016\uff3a\021\uff3a\022\uff3a\045\uff3a\075\uff3a\104" +
    "\uff3a\117\uff3a\120\uff3a\123\uff3a\127\uff3a\164\uff3a\167\uff3a" +
    "\001\002\000\044\002\uff4e\003\uff4e\010\uff4e\012\uff4e\014" +
    "\uff4e\016\uff4e\021\uff4e\022\uff4e\045\uff4e\075\uff4e\104\uff4e" +
    "\117\uff4e\120\uff4e\123\uff4e\127\uff4e\164\uff4e\167\uff4e\001" +
    "\002\000\004\043\u011f\001\002\000\006\043\u0115\104\356" +
    "\001\002\000\004\043\u011a\001\002\000\004\044\u0116\001" +
    "\002\000\032\012\067\014\052\016\064\045\u0118\075\057" +
    "\104\053\117\061\120\045\123\055\127\043\164\054\167" +
    "\047\001\002\000\032\012\067\014\052\016\064\045\u0119" +
    "\075\057\104\053\117\061\120\045\123\055\127\043\164" +
    "\054\167\047\001\002\000\044\002\uff35\003\uff35\010\uff35" +
    "\012\uff35\014\uff35\016\uff35\021\uff35\022\uff35\045\uff35\075" +
    "\uff35\104\uff35\117\uff35\120\uff35\123\uff35\127\uff35\164\uff35" +
    "\167\uff35\001\002\000\044\002\uff49\003\uff49\010\uff49\012" +
    "\uff49\014\uff49\016\uff49\021\uff49\022\uff49\045\uff49\075\uff49" +
    "\104\uff49\117\uff49\120\uff49\123\uff49\127\uff49\164\uff49\167" +
    "\uff49\001\002\000\004\044\u011b\001\002\000\032\012\067" +
    "\014\052\016\064\045\u011d\075\057\104\053\117\061\120" +
    "\045\123\055\127\043\164\054\167\047\001\002\000\032" +
    "\012\067\014\052\016\064\045\u011e\075\057\104\053\117" +
    "\061\120\045\123\055\127\043\164\054\167\047\001\002" +
    "\000\044\002\uff3f\003\uff3f\010\uff3f\012\uff3f\014\uff3f\016" +
    "\uff3f\021\uff3f\022\uff3f\045\uff3f\075\uff3f\104\uff3f\117\uff3f" +
    "\120\uff3f\123\uff3f\127\uff3f\164\uff3f\167\uff3f\001\002\000" +
    "\044\002\uff53\003\uff53\010\uff53\012\uff53\014\uff53\016\uff53" +
    "\021\uff53\022\uff53\045\uff53\075\uff53\104\uff53\117\uff53\120" +
    "\uff53\123\uff53\127\uff53\164\uff53\167\uff53\001\002\000\004" +
    "\044\u0120\001\002\000\030\012\067\014\052\016\064\075" +
    "\057\104\053\117\061\120\045\123\055\127\043\164\054" +
    "\167\047\001\002\000\032\012\067\014\052\016\064\045" +
    "\u0122\075\057\104\053\117\061\120\045\123\055\127\043" +
    "\164\054\167\047\001\002\000\044\002\uff4d\003\uff4d\010" +
    "\uff4d\012\uff4d\014\uff4d\016\uff4d\021\uff4d\022\uff4d\045\uff4d" +
    "\075\uff4d\104\uff4d\117\uff4d\120\uff4d\123\uff4d\127\uff4d\164" +
    "\uff4d\167\uff4d\001\002\000\004\043\u0171\001\002\000\006" +
    "\043\u0167\104\356\001\002\000\004\044\u0162\001\002\000" +
    "\014\003\u0127\042\u012a\043\u0129\044\u012b\104\356\001\002" +
    "\000\004\044\u015e\001\002\000\012\003\u0141\042\u0143\043" +
    "\u0142\044\u0144\001\002\000\034\003\u0138\012\067\014\052" +
    "\016\064\044\u0139\075\057\104\053\117\061\120\045\123" +
    "\055\127\043\164\054\167\047\001\002\000\006\003\u012f" +
    "\044\u0130\001\002\000\032\012\067\014\052\016\064\045" +
    "\u012d\075\057\104\053\117\061\120\045\123\055\127\043" +
    "\164\054\167\047\001\002\000\032\012\067\014\052\016" +
    "\064\045\u012e\075\057\104\053\117\061\120\045\123\055" +
    "\127\043\164\054\167\047\001\002\000\044\002\uff2e\003" +
    "\uff2e\010\uff2e\012\uff2e\014\uff2e\016\uff2e\021\uff2e\022\uff2e" +
    "\045\uff2e\075\uff2e\104\uff2e\117\uff2e\120\uff2e\123\uff2e\127" +
    "\uff2e\164\uff2e\167\uff2e\001\002\000\044\002\uff42\003\uff42" +
    "\010\uff42\012\uff42\014\uff42\016\uff42\021\uff42\022\uff42\045" +
    "\uff42\075\uff42\104\uff42\117\uff42\120\uff42\123\uff42\127\uff42" +
    "\164\uff42\167\uff42\001\002\000\032\012\067\014\052\016" +
    "\064\045\u0135\075\057\104\053\117\061\120\045\123\055" +
    "\127\043\164\054\167\047\001\002\000\032\003\u0132\012" +
    "\067\014\052\016\064\075\057\104\053\117\061\120\045" +
    "\123\055\127\043\164\054\167\047\001\002\000\032\003" +
    "\u0133\012\067\014\052\016\064\075\057\104\053\117\061" +
    "\120\045\123\055\127\043\164\054\167\047\001\002\000" +
    "\044\002\uff31\003\uff31\010\uff31\012\uff31\014\uff31\016\uff31" +
    "\021\uff31\022\uff31\045\uff31\075\uff31\104\uff31\117\uff31\120" +
    "\uff31\123\uff31\127\uff31\164\uff31\167\uff31\001\002\000\044" +
    "\002\uff45\003\uff45\010\uff45\012\uff45\014\uff45\016\uff45\021" +
    "\uff45\022\uff45\045\uff45\075\uff45\104\uff45\117\uff45\120\uff45" +
    "\123\uff45\127\uff45\164\uff45\167\uff45\001\002\000\032\012" +
    "\067\014\052\016\064\045\u0136\075\057\104\053\117\061" +
    "\120\045\123\055\127\043\164\054\167\047\001\002\000" +
    "\044\002\uff32\003\uff32\010\uff32\012\uff32\014\uff32\016\uff32" +
    "\021\uff32\022\uff32\045\uff32\075\uff32\104\uff32\117\uff32\120" +
    "\uff32\123\uff32\127\uff32\164\uff32\167\uff32\001\002\000\044" +
    "\002\uff46\003\uff46\010\uff46\012\uff46\014\uff46\016\uff46\021" +
    "\uff46\022\uff46\045\uff46\075\uff46\104\uff46\117\uff46\120\uff46" +
    "\123\uff46\127\uff46\164\uff46\167\uff46\001\002\000\032\012" +
    "\067\014\052\016\064\045\u0140\075\057\104\053\117\061" +
    "\120\045\123\055\127\043\164\054\167\047\001\002\000" +
    "\004\045\u013f\001\002\000\034\003\u013b\012\067\014\052" +
    "\016\064\045\u013c\075\057\104\053\117\061\120\045\123" +
    "\055\127\043\164\054\167\047\001\002\000\034\003\u013d" +
    "\012\067\014\052\016\064\045\u013e\075\057\104\053\117" +
    "\061\120\045\123\055\127\043\164\054\167\047\001\002" +
    "\000\044\002\uff2c\003\uff2c\010\uff2c\012\uff2c\014\uff2c\016" +
    "\uff2c\021\uff2c\022\uff2c\045\uff2c\075\uff2c\104\uff2c\117\uff2c" +
    "\120\uff2c\123\uff2c\127\uff2c\164\uff2c\167\uff2c\001\002\000" +
    "\044\002\uff56\003\uff56\010\uff56\012\uff56\014\uff56\016\uff56" +
    "\021\uff56\022\uff56\045\uff56\075\uff56\104\uff56\117\uff56\120" +
    "\uff56\123\uff56\127\uff56\164\uff56\167\uff56\001\002\000\044" +
    "\002\uff40\003\uff40\010\uff40\012\uff40\014\uff40\016\uff40\021" +
    "\uff40\022\uff40\045\uff40\075\uff40\104\uff40\117\uff40\120\uff40" +
    "\123\uff40\127\uff40\164\uff40\167\uff40\001\002\000\044\002" +
    "\uff55\003\uff55\010\uff55\012\uff55\014\uff55\016\uff55\021\uff55" +
    "\022\uff55\045\uff55\075\uff55\104\uff55\117\uff55\120\uff55\123" +
    "\uff55\127\uff55\164\uff55\167\uff55\001\002\000\044\002\uff2d" +
    "\003\uff2d\010\uff2d\012\uff2d\014\uff2d\016\uff2d\021\uff2d\022" +
    "\uff2d\045\uff2d\075\uff2d\104\uff2d\117\uff2d\120\uff2d\123\uff2d" +
    "\127\uff2d\164\uff2d\167\uff2d\001\002\000\044\002\uff41\003" +
    "\uff41\010\uff41\012\uff41\014\uff41\016\uff41\021\uff41\022\uff41" +
    "\045\uff41\075\uff41\104\uff41\117\uff41\120\uff41\123\uff41\127" +
    "\uff41\164\uff41\167\uff41\001\002\000\004\044\u015a\001\002" +
    "\000\010\003\u0150\044\u0152\045\u0151\001\002\000\006\003" +
    "\u0148\044\u0149\001\002\000\032\012\067\014\052\016\064" +
    "\045\u0146\075\057\104\053\117\061\120\045\123\055\127" +
    "\043\164\054\167\047\001\002\000\032\012\067\014\052" +
    "\016\064\045\u0147\075\057\104\053\117\061\120\045\123" +
    "\055\127\043\164\054\167\047\001\002\000\044\002\uff38" +
    "\003\uff38\010\uff38\012\uff38\014\uff38\016\uff38\021\uff38\022" +
    "\uff38\045\uff38\075\uff38\104\uff38\117\uff38\120\uff38\123\uff38" +
    "\127\uff38\164\uff38\167\uff38\001\002\000\044\002\uff4c\003" +
    "\uff4c\010\uff4c\012\uff4c\014\uff4c\016\uff4c\021\uff4c\022\uff4c" +
    "\045\uff4c\075\uff4c\104\uff4c\117\uff4c\120\uff4c\123\uff4c\127" +
    "\uff4c\164\uff4c\167\uff4c\001\002\000\032\012\067\014\052" +
    "\016\064\045\u014e\075\057\104\053\117\061\120\045\123" +
    "\055\127\043\164\054\167\047\001\002\000\032\003\u014b" +
    "\012\067\014\052\016\064\075\057\104\053\117\061\120" +
    "\045\123\055\127\043\164\054\167\047\001\002\000\032" +
    "\003\u014c\012\067\014\052\016\064\075\057\104\053\117" +
    "\061\120\045\123\055\127\043\164\054\167\047\001\002" +
    "\000\044\002\uff3b\003\uff3b\010\uff3b\012\uff3b\014\uff3b\016" +
    "\uff3b\021\uff3b\022\uff3b\045\uff3b\075\uff3b\104\uff3b\117\uff3b" +
    "\120\uff3b\123\uff3b\127\uff3b\164\uff3b\167\uff3b\001\002\000" +
    "\044\002\uff4f\003\uff4f\010\uff4f\012\uff4f\014\uff4f\016\uff4f" +
    "\021\uff4f\022\uff4f\045\uff4f\075\uff4f\104\uff4f\117\uff4f\120" +
    "\uff4f\123\uff4f\127\uff4f\164\uff4f\167\uff4f\001\002\000\032" +
    "\012\067\014\052\016\064\045\u014f\075\057\104\053\117" +
    "\061\120\045\123\055\127\043\164\054\167\047\001\002" +
    "\000\044\002\uff3c\003\uff3c\010\uff3c\012\uff3c\014\uff3c\016" +
    "\uff3c\021\uff3c\022\uff3c\045\uff3c\075\uff3c\104\uff3c\117\uff3c" +
    "\120\uff3c\123\uff3c\127\uff3c\164\uff3c\167\uff3c\001\002\000" +
    "\044\002\uff50\003\uff50\010\uff50\012\uff50\014\uff50\016\uff50" +
    "\021\uff50\022\uff50\045\uff50\075\uff50\104\uff50\117\uff50\120" +
    "\uff50\123\uff50\127\uff50\164\uff50\167\uff50\001\002\000\030" +
    "\012\067\014\052\016\064\075\057\104\053\117\061\120" +
    "\045\123\055\127\043\164\054\167\047\001\002\000\044" +
    "\002\uff37\003\uff37\010\uff37\012\uff37\014\uff37\016\uff37\021" +
    "\uff37\022\uff37\045\uff37\075\uff37\104\uff37\117\uff37\120\uff37" +
    "\123\uff37\127\uff37\164\uff37\167\uff37\001\002\000\034\003" +
    "\u0154\012\067\014\052\016\064\045\u0155\075\057\104\053" +
    "\117\061\120\045\123\055\127\043\164\054\167\047\001" +
    "\002\000\034\003\u0156\012\067\014\052\016\064\045\u0157" +
    "\075\057\104\053\117\061\120\045\123\055\127\043\164" +
    "\054\167\047\001\002\000\044\002\uff36\003\uff36\010\uff36" +
    "\012\uff36\014\uff36\016\uff36\021\uff36\022\uff36\045\uff36\075" +
    "\uff36\104\uff36\117\uff36\120\uff36\123\uff36\127\uff36\164\uff36" +
    "\167\uff36\001\002\000\044\002\uff54\003\uff54\010\uff54\012" +
    "\uff54\014\uff54\016\uff54\021\uff54\022\uff54\045\uff54\075\uff54" +
    "\104\uff54\117\uff54\120\uff54\123\uff54\127\uff54\164\uff54\167" +
    "\uff54\001\002\000\044\002\uff4a\003\uff4a\010\uff4a\012\uff4a" +
    "\014\uff4a\016\uff4a\021\uff4a\022\uff4a\045\uff4a\075\uff4a\104" +
    "\uff4a\117\uff4a\120\uff4a\123\uff4a\127\uff4a\164\uff4a\167\uff4a" +
    "\001\002\000\044\002\uff57\003\uff57\010\uff57\012\uff57\014" +
    "\uff57\016\uff57\021\uff57\022\uff57\045\uff57\075\uff57\104\uff57" +
    "\117\uff57\120\uff57\123\uff57\127\uff57\164\uff57\167\uff57\001" +
    "\002\000\032\012\067\014\052\016\064\045\u0159\075\057" +
    "\104\053\117\061\120\045\123\055\127\043\164\054\167" +
    "\047\001\002\000\044\002\uff4b\003\uff4b\010\uff4b\012\uff4b" +
    "\014\uff4b\016\uff4b\021\uff4b\022\uff4b\045\uff4b\075\uff4b\104" +
    "\uff4b\117\uff4b\120\uff4b\123\uff4b\127\uff4b\164\uff4b\167\uff4b" +
    "\001\002\000\032\012\067\014\052\016\064\045\u015c\075" +
    "\057\104\053\117\061\120\045\123\055\127\043\164\054" +
    "\167\047\001\002\000\032\012\067\014\052\016\064\045" +
    "\u015d\075\057\104\053\117\061\120\045\123\055\127\043" +
    "\164\054\167\047\001\002\000\044\002\uff3d\003\uff3d\010" +
    "\uff3d\012\uff3d\014\uff3d\016\uff3d\021\uff3d\022\uff3d\045\uff3d" +
    "\075\uff3d\104\uff3d\117\uff3d\120\uff3d\123\uff3d\127\uff3d\164" +
    "\uff3d\167\uff3d\001\002\000\044\002\uff51\003\uff51\010\uff51" +
    "\012\uff51\014\uff51\016\uff51\021\uff51\022\uff51\045\uff51\075" +
    "\uff51\104\uff51\117\uff51\120\uff51\123\uff51\127\uff51\164\uff51" +
    "\167\uff51\001\002\000\032\012\067\014\052\016\064\045" +
    "\u0160\075\057\104\053\117\061\120\045\123\055\127\043" +
    "\164\054\167\047\001\002\000\032\012\067\014\052\016" +
    "\064\045\u0161\075\057\104\053\117\061\120\045\123\055" +
    "\127\043\164\054\167\047\001\002\000\044\002\uff33\003" +
    "\uff33\010\uff33\012\uff33\014\uff33\016\uff33\021\uff33\022\uff33" +
    "\045\uff33\075\uff33\104\uff33\117\uff33\120\uff33\123\uff33\127" +
    "\uff33\164\uff33\167\uff33\001\002\000\044\002\uff47\003\uff47" +
    "\010\uff47\012\uff47\014\uff47\016\uff47\021\uff47\022\uff47\045" +
    "\uff47\075\uff47\104\uff47\117\uff47\120\uff47\123\uff47\127\uff47" +
    "\164\uff47\167\uff47\001\002\000\032\012\067\014\052\016" +
    "\064\045\u0164\075\057\104\053\117\061\120\045\123\055" +
    "\127\043\164\054\167\047\001\002\000\032\012\067\014" +
    "\052\016\064\045\u0165\075\057\104\053\117\061\120\045" +
    "\123\055\127\043\164\054\167\047\001\002\000\044\002" +
    "\uff2f\003\uff2f\010\uff2f\012\uff2f\014\uff2f\016\uff2f\021\uff2f" +
    "\022\uff2f\045\uff2f\075\uff2f\104\uff2f\117\uff2f\120\uff2f\123" +
    "\uff2f\127\uff2f\164\uff2f\167\uff2f\001\002\000\044\002\uff43" +
    "\003\uff43\010\uff43\012\uff43\014\uff43\016\uff43\021\uff43\022" +
    "\uff43\045\uff43\075\uff43\104\uff43\117\uff43\120\uff43\123\uff43" +
    "\127\uff43\164\uff43\167\uff43\001\002\000\004\043\u016c\001" +
    "\002\000\004\044\u0168\001\002\000\032\012\067\014\052" +
    "\016\064\045\u016a\075\057\104\053\117\061\120\045\123" +
    "\055\127\043\164\054\167\047\001\002\000\032\012\067" +
    "\014\052\016\064\045\u016b\075\057\104\053\117\061\120" +
    "\045\123\055\127\043\164\054\167\047\001\002\000\044" +
    "\002\uff34\003\uff34\010\uff34\012\uff34\014\uff34\016\uff34\021" +
    "\uff34\022\uff34\045\uff34\075\uff34\104\uff34\117\uff34\120\uff34" +
    "\123\uff34\127\uff34\164\uff34\167\uff34\001\002\000\044\002" +
    "\uff48\003\uff48\010\uff48\012\uff48\014\uff48\016\uff48\021\uff48" +
    "\022\uff48\045\uff48\075\uff48\104\uff48\117\uff48\120\uff48\123" +
    "\uff48\127\uff48\164\uff48\167\uff48\001\002\000\004\044\u016d" +
    "\001\002\000\032\012\067\014\052\016\064\045\u016f\075" +
    "\057\104\053\117\061\120\045\123\055\127\043\164\054" +
    "\167\047\001\002\000\032\012\067\014\052\016\064\045" +
    "\u0170\075\057\104\053\117\061\120\045\123\055\127\043" +
    "\164\054\167\047\001\002\000\044\002\uff3e\003\uff3e\010" +
    "\uff3e\012\uff3e\014\uff3e\016\uff3e\021\uff3e\022\uff3e\045\uff3e" +
    "\075\uff3e\104\uff3e\117\uff3e\120\uff3e\123\uff3e\127\uff3e\164" +
    "\uff3e\167\uff3e\001\002\000\044\002\uff52\003\uff52\010\uff52" +
    "\012\uff52\014\uff52\016\uff52\021\uff52\022\uff52\045\uff52\075" +
    "\uff52\104\uff52\117\uff52\120\uff52\123\uff52\127\uff52\164\uff52" +
    "\167\uff52\001\002\000\004\044\u0172\001\002\000\004\045" +
    "\u0173\001\002\000\044\002\uff39\003\uff39\010\uff39\012\uff39" +
    "\014\uff39\016\uff39\021\uff39\022\uff39\045\uff39\075\uff39\104" +
    "\uff39\117\uff39\120\uff39\123\uff39\127\uff39\164\uff39\167\uff39" +
    "\001\002\000\004\106\u0175\001\002\000\004\110\u0176\001" +
    "\002\000\004\046\u0177\001\002\000\004\106\325\001\002" +
    "\000\004\047\u0179\001\002\000\044\002\uffa4\003\uffa4\010" +
    "\uffa4\012\uffa4\014\uffa4\016\uffa4\021\uffa4\022\uffa4\045\uffa4" +
    "\075\uffa4\104\uffa4\117\uffa4\120\uffa4\123\uffa4\127\uffa4\164" +
    "\uffa4\167\uffa4\001\002\000\004\106\u017b\001\002\000\004" +
    "\043\u017c\001\002\000\004\053\u017d\001\002\000\030\115" +
    "\262\125\264\130\273\131\271\132\260\133\267\137\263" +
    "\142\257\160\270\161\261\166\266\001\002\000\044\002" +
    "\uffb6\003\uffb6\010\uffb6\012\uffb6\014\uffb6\016\uffb6\021\uffb6" +
    "\022\uffb6\045\uffb6\075\uffb6\104\uffb6\117\uffb6\120\uffb6\123" +
    "\uffb6\127\uffb6\164\uffb6\167\uffb6\001\002\000\014\002\uffeb" +
    "\010\uffeb\021\uffeb\022\uffeb\045\uffeb\001\002\000\012\104" +
    "\074\106\077\107\075\163\100\001\002\000\004\043\u0182" +
    "\001\002\000\044\002\uffb8\003\uffb8\010\uffb8\012\uffb8\014" +
    "\uffb8\016\uffb8\021\uffb8\022\uffb8\045\uffb8\075\uffb8\104\uffb8" +
    "\117\uffb8\120\uffb8\123\uffb8\127\uffb8\164\uffb8\167\uffb8\001" +
    "\002\000\032\012\067\014\052\016\064\045\u0189\075\057" +
    "\104\053\117\061\120\045\123\055\127\043\164\054\167" +
    "\047\001\002\000\014\002\uffee\010\uffee\021\uffee\022\uffee" +
    "\045\uffee\001\002\000\042\002\uffed\010\uffed\012\067\014" +
    "\052\016\064\021\uffed\022\uffed\045\u0187\075\057\104\053" +
    "\117\061\120\045\123\055\127\043\164\054\167\047\001" +
    "\002\000\042\002\uffea\010\uffea\012\067\014\052\016\064" +
    "\021\uffea\022\uffea\045\u0188\075\057\104\053\117\061\120" +
    "\045\123\055\127\043\164\054\167\047\001\002\000\014" +
    "\002\uffef\010\uffef\021\uffef\022\uffef\045\uffef\001\002\000" +
    "\014\002\ufff0\010\ufff0\021\ufff0\022\ufff0\045\ufff0\001\002" +
    "\000\014\002\uffe9\010\uffe9\021\uffe9\022\uffe9\045\uffe9\001" +
    "\002\000\006\003\u019d\042\u019e\001\002\000\010\002\ufff5" +
    "\021\ufff5\045\ufff5\001\002\000\014\002\ufff2\010\u018a\021" +
    "\ufff2\022\u018e\045\ufff2\001\002\000\014\002\ufff4\010\u018a" +
    "\021\ufff4\022\u018e\045\ufff4\001\002\000\006\003\u0190\104" +
    "\u018f\001\002\000\006\003\u0194\044\u0195\001\002\000\004" +
    "\044\u0191\001\002\000\030\012\067\014\052\016\064\075" +
    "\057\104\053\117\061\120\045\123\055\127\043\164\054" +
    "\167\047\001\002\000\032\012\067\014\052\016\064\045" +
    "\u0193\075\057\104\053\117\061\120\045\123\055\127\043" +
    "\164\054\167\047\001\002\000\014\002\uffe7\010\uffe7\021" +
    "\uffe7\022\uffe7\045\uffe7\001\002\000\030\012\067\014\052" +
    "\016\064\075\057\104\053\117\061\120\045\123\055\127" +
    "\043\164\054\167\047\001\002\000\030\012\067\014\052" +
    "\016\064\075\057\104\053\117\061\120\045\123\055\127" +
    "\043\164\054\167\047\001\002\000\034\003\u0197\012\067" +
    "\014\052\016\064\045\u0198\075\057\104\053\117\061\120" +
    "\045\123\055\127\043\164\054\167\047\001\002\000\014" +
    "\002\uffe6\010\uffe6\021\uffe6\022\uffe6\045\uffe6\001\002\000" +
    "\014\002\uffe8\010\uffe8\021\uffe8\022\uffe8\045\uffe8\001\002" +
    "\000\032\012\067\014\052\016\064\045\u019a\075\057\104" +
    "\053\117\061\120\045\123\055\127\043\164\054\167\047" +
    "\001\002\000\014\002\uffe5\010\uffe5\021\uffe5\022\uffe5\045" +
    "\uffe5\001\002\000\010\002\ufff3\021\ufff3\045\ufff3\001\002" +
    "\000\010\002\ufff1\021\ufff1\045\ufff1\001\002\000\006\104" +
    "\u019f\106\u01a0\001\002\000\010\003\u01a2\104\u019f\106\u01a0" +
    "\001\002\000\006\003\uffdc\110\uffdc\001\002\000\006\003" +
    "\uffdd\110\uffdd\001\002\000\006\003\u01c2\110\u01c1\001\002" +
    "\000\004\110\u01a3\001\002\000\004\046\u01a4\001\002\000" +
    "\010\047\uffd6\052\u01a6\106\u01a5\001\002\000\012\052\u01b3" +
    "\104\u01ab\106\u01ac\107\u01aa\001\002\000\010\104\u01ab\106" +
    "\u01ac\107\u01aa\001\002\000\004\047\u01a8\001\002\000\004" +
    "\043\u01a9\001\002\000\014\002\uffe2\010\uffe2\021\uffe2\022" +
    "\uffe2\045\uffe2\001\002\000\014\003\uffcf\047\uffcf\071\u01b0" +
    "\106\uffcf\110\uffcf\001\002\000\012\003\uffce\047\uffce\106" +
    "\uffce\110\uffce\001\002\000\014\003\uffcd\047\uffcd\071\u01ae" +
    "\106\uffcd\110\uffcd\001\002\000\006\003\uffd9\047\uffd9\001" +
    "\002\000\004\107\u01af\001\002\000\012\003\uffcb\047\uffcb" +
    "\106\uffcb\110\uffcb\001\002\000\004\106\u01b1\001\002\000" +
    "\012\003\uffcc\047\uffcc\106\uffcc\110\uffcc\001\002\000\006" +
    "\003\uffd8\047\uffd8\001\002\000\014\003\uffd7\047\uffd7\104" +
    "\u01ab\106\u01ac\107\u01aa\001\002\000\012\003\uffdb\047\uffdb" +
    "\106\u01b6\110\u01b5\001\002\000\006\052\u01bb\106\u01ba\001" +
    "\002\000\004\052\u01b8\001\002\000\006\003\uffda\047\uffda" +
    "\001\002\000\010\104\u01ab\106\u01ac\107\u01aa\001\002\000" +
    "\006\003\uffd3\047\uffd3\001\002\000\012\052\u01be\104\u01ab" +
    "\106\u01ac\107\u01aa\001\002\000\010\104\u01ab\106\u01ac\107" +
    "\u01aa\001\002\000\006\003\uffd2\047\uffd2\001\002\000\006" +
    "\003\uffd1\047\uffd1\001\002\000\014\003\uffd0\047\uffd0\104" +
    "\u01ab\106\u01ac\107\u01aa\001\002\000\012\003\uffd5\047\uffd5" +
    "\106\u01b6\110\u01b5\001\002\000\006\003\uffd4\047\uffd4\001" +
    "\002\000\006\003\u01c7\046\u01c8\001\002\000\004\046\u01c3" +
    "\001\002\000\010\047\uffd6\052\u01a6\106\u01a5\001\002\000" +
    "\004\047\u01c5\001\002\000\004\043\u01c6\001\002\000\014" +
    "\002\uffe1\010\uffe1\021\uffe1\022\uffe1\045\uffe1\001\002\000" +
    "\010\047\uffd6\052\u01a6\106\u01a5\001\002\000\012\003\uffd6" +
    "\047\uffd6\052\u01a6\106\u01a5\001\002\000\006\003\u01ca\047" +
    "\u01cb\001\002\000\004\043\u01cf\001\002\000\006\003\u01cc" +
    "\043\u01cd\001\002\000\004\051\u01ce\001\002\000\014\002" +
    "\uffe4\010\uffe4\021\uffe4\022\uffe4\045\uffe4\001\002\000\014" +
    "\002\uffde\010\uffde\021\uffde\022\uffde\045\uffde\001\002\000" +
    "\014\002\uffdf\010\uffdf\021\uffdf\022\uffdf\045\uffdf\001\002" +
    "\000\004\047\u01d1\001\002\000\004\043\u01d2\001\002\000" +
    "\014\002\uffe0\010\uffe0\021\uffe0\022\uffe0\045\uffe0\001\002" +
    "\000\004\110\u01d4\001\002\000\004\046\u01d5\001\002\000" +
    "\010\047\uffd6\052\u01a6\106\u01a5\001\002\000\004\047\u01d7" +
    "\001\002\000\004\043\u01d8\001\002\000\014\002\uffe3\010" +
    "\uffe3\021\uffe3\022\uffe3\045\uffe3\001\002\000\004\045\u01de" +
    "\001\002\000\036\011\036\012\067\014\052\016\064\044" +
    "\037\045\u01dc\075\057\104\053\117\061\120\045\123\055" +
    "\127\043\164\054\167\047\001\002\000\010\002\ufff7\021" +
    "\ufff7\045\u01dd\001\002\000\014\002\ufffb\010\uffec\021\ufffb" +
    "\022\uffec\045\uffec\001\002\000\006\002\ufffd\021\ufffd\001" +
    "\002\000\006\002\ufff8\021\ufff8\001\002\000\006\011\036" +
    "\044\037\001\002\000\004\045\u01e1\001\002\000\006\002" +
    "\ufffa\021\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01df\000\006\002\007\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\034\065\u01d8\001\001\000\006\044" +
    "\034\065\037\001\001\000\010\016\u018c\043\u018a\045\u018b" +
    "\001\001\000\026\005\041\012\u0182\014\065\020\047\067" +
    "\064\073\062\074\055\075\045\076\057\103\050\001\001" +
    "\000\026\005\041\012\043\014\065\020\047\067\064\073" +
    "\062\074\055\075\045\076\057\103\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\137\014\151\020\141\067\150\073\147" +
    "\074\143\075\140\076\144\103\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\105\001\001\000\004\051\103\001\001\000\002" +
    "\001\001\000\004\051\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\113\001\001\000\004\051\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\243\021\125\001\001\000\006\017\127\021" +
    "\125\001\001\000\002\001\001\000\006\022\211\050\164" +
    "\001\001\000\006\022\161\050\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\041" +
    "\012\152\014\065\020\047\067\064\073\062\074\055\075" +
    "\045\076\057\103\050\001\001\000\026\005\041\012\134" +
    "\014\065\020\047\067\064\073\062\074\055\075\045\076" +
    "\057\103\050\001\001\000\024\005\137\014\151\020\141" +
    "\067\150\073\147\074\143\075\140\076\144\103\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\137\014\151\020\141\067\150\073\147" +
    "\074\143\075\140\076\144\103\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\041\012\156\014\065" +
    "\020\047\067\064\073\062\074\055\075\045\076\057\103" +
    "\050\001\001\000\024\005\137\014\151\020\141\067\150" +
    "\073\147\074\143\075\140\076\144\103\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\225" +
    "\050\164\001\001\000\006\022\214\050\164\001\001\000" +
    "\004\023\221\001\001\000\004\023\216\001\001\000\002" +
    "\001\001\000\004\023\224\001\001\000\004\023\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\227\001" +
    "\001\000\002\001\001\000\004\023\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\041\012\246" +
    "\014\065\020\047\067\064\073\062\074\055\075\045\076" +
    "\057\103\050\001\001\000\024\005\137\014\151\020\141" +
    "\067\150\073\147\074\143\075\140\076\144\103\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\077\264\100" +
    "\255\101\273\102\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\077" +
    "\314\100\255\101\273\102\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\374\001\001" +
    "\000\004\051\367\001\001\000\004\015\356\001\001\000" +
    "\004\055\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\371\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0122\001\001\000\004\015" +
    "\u0111\001\001\000\004\015\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\041\012\u0109\014\065\020" +
    "\047\067\064\073\062\074\055\075\045\076\057\103\050" +
    "\001\001\000\024\005\137\014\151\020\141\067\150\073" +
    "\147\074\143\075\140\076\144\103\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\041\012\u010e\014\065\020\047\067\064\073\062\074\055" +
    "\075\045\076\057\103\050\001\001\000\024\005\137\014" +
    "\151\020\141\067\150\073\147\074\143\075\140\076\144" +
    "\103\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0113\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\041\012\u0116\014\065\020" +
    "\047\067\064\073\062\074\055\075\045\076\057\103\050" +
    "\001\001\000\024\005\137\014\151\020\141\067\150\073" +
    "\147\074\143\075\140\076\144\103\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\041\012\u011b\014\065\020\047\067\064\073\062\074\055" +
    "\075\045\076\057\103\050\001\001\000\024\005\137\014" +
    "\151\020\141\067\150\073\147\074\143\075\140\076\144" +
    "\103\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\041\012\u0120\014\065\020\047" +
    "\067\064\073\062\074\055\075\045\076\057\103\050\001" +
    "\001\000\024\005\137\014\151\020\141\067\150\073\147" +
    "\074\143\075\140\076\144\103\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u0165\001\001\000\002" +
    "\001\001\000\004\015\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\041\012\u0136\014\065\020\047" +
    "\067\064\073\062\074\055\075\045\076\057\103\050\001" +
    "\001\000\002\001\001\000\026\005\041\012\u012b\014\065" +
    "\020\047\067\064\073\062\074\055\075\045\076\057\103" +
    "\050\001\001\000\024\005\137\014\151\020\141\067\150" +
    "\073\147\074\143\075\140\076\144\103\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\041\012\u0133" +
    "\014\065\020\047\067\064\073\062\074\055\075\045\076" +
    "\057\103\050\001\001\000\026\005\041\012\u0130\014\065" +
    "\020\047\067\064\073\062\074\055\075\045\076\057\103" +
    "\050\001\001\000\024\005\137\014\151\020\141\067\150" +
    "\073\147\074\143\075\140\076\144\103\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\137\014\151" +
    "\020\141\067\150\073\147\074\143\075\140\076\144\103" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\137\014\151\020\141\067\150\073\147\074\143\075" +
    "\140\076\144\103\142\001\001\000\002\001\001\000\026" +
    "\005\041\012\u0139\014\065\020\047\067\064\073\062\074" +
    "\055\075\045\076\057\103\050\001\001\000\024\005\137" +
    "\014\151\020\141\067\150\073\147\074\143\075\140\076" +
    "\144\103\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\041\012\u0144\014\065\020\047\067" +
    "\064\073\062\074\055\075\045\076\057\103\050\001\001" +
    "\000\024\005\137\014\151\020\141\067\150\073\147\074" +
    "\143\075\140\076\144\103\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\041\012\u014c\014\065\020" +
    "\047\067\064\073\062\074\055\075\045\076\057\103\050" +
    "\001\001\000\026\005\041\012\u0149\014\065\020\047\067" +
    "\064\073\062\074\055\075\045\076\057\103\050\001\001" +
    "\000\024\005\137\014\151\020\141\067\150\073\147\074" +
    "\143\075\140\076\144\103\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\137\014\151\020\141\067" +
    "\150\073\147\074\143\075\140\076\144\103\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\041\012" +
    "\u0157\014\065\020\047\067\064\073\062\074\055\075\045" +
    "\076\057\103\050\001\001\000\002\001\001\000\026\005" +
    "\041\012\u0152\014\065\020\047\067\064\073\062\074\055" +
    "\075\045\076\057\103\050\001\001\000\024\005\137\014" +
    "\151\020\141\067\150\073\147\074\143\075\140\076\144" +
    "\103\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\137\014\151" +
    "\020\141\067\150\073\147\074\143\075\140\076\144\103" +
    "\142\001\001\000\002\001\001\000\026\005\041\012\u015a" +
    "\014\065\020\047\067\064\073\062\074\055\075\045\076" +
    "\057\103\050\001\001\000\024\005\137\014\151\020\141" +
    "\067\150\073\147\074\143\075\140\076\144\103\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\041" +
    "\012\u015e\014\065\020\047\067\064\073\062\074\055\075" +
    "\045\076\057\103\050\001\001\000\024\005\137\014\151" +
    "\020\141\067\150\073\147\074\143\075\140\076\144\103" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\041\012\u0162\014\065\020\047\067\064\073\062\074" +
    "\055\075\045\076\057\103\050\001\001\000\024\005\137" +
    "\014\151\020\141\067\150\073\147\074\143\075\140\076" +
    "\144\103\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\041\012" +
    "\u0168\014\065\020\047\067\064\073\062\074\055\075\045" +
    "\076\057\103\050\001\001\000\024\005\137\014\151\020" +
    "\141\067\150\073\147\074\143\075\140\076\144\103\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\041\012\u016d\014\065\020\047\067\064" +
    "\073\062\074\055\075\045\076\057\103\050\001\001\000" +
    "\024\005\137\014\151\020\141\067\150\073\147\074\143" +
    "\075\140\076\144\103\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\u0177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\077\u017d\100\255\101\273\102\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u0180\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\137" +
    "\014\151\020\141\067\150\073\147\074\143\075\140\076" +
    "\144\103\142\001\001\000\002\001\001\000\026\005\041" +
    "\012\u0185\014\065\020\047\067\064\073\062\074\055\075" +
    "\045\076\057\103\050\001\001\000\024\005\137\014\151" +
    "\020\141\067\150\073\147\074\143\075\140\076\144\103" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\u018c\043\u019b\045\u018b\001\001\000\010\016\u018c\043\u019a" +
    "\045\u018b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\041\012\u0191\014\065\020\047" +
    "\067\064\073\062\074\055\075\045\076\057\103\050\001" +
    "\001\000\024\005\137\014\151\020\141\067\150\073\147" +
    "\074\143\075\140\076\144\103\142\001\001\000\002\001" +
    "\001\000\026\005\041\012\u0198\014\065\020\047\067\064" +
    "\073\062\074\055\075\045\076\057\103\050\001\001\000" +
    "\026\005\041\012\u0195\014\065\020\047\067\064\073\062" +
    "\074\055\075\045\076\057\103\050\001\001\000\024\005" +
    "\137\014\151\020\141\067\150\073\147\074\143\075\140" +
    "\076\144\103\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\137\014\151\020\141\067\150\073\147" +
    "\074\143\075\140\076\144\103\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\u01d2" +
    "\001\001\000\004\066\u01a0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u01a6\001\001\000\004\053\u01b1\001" +
    "\001\000\004\053\u01ac\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u01b3\001\001\000\004\054\u01b6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u01b8\001\001\000\002\001\001\000\004" +
    "\053\u01bc\001\001\000\004\053\u01bb\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\u01be\001\001\000\004" +
    "\054\u01bf\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u01c3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u01cf\001" +
    "\001\000\004\046\u01c8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u01d5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\041\012\043\014\065\020\047\044\034\065\u01da" +
    "\067\064\073\062\074\055\075\045\076\057\103\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\034\065\u01df\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    boolean esDAssig=false;
    int fl;

    public Cup(java_cup.runtime.Scanner s,ArrayList<Error1> m,int tfl) {
        super(s);
        ManejadorDeErrores =m;
        fl = tfl;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }
    /*public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
            try{
                Object result = sintactico.parse().value;
            }catch(Exception ex){


            }
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // param2 ::= PARENTESIS_A STRING COMA STRING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // param2 ::= PARENTESIS_A STRING COMA error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID' o 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // param2 ::= PARENTESIS_A STRING error STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // param2 ::= PARENTESIS_A error COMA animCondicion2 PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // param2 ::= PARENTESIS_A STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // param1 ::= PARENTESIS_A animCondicion2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param1",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // param1 ::= PARENTESIS_A error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param1",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // param1 ::= PARENTESIS_A animCondicion2 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param1",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // param0 ::= PARENTESIS_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param0",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // param0 ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param0",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // grupo1 ::= setHTML 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // grupo1 ::= Child error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // grupo1 ::= ChildText 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // grupo1 ::= RChild error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // grupo1 ::= Value error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // grupo1 ::= RClass error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // grupo1 ::= AClass error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // grupo1 ::= div error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // grupo1 ::= inHTML error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // grupo1 ::= setHTML param2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // grupo1 ::= Child param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // grupo1 ::= ChildText param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // grupo1 ::= RChild param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // grupo1 ::= Value param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // grupo1 ::= RClass param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // grupo1 ::= AClass param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // grupo1 ::= div param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // grupo1 ::= inHTML param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // grupo0 ::= Remove error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // grupo0 ::= Val error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // grupo0 ::= getSecond error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // grupo0 ::= getMonth error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // grupo0 ::= getMinute error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // grupo0 ::= getMSecond error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // grupo0 ::= getHour error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // grupo0 ::= getYear error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // grupo0 ::= getDay error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // grupo0 ::= getDate error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // grupo0 ::= getBody error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // grupo0 ::= WD error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // grupo0 ::= HG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // grupo0 ::= outHTML error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // grupo0 ::= Remove param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // grupo0 ::= Val param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // grupo0 ::= getSecond param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // grupo0 ::= getMonth param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // grupo0 ::= getMinute param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // grupo0 ::= getMSecond param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // grupo0 ::= getHour param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // grupo0 ::= getYear param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // grupo0 ::= getDay param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // grupo0 ::= getDate param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // grupo0 ::= getBody param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // grupo0 ::= WD param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // grupo0 ::= HG param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // grupo0 ::= outHTML param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // accederMetodos ::= ID error PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // accederMetodos ::= ID PARENTESIS_A error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // accederMetodos ::= ID PARENTESIS_A PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // accederMetodos ::= ID error parametros PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // accederMetodos ::= ID PARENTESIS_A parametros error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // accederMetodos ::= ID PARENTESIS_A parametros PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // accederMetodos ::= docCreateElem error STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // accederMetodos ::= docCreateElem PARENTESIS_A error PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // accederMetodos ::= docCreateElem PARENTESIS_A STRING error PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C error setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '.'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO error PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba una funcion."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML error STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A error COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING error STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA error PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // accederMetodos ::= JQElem error STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // accederMetodos ::= JQElem PARENTESIS_A error PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // accederMetodos ::= JQElem PARENTESIS_A STRING error PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C error ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '.'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO error PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba una funcion."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText error STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A error PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // accederMetodos ::= ID PARENTESIS_A PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // accederMetodos ::= ID PARENTESIS_A parametros PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // accederMetodos ::= CONSOL PARENTESIS_A NUMIDSTR PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // animCondicion2 ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion2",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // animCondicion2 ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion2",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // parametros2 ::= COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",43, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // parametros2 ::= ID parametros 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",43, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // parametros2 ::= COMA ID parametros 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",43, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // parametros2 ::= COMA ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",43, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // parametros ::= ID parametros2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // parametros ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // funcion ::= FUNCTION ID PARENTESIS_A LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // funcion ::= FUNCTION ID PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // funcion ::= FUNCTION PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // funcion ::= FUNCTION ID PARENTESIS_A error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // funcion ::= FUNCTION ID error PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // funcion ::= FUNCTION error PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // funcion ::= FUNCTION ID PARENTESIS_A parametros LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // funcion ::= FUNCTION ID parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // funcion ::= FUNCTION PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // funcion ::= FUNCTION ID PARENTESIS_A parametros error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // funcion ::= FUNCTION ID error parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // funcion ::= FUNCTION error PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // funcion ::= FUNCTION ID PARENTESIS_A LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // funcion ::= FUNCTION ID PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // funcion ::= FUNCTION PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // funcion ::= FUNCTION ID PARENTESIS_A error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // funcion ::= FUNCTION ID error PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // funcion ::= FUNCTION error PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // funcion ::= FUNCTION ID PARENTESIS_A parametros LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // funcion ::= FUNCTION error parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // funcion ::= FUNCTION PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // funcion ::= FUNCTION ID PARENTESIS_A parametros error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // funcion ::= FUNCTION ID error parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // funcion ::= FUNCTION error PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // comparador ::= IGUAL2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // comparador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // comparador ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // comparador ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // compuerta ::= XOR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // compuerta ::= ORSIMPLE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // compuerta ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // compuerta ::= ANDSIMPLE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // compuerta ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NUMIDSTR ::= INVNUMERO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NUMIDSTR ::= NUMERO INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NUMIDSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NUMIDSTR ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NUMIDSTR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // asignarVariable ::= ID error NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '=' ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // asignarVariable ::= ID ASIGNACION NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // asignarVariable ::= ID ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // asignarVariable ::= ID error ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un  '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asignarVariable ::= VAR ID ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asignarVariable ::= VAR ID error NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un  '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignarVariable ::= VAR error ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // asignarVariable ::= ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asignarVariable ::= ID ASIGNACION PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" No se asigno un valor a la variable."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // asignarVariable ::= ID NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // asignarVariable ::= VAR ID PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '=."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // asignarVariable ::= VAR ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // asignarVariable ::= VAR ID ASIGNACION PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" No se asigno un valor a la variable."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asignarVariable ::= VAR ID NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // asignarVariable ::= ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NUMID ::= INVNUMERO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NUMID ::= NUMERO INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NUMID ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NUMID ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expFor3 ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un un operador de decremento o cremento."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expFor3 ::= error OPERDECREMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expFor3 ::= ID OPERDECREMENTO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expFor3 ::= ID OPERCREMENTO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expFor2 ::= NUMID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un operador relacional ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor2",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expFor2 ::= NUMID comparador NUMID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor2",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expFor1 ::= VAR ID ASIGNACION INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expFor1 ::= VAR ID error NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expFor1 ::= VAR error ASIGNACION NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expFor1 ::= VAR ID ASIGNACION NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // condicionFor ::= expFor1 PUNTOCOMA expFor2 expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // condicionFor ::= expFor1 PUNTOCOMA PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el segundo parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condicionFor ::= expFor1 expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condicionFor ::= PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el primer parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el tercer parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condicionFor ::= expFor1 PUNTOCOMA expFor2 error expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicionFor ::= expFor1 error expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentenciaFor ::= FOR PARENTESIS_A condicionFor error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentenciaFor ::= FOR error condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentenciaFor ::= FOR PARENTESIS_A condicionFor error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentenciaFor ::= FOR error condicionFor PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaDeclare ::= DECLARE PAGE ID error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaDeclare ::= DECLARE PAGE error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentenciaDeclare ::= DECLARE error ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'PAGE'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpoTabla ::= STRING COMA cuerpoTabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",54, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpoTabla ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",54, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tabla ::= TABLE PARENTESIS_A STRING COMA LLAVE_A TR LLAVE_A cuerpoTabla LLAVE_C LLAVE_C COMA LLAVE_A TR LLAVE_A cuerpoTabla LLAVE_C LLAVE_C COMA LLAVE_A TR LLAVE_A cuerpoTabla LLAVE_C LLAVE_C PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",53, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-24)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tabla ::= TABLE PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",53, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lista ::= LIST PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",65, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // llamarFuncion ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",60, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // llamarFuncion ::= ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",60, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // funciones4 ::= inHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones4",64, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // funciones3 ::= Remove 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // funciones3 ::= RClass 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // funciones3 ::= AClass 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // funciones3 ::= RChild 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // funciones3 ::= getAtt 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // funciones3 ::= beforeChild 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funciones3 ::= Child 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funciones3 ::= ChildText 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // funciones2 ::= optSelect 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones2",62, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // funciones2 ::= setHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones2",62, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // funciones ::= funciones4 PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",61, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funciones ::= funciones2 PARENTESIS_A STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",61, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funciones ::= funciones3 PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",61, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // crearElemento ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("crearElemento",59, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // obtenerElemento ::= docGetElemClass PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",58, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // obtenerElemento ::= docGetElemID PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",58, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // consola ::= CONSOL PARENTESIS_A NUMIDSTR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("consola",57, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpo ::= cuerpo lista 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpo ::= lista 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cuerpo ::= cuerpo llamarFuncion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpo ::= llamarFuncion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cuerpo ::= cuerpo crearElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpo ::= crearElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpo ::= cuerpo obtenerElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpo ::= obtenerElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpo ::= cuerpo consola 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo ::= consola 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpo ::= cuerpo tabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpo ::= tabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpo ::= cuerpo funcion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpo ::= funcion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo ::= cuerpo asignarVariable 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo ::= asignarVariable 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo ::= cuerpo sentenciaFor 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NI ::= STRING SUMA NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NI ::= NUMERO SUMA STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NI ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NI ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NI ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicionCSS2 ::= COMA STRING DOSPUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING', 'NUMERO' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicionCSS2 ::= COMA STRING NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicionCSS2 ::= COMA DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicionCSS2 ::= STRING DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ',''."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicionCSS ::= 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicionCSS ::= STRING DOSPUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING', 'NUMERO' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicionCSS ::= STRING NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicionCSS ::= DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicionCSS ::= STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicionCSS ::= STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cadena ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",52, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",52, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA error condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaCSS ::= CSS PARENTESIS_A cadena error CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba una ',' despues del primero parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaCSS ::= CSS PARENTESIS_A error COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaCSS ::= CSS error cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaJS ::= JS ID error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaJS ::= JS ID LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaJS ::= JS error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaJS ::= JS ID LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaHTML ::= HTML cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaHTML ::= HTML LLAVE_A cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaHTML ::= LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaHTML ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentenciaHTML ::= HTML LLAVE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentenciaHTML ::= HTML LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentenciaHTML ::= HTML LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentenciaHTML ::= HTML LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentenciasInterior ::= sentenciaCSS sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentenciasInterior ::= sentenciaCSS 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentenciasInterior ::= sentenciaJS sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentenciasInterior ::= sentenciaJS 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // primeraSentencia ::= sentenciaHTML sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primeraSentencia",51, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primeraSentencia ::= sentenciaHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primeraSentencia",51, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciaMain ::= MAIN ID primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentenciaMain ::= MAIN LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentenciaMain ::= ID LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'MAIN'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciaMain ::= MAIN ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba funcion 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciaMain ::= MAIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{};'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error en la estructura del programa."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sentenciaMain sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentenciaMain 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

