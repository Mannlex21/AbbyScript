
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 21 10:13:10 GMT-07:00 2017
//----------------------------------------------------

package mx.edu.ittepic.automatas;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 21 10:13:10 GMT-07:00 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\010\000\002\003\003" +
    "\000\002\003\007\000\002\003\007\000\002\003\007\000" +
    "\002\003\007\000\002\003\007\000\002\003\007\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\010" +
    "\000\002\003\010\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\100\003\000\002" +
    "\100\004\000\002\050\003\000\002\050\004\000\002\050" +
    "\003\000\002\050\004\000\002\050\003\000\002\050\004" +
    "\000\002\051\007\000\002\051\007\000\002\051\007\000" +
    "\002\051\007\000\002\051\006\000\002\051\006\000\002" +
    "\051\006\000\002\051\006\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\017\010\000\002\017\010" +
    "\000\002\017\010\000\002\017\010\000\002\017\010\000" +
    "\002\017\007\000\002\017\006\000\002\017\007\000\002" +
    "\017\007\000\002\017\007\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\052\013\000\002\052\013" +
    "\000\002\052\013\000\002\052\013\000\002\052\013\000" +
    "\002\052\013\000\002\052\013\000\002\052\013\000\002" +
    "\052\012\000\002\052\012\000\002\052\012\000\002\052" +
    "\012\000\002\052\012\000\002\052\012\000\002\052\011" +
    "\000\002\052\011\000\002\052\011\000\002\052\011\000" +
    "\002\052\011\000\002\052\011\000\002\052\011\000\002" +
    "\052\011\000\002\101\003\000\002\101\003\000\002\101" +
    "\004\000\002\101\004\000\002\053\005\000\002\053\006" +
    "\000\002\053\004\000\002\053\004\000\002\053\004\000" +
    "\002\053\002\000\002\067\006\000\002\067\007\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\005\000\002\066\005\000\002\054\007\000" +
    "\002\054\006\000\002\054\006\000\002\054\006\000\002" +
    "\054\006\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\004\000\002\054\007\000\002\054\007\000" +
    "\002\054\007\000\002\054\007\000\002\054\010\000\002" +
    "\013\003\000\002\013\004\000\002\013\003\000\002\013" +
    "\004\000\002\013\003\000\002\013\004\000\002\013\003" +
    "\000\002\013\004\000\002\013\003\000\002\013\004\000" +
    "\002\102\015\000\002\103\007\000\002\103\011\000\002" +
    "\103\010\000\002\103\012\000\002\103\002\000\002\104" +
    "\005\000\002\104\007\000\002\104\006\000\002\104\010" +
    "\000\002\004\010\000\002\004\011\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\021\012\000\002\021\011\000\002\021" +
    "\010\000\002\021\011\000\002\021\011\000\002\021\011" +
    "\000\002\021\011\000\002\021\011\000\002\021\012\000" +
    "\002\021\012\000\002\021\012\000\002\021\012\000\002" +
    "\021\012\000\002\020\007\000\002\020\007\000\002\020" +
    "\007\000\002\020\007\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\022\006\000\002" +
    "\023\005\000\002\023\003\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\057\003" +
    "\000\002\057\003\000\002\057\004\000\002\057\004\000" +
    "\002\005\007\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\056\003\000\002\056\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\004" +
    "\000\002\060\004\000\002\061\003\000\002\061\003\000" +
    "\002\007\004\000\002\007\005\000\002\007\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\015\013\000\002" +
    "\015\011\000\002\015\012\000\002\015\012\000\002\015" +
    "\013\000\002\015\013\000\002\015\013\000\002\015\013" +
    "\000\002\015\013\000\002\015\013\000\002\015\012\000" +
    "\002\015\012\000\002\015\012\000\002\015\012\000\002" +
    "\015\012\000\002\015\012\000\002\015\012\000\002\015" +
    "\012\000\002\015\012\000\002\015\012\000\002\015\012" +
    "\000\002\015\011\000\002\015\011\000\002\015\011\000" +
    "\002\015\011\000\002\015\011\000\002\015\012\000\002" +
    "\015\012\000\002\015\012\000\002\015\012\000\002\015" +
    "\012\000\002\015\012\000\002\015\011\000\002\015\011" +
    "\000\002\015\011\000\002\015\011\000\002\015\011\000" +
    "\002\015\011\000\002\015\011\000\002\015\011\000\002" +
    "\015\011\000\002\015\011\000\002\015\011\000\002\015" +
    "\010\000\002\015\010\000\002\015\010\000\002\015\010" +
    "\000\002\015\010\000\002\016\003\000\002\016\004\000" +
    "\002\070\004\000\002\070\005\000\002\070\004\000\002" +
    "\070\003\000\002\042\015\000\002\042\015\000\002\042" +
    "\015\000\002\042\015\000\002\042\015\000\002\042\015" +
    "\000\002\042\015\000\002\042\015\000\002\042\015\000" +
    "\002\043\005\000\002\043\007\000\002\043\005\000\002" +
    "\043\005\000\002\043\007\000\002\043\007\000\002\044" +
    "\003\000\002\044\003\000\002\027\007\000\002\027\014" +
    "\000\002\027\016\000\002\027\007\000\002\027\006\000" +
    "\002\027\014\000\002\027\014\000\002\027\014\000\002" +
    "\027\014\000\002\027\014\000\002\027\014\000\002\027" +
    "\014\000\002\027\014\000\002\027\014\000\002\027\016" +
    "\000\002\027\016\000\002\027\016\000\002\027\016\000" +
    "\002\027\016\000\002\027\016\000\002\027\016\000\002" +
    "\027\016\000\002\027\016\000\002\027\016\000\002\027" +
    "\016\000\002\027\007\000\002\027\007\000\002\027\007" +
    "\000\002\027\006\000\002\027\006\000\002\027\006\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\003\000\002\035\004\000\002\035" +
    "\003\000\002\045\004\000\002\045\004\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\047\007\000" +
    "\002\047\007\000\002\047\007\000\002\047\007\000\002" +
    "\047\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0303\000\010\003\005\013\006\104\004\001\002\000" +
    "\004\044\u0302\001\002\000\006\002\ufffe\104\u02fd\001\002" +
    "\000\016\002\ufffc\003\042\011\043\021\ufffc\044\046\104" +
    "\041\001\002\000\006\002\000\021\012\001\002\000\004" +
    "\002\011\001\002\000\004\002\001\001\002\000\006\003" +
    "\015\024\014\001\002\000\004\002\uffff\001\002\000\006" +
    "\003\023\104\022\001\002\000\004\104\016\001\002\000" +
    "\004\044\017\001\002\000\004\045\020\001\002\000\004" +
    "\051\021\001\002\000\004\002\uff77\001\002\000\006\003" +
    "\027\044\030\001\002\000\004\044\024\001\002\000\004" +
    "\045\025\001\002\000\004\051\026\001\002\000\004\002" +
    "\uff76\001\002\000\004\045\037\001\002\000\006\003\031" +
    "\045\032\001\002\000\004\051\036\001\002\000\006\003" +
    "\033\051\034\001\002\000\004\002\uff73\001\002\000\006" +
    "\002\uff79\021\012\001\002\000\004\002\uff78\001\002\000" +
    "\004\002\uff74\001\002\000\004\051\040\001\002\000\004" +
    "\002\uff75\001\002\000\010\003\u02e8\011\043\044\u02e9\001" +
    "\002\000\004\044\u02e4\001\002\000\030\003\u02d5\012\066" +
    "\014\055\016\063\044\u02d4\075\061\104\056\123\060\126" +
    "\067\127\051\165\057\001\002\000\024\002\uffe9\003\uffe9" +
    "\010\u022a\021\uffe9\022\u022f\045\uffe9\051\uffe9\104\u0228\110" +
    "\u0229\001\002\000\004\045\u0226\001\002\000\030\011\043" +
    "\012\066\014\055\016\063\044\062\075\061\104\056\123" +
    "\060\126\067\127\051\165\057\001\002\000\006\045\u0223" +
    "\051\u0224\001\002\000\044\002\uff8b\003\uff8b\010\uff8b\012" +
    "\066\014\055\016\063\021\uff8b\022\uff8b\045\uff8b\051\uff8b" +
    "\075\061\104\056\110\uff8b\123\060\126\067\127\051\165" +
    "\057\001\002\000\004\042\u021e\001\002\000\004\045\u021c" +
    "\001\002\000\044\002\uff8d\003\uff8d\010\uff8d\012\066\014" +
    "\055\016\063\021\uff8d\022\uff8d\045\uff8d\051\uff8d\075\061" +
    "\104\056\110\uff8d\123\060\126\067\127\051\165\057\001" +
    "\002\000\044\002\uff85\003\uff85\010\uff85\012\066\014\055" +
    "\016\063\021\uff85\022\uff85\045\uff85\051\uff85\075\061\104" +
    "\056\110\uff85\123\060\126\067\127\051\165\057\001\002" +
    "\000\010\003\u0180\042\u0181\104\u017f\001\002\000\020\003" +
    "\u0159\042\u015a\075\u0158\104\162\106\165\107\163\164\166" +
    "\001\002\000\004\042\u0138\001\002\000\006\003\353\042" +
    "\354\001\002\000\012\104\162\106\165\107\163\164\166" +
    "\001\002\000\024\012\066\014\055\016\063\075\061\104" +
    "\056\123\060\126\067\127\051\165\057\001\002\000\006" +
    "\003\213\042\214\001\002\000\044\002\uff87\003\uff87\010" +
    "\uff87\012\066\014\055\016\063\021\uff87\022\uff87\045\uff87" +
    "\051\uff87\075\061\104\056\110\uff87\123\060\126\067\127" +
    "\051\165\057\001\002\000\044\002\uff89\003\uff89\010\uff89" +
    "\012\066\014\055\016\063\021\uff89\022\uff89\045\uff89\051" +
    "\uff89\075\061\104\056\110\uff89\123\060\126\067\127\051" +
    "\165\057\001\002\000\010\003\160\075\157\104\156\001" +
    "\002\000\006\003\070\042\071\001\002\000\004\106\146" +
    "\001\002\000\006\003\073\106\072\001\002\000\006\003" +
    "\103\043\104\001\002\000\004\043\074\001\002\000\004" +
    "\053\075\001\002\000\004\131\076\001\002\000\004\042" +
    "\077\001\002\000\004\106\100\001\002\000\004\043\101" +
    "\001\002\000\004\051\102\001\002\000\044\002\ufed3\003" +
    "\ufed3\010\ufed3\012\ufed3\014\ufed3\016\ufed3\021\ufed3\022\ufed3" +
    "\045\ufed3\051\ufed3\075\ufed3\104\ufed3\110\ufed3\123\ufed3\126" +
    "\ufed3\127\ufed3\165\ufed3\001\002\000\004\053\140\001\002" +
    "\000\006\003\106\053\105\001\002\000\006\003\114\131" +
    "\115\001\002\000\004\131\107\001\002\000\004\042\110" +
    "\001\002\000\004\106\111\001\002\000\004\043\112\001" +
    "\002\000\004\051\113\001\002\000\044\002\ufed5\003\ufed5" +
    "\010\ufed5\012\ufed5\014\ufed5\016\ufed5\021\ufed5\022\ufed5\045" +
    "\ufed5\051\ufed5\075\ufed5\104\ufed5\110\ufed5\123\ufed5\126\ufed5" +
    "\127\ufed5\165\ufed5\001\002\000\004\042\134\001\002\000" +
    "\006\003\116\042\117\001\002\000\004\106\131\001\002" +
    "\000\006\003\121\106\120\001\002\000\006\003\124\043" +
    "\125\001\002\000\004\043\122\001\002\000\004\051\123" +
    "\001\002\000\044\002\ufed8\003\ufed8\010\ufed8\012\ufed8\014" +
    "\ufed8\016\ufed8\021\ufed8\022\ufed8\045\ufed8\051\ufed8\075\ufed8" +
    "\104\ufed8\110\ufed8\123\ufed8\126\ufed8\127\ufed8\165\ufed8\001" +
    "\002\000\004\051\130\001\002\000\006\003\126\051\127" +
    "\001\002\000\044\002\ufeda\003\ufeda\010\ufeda\012\ufeda\014" +
    "\ufeda\016\ufeda\021\ufeda\022\ufeda\045\ufeda\051\ufeda\075\ufeda" +
    "\104\ufeda\110\ufeda\123\ufeda\126\ufeda\127\ufeda\165\ufeda\001" +
    "\002\000\044\002\ufede\003\ufede\010\ufede\012\ufede\014\ufede" +
    "\016\ufede\021\ufede\022\ufede\045\ufede\051\ufede\075\ufede\104" +
    "\ufede\110\ufede\123\ufede\126\ufede\127\ufede\165\ufede\001\002" +
    "\000\044\002\ufed9\003\ufed9\010\ufed9\012\ufed9\014\ufed9\016" +
    "\ufed9\021\ufed9\022\ufed9\045\ufed9\051\ufed9\075\ufed9\104\ufed9" +
    "\110\ufed9\123\ufed9\126\ufed9\127\ufed9\165\ufed9\001\002\000" +
    "\004\043\132\001\002\000\004\051\133\001\002\000\044" +
    "\002\ufed7\003\ufed7\010\ufed7\012\ufed7\014\ufed7\016\ufed7\021" +
    "\ufed7\022\ufed7\045\ufed7\051\ufed7\075\ufed7\104\ufed7\110\ufed7" +
    "\123\ufed7\126\ufed7\127\ufed7\165\ufed7\001\002\000\004\106" +
    "\135\001\002\000\004\043\136\001\002\000\004\051\137" +
    "\001\002\000\044\002\ufed6\003\ufed6\010\ufed6\012\ufed6\014" +
    "\ufed6\016\ufed6\021\ufed6\022\ufed6\045\ufed6\051\ufed6\075\ufed6" +
    "\104\ufed6\110\ufed6\123\ufed6\126\ufed6\127\ufed6\165\ufed6\001" +
    "\002\000\004\131\141\001\002\000\004\042\142\001\002" +
    "\000\004\106\143\001\002\000\004\043\144\001\002\000" +
    "\004\051\145\001\002\000\044\002\ufed4\003\ufed4\010\ufed4" +
    "\012\ufed4\014\ufed4\016\ufed4\021\ufed4\022\ufed4\045\ufed4\051" +
    "\ufed4\075\ufed4\104\ufed4\110\ufed4\123\ufed4\126\ufed4\127\ufed4" +
    "\165\ufed4\001\002\000\004\043\147\001\002\000\004\053" +
    "\150\001\002\000\004\131\151\001\002\000\004\042\152" +
    "\001\002\000\004\106\153\001\002\000\004\043\154\001" +
    "\002\000\004\051\155\001\002\000\044\002\ufed2\003\ufed2" +
    "\010\ufed2\012\ufed2\014\ufed2\016\ufed2\021\ufed2\022\ufed2\045" +
    "\ufed2\051\ufed2\075\ufed2\104\ufed2\110\ufed2\123\ufed2\126\ufed2" +
    "\127\ufed2\165\ufed2\001\002\000\020\003\176\051\177\075" +
    "\175\104\162\106\165\107\163\164\166\001\002\000\012" +
    "\104\162\106\165\107\163\164\166\001\002\000\004\075" +
    "\161\001\002\000\012\104\162\106\165\107\163\164\166" +
    "\001\002\000\010\003\uff3b\043\uff3b\051\uff3b\001\002\000" +
    "\012\003\uff3c\043\uff3c\051\uff3c\164\171\001\002\000\004" +
    "\051\170\001\002\000\010\003\uff3a\043\uff3a\051\uff3a\001" +
    "\002\000\004\107\167\001\002\000\010\003\uff38\043\uff38" +
    "\051\uff38\001\002\000\044\002\uff46\003\uff46\010\uff46\012" +
    "\uff46\014\uff46\016\uff46\021\uff46\022\uff46\045\uff46\051\uff46" +
    "\075\uff46\104\uff46\110\uff46\123\uff46\126\uff46\127\uff46\165" +
    "\uff46\001\002\000\010\003\uff39\043\uff39\051\uff39\001\002" +
    "\000\004\051\173\001\002\000\044\002\uff4b\003\uff4b\010" +
    "\uff4b\012\uff4b\014\uff4b\016\uff4b\021\uff4b\022\uff4b\045\uff4b" +
    "\051\uff4b\075\uff4b\104\uff4b\110\uff4b\123\uff4b\126\uff4b\127" +
    "\uff4b\165\uff4b\001\002\000\004\051\210\001\002\000\016" +
    "\003\203\051\204\104\162\106\165\107\163\164\166\001" +
    "\002\000\012\104\162\106\165\107\163\164\166\001\002" +
    "\000\044\002\uff4a\003\uff4a\010\uff4a\012\uff4a\014\uff4a\016" +
    "\uff4a\021\uff4a\022\uff4a\045\uff4a\051\uff4a\075\uff4a\104\uff4a" +
    "\110\uff4a\123\uff4a\126\uff4a\127\uff4a\165\uff4a\001\002\000" +
    "\004\051\201\001\002\000\044\002\uff45\003\uff45\010\uff45" +
    "\012\uff45\014\uff45\016\uff45\021\uff45\022\uff45\045\uff45\051" +
    "\uff45\075\uff45\104\uff45\110\uff45\123\uff45\126\uff45\127\uff45" +
    "\165\uff45\001\002\000\006\003\206\051\207\001\002\000" +
    "\004\051\205\001\002\000\044\002\uff4c\003\uff4c\010\uff4c" +
    "\012\uff4c\014\uff4c\016\uff4c\021\uff4c\022\uff4c\045\uff4c\051" +
    "\uff4c\075\uff4c\104\uff4c\110\uff4c\123\uff4c\126\uff4c\127\uff4c" +
    "\165\uff4c\001\002\000\044\002\uff44\003\uff44\010\uff44\012" +
    "\uff44\014\uff44\016\uff44\021\uff44\022\uff44\045\uff44\051\uff44" +
    "\075\uff44\104\uff44\110\uff44\123\uff44\126\uff44\127\uff44\165" +
    "\uff44\001\002\000\044\002\uff43\003\uff43\010\uff43\012\uff43" +
    "\014\uff43\016\uff43\021\uff43\022\uff43\045\uff43\051\uff43\075" +
    "\uff43\104\uff43\110\uff43\123\uff43\126\uff43\127\uff43\165\uff43" +
    "\001\002\000\044\002\uff4f\003\uff4f\010\uff4f\012\uff4f\014" +
    "\uff4f\016\uff4f\021\uff4f\022\uff4f\045\uff4f\051\uff4f\075\uff4f" +
    "\104\uff4f\110\uff4f\123\uff4f\126\uff4f\127\uff4f\165\uff4f\001" +
    "\002\000\044\002\uff4d\003\uff4d\010\uff4d\012\uff4d\014\uff4d" +
    "\016\uff4d\021\uff4d\022\uff4d\045\uff4d\051\uff4d\075\uff4d\104" +
    "\uff4d\110\uff4d\123\uff4d\126\uff4d\127\uff4d\165\uff4d\001\002" +
    "\000\024\002\uff88\003\uff88\010\uff88\021\uff88\022\uff88\045" +
    "\uff88\051\uff88\104\uff88\110\uff88\001\002\000\024\002\uff86" +
    "\003\uff86\010\uff86\021\uff86\022\uff86\045\uff86\051\uff86\104" +
    "\uff86\110\uff86\001\002\000\006\012\215\051\220\001\002" +
    "\000\010\012\215\043\217\051\220\001\002\000\006\003" +
    "\331\104\330\001\002\000\014\003\310\051\311\104\255" +
    "\107\256\164\260\001\002\000\004\044\304\001\002\000" +
    "\010\104\255\107\256\164\260\001\002\000\006\003\222" +
    "\043\223\001\002\000\004\044\246\001\002\000\006\003" +
    "\224\044\225\001\002\000\026\012\066\014\055\016\063" +
    "\045\241\075\061\104\056\123\060\126\067\127\051\165" +
    "\057\001\002\000\030\003\227\012\066\014\055\016\063" +
    "\045\226\075\061\104\056\123\060\126\067\127\051\165" +
    "\057\001\002\000\006\003\237\051\240\001\002\000\004" +
    "\051\236\001\002\000\006\003\231\045\232\001\002\000" +
    "\004\051\235\001\002\000\006\003\233\051\234\001\002" +
    "\000\044\002\uff66\003\uff66\010\uff66\012\uff66\014\uff66\016" +
    "\uff66\021\uff66\022\uff66\045\uff66\051\uff66\075\uff66\104\uff66" +
    "\110\uff66\123\uff66\126\uff66\127\uff66\165\uff66\001\002\000" +
    "\044\002\uff72\003\uff72\010\uff72\012\uff72\014\uff72\016\uff72" +
    "\021\uff72\022\uff72\045\uff72\051\uff72\075\uff72\104\uff72\110" +
    "\uff72\123\uff72\126\uff72\127\uff72\165\uff72\001\002\000\044" +
    "\002\uff67\003\uff67\010\uff67\012\uff67\014\uff67\016\uff67\021" +
    "\uff67\022\uff67\045\uff67\051\uff67\075\uff67\104\uff67\110\uff67" +
    "\123\uff67\126\uff67\127\uff67\165\uff67\001\002\000\044\002" +
    "\uff6c\003\uff6c\010\uff6c\012\uff6c\014\uff6c\016\uff6c\021\uff6c" +
    "\022\uff6c\045\uff6c\051\uff6c\075\uff6c\104\uff6c\110\uff6c\123" +
    "\uff6c\126\uff6c\127\uff6c\165\uff6c\001\002\000\044\002\uff6b" +
    "\003\uff6b\010\uff6b\012\uff6b\014\uff6b\016\uff6b\021\uff6b\022" +
    "\uff6b\045\uff6b\051\uff6b\075\uff6b\104\uff6b\110\uff6b\123\uff6b" +
    "\126\uff6b\127\uff6b\165\uff6b\001\002\000\044\002\uff71\003" +
    "\uff71\010\uff71\012\uff71\014\uff71\016\uff71\021\uff71\022\uff71" +
    "\045\uff71\051\uff71\075\uff71\104\uff71\110\uff71\123\uff71\126" +
    "\uff71\127\uff71\165\uff71\001\002\000\004\051\245\001\002" +
    "\000\004\045\243\001\002\000\004\051\244\001\002\000" +
    "\044\002\uff68\003\uff68\010\uff68\012\uff68\014\uff68\016\uff68" +
    "\021\uff68\022\uff68\045\uff68\051\uff68\075\uff68\104\uff68\110" +
    "\uff68\123\uff68\126\uff68\127\uff68\165\uff68\001\002\000\044" +
    "\002\uff6d\003\uff6d\010\uff6d\012\uff6d\014\uff6d\016\uff6d\021" +
    "\uff6d\022\uff6d\045\uff6d\051\uff6d\075\uff6d\104\uff6d\110\uff6d" +
    "\123\uff6d\126\uff6d\127\uff6d\165\uff6d\001\002\000\026\012" +
    "\066\014\055\016\063\045\247\075\061\104\056\123\060" +
    "\126\067\127\051\165\057\001\002\000\004\051\253\001" +
    "\002\000\004\045\251\001\002\000\004\051\252\001\002" +
    "\000\044\002\uff69\003\uff69\010\uff69\012\uff69\014\uff69\016" +
    "\uff69\021\uff69\022\uff69\045\uff69\051\uff69\075\uff69\104\uff69" +
    "\110\uff69\123\uff69\126\uff69\127\uff69\165\uff69\001\002\000" +
    "\044\002\uff6e\003\uff6e\010\uff6e\012\uff6e\014\uff6e\016\uff6e" +
    "\021\uff6e\022\uff6e\045\uff6e\051\uff6e\075\uff6e\104\uff6e\110" +
    "\uff6e\123\uff6e\126\uff6e\127\uff6e\165\uff6e\001\002\000\004" +
    "\051\274\001\002\000\026\003\uff53\051\uff53\062\uff53\063" +
    "\uff53\064\uff53\065\uff53\066\uff53\067\uff53\070\uff53\104\uff53" +
    "\001\002\000\030\003\uff52\051\uff52\062\uff52\063\uff52\064" +
    "\uff52\065\uff52\066\uff52\067\uff52\070\uff52\104\uff52\164\273" +
    "\001\002\000\026\003\uff58\051\uff58\062\265\063\262\064" +
    "\267\065\263\066\264\067\270\070\266\104\uff58\001\002" +
    "\000\004\107\261\001\002\000\026\003\uff50\051\uff50\062" +
    "\uff50\063\uff50\064\uff50\065\uff50\066\uff50\067\uff50\070\uff50" +
    "\104\uff50\001\002\000\010\104\uff2c\107\uff2c\164\uff2c\001" +
    "\002\000\010\104\uff2a\107\uff2a\164\uff2a\001\002\000\010" +
    "\104\uff29\107\uff29\164\uff29\001\002\000\010\104\uff2d\107" +
    "\uff2d\164\uff2d\001\002\000\010\104\uff27\107\uff27\164\uff27" +
    "\001\002\000\010\104\uff2b\107\uff2b\164\uff2b\001\002\000" +
    "\010\104\uff28\107\uff28\164\uff28\001\002\000\010\104\255" +
    "\107\256\164\260\001\002\000\010\003\uff59\051\uff59\104" +
    "\uff59\001\002\000\026\003\uff51\051\uff51\062\uff51\063\uff51" +
    "\064\uff51\065\uff51\066\uff51\067\uff51\070\uff51\104\uff51\001" +
    "\002\000\006\003\276\104\275\001\002\000\010\003\302" +
    "\102\303\103\301\001\002\000\004\102\300\001\002\000" +
    "\006\003\uff61\043\uff61\001\002\000\006\003\uff55\043\uff55" +
    "\001\002\000\006\003\uff57\043\uff57\001\002\000\006\003" +
    "\uff54\043\uff54\001\002\000\006\003\uff56\043\uff56\001\002" +
    "\000\004\045\305\001\002\000\004\051\306\001\002\000" +
    "\044\002\uff70\003\uff70\010\uff70\012\uff70\014\uff70\016\uff70" +
    "\021\uff70\022\uff70\045\uff70\051\uff70\075\uff70\104\uff70\110" +
    "\uff70\123\uff70\126\uff70\127\uff70\165\uff70\001\002\000\004" +
    "\051\326\001\002\000\010\104\255\107\256\164\260\001" +
    "\002\000\012\051\313\104\255\107\256\164\260\001\002" +
    "\000\010\003\315\051\316\104\275\001\002\000\006\003" +
    "\276\104\275\001\002\000\006\003\uff5f\043\uff5f\001\002" +
    "\000\010\003\276\102\300\104\275\001\002\000\006\003" +
    "\320\104\275\001\002\000\006\003\uff5e\043\uff5e\001\002" +
    "\000\010\003\uff62\043\uff62\102\300\001\002\000\006\003" +
    "\uff65\043\uff65\001\002\000\006\003\uff63\043\uff63\001\002" +
    "\000\004\051\324\001\002\000\006\003\276\104\275\001" +
    "\002\000\006\003\uff64\043\uff64\001\002\000\006\003\276" +
    "\104\275\001\002\000\006\003\uff60\043\uff60\001\002\000" +
    "\006\003\335\075\334\001\002\000\004\075\332\001\002" +
    "\000\004\107\333\001\002\000\014\003\uff5c\051\uff5c\104" +
    "\uff5c\107\uff5c\164\uff5c\001\002\000\006\107\337\164\340" +
    "\001\002\000\004\107\336\001\002\000\014\003\uff5b\051" +
    "\uff5b\104\uff5b\107\uff5b\164\uff5b\001\002\000\014\003\uff5d" +
    "\051\uff5d\104\uff5d\107\uff5d\164\uff5d\001\002\000\014\003" +
    "\uff5a\051\uff5a\104\uff5a\107\uff5a\164\uff5a\001\002\000\004" +
    "\043\342\001\002\000\004\044\343\001\002\000\026\012" +
    "\066\014\055\016\063\045\344\075\061\104\056\123\060" +
    "\126\067\127\051\165\057\001\002\000\004\051\350\001" +
    "\002\000\004\045\346\001\002\000\004\051\347\001\002" +
    "\000\044\002\uff6a\003\uff6a\010\uff6a\012\uff6a\014\uff6a\016" +
    "\uff6a\021\uff6a\022\uff6a\045\uff6a\051\uff6a\075\uff6a\104\uff6a" +
    "\110\uff6a\123\uff6a\126\uff6a\127\uff6a\165\uff6a\001\002\000" +
    "\044\002\uff6f\003\uff6f\010\uff6f\012\uff6f\014\uff6f\016\uff6f" +
    "\021\uff6f\022\uff6f\045\uff6f\051\uff6f\075\uff6f\104\uff6f\110" +
    "\uff6f\123\uff6f\126\uff6f\127\uff6f\165\uff6f\001\002\000\004" +
    "\051\352\001\002\000\044\002\uff47\003\uff47\010\uff47\012" +
    "\uff47\014\uff47\016\uff47\021\uff47\022\uff47\045\uff47\051\uff47" +
    "\075\uff47\104\uff47\110\uff47\123\uff47\126\uff47\127\uff47\165" +
    "\uff47\001\002\000\004\106\u012e\001\002\000\006\003\356" +
    "\106\355\001\002\000\006\003\370\043\371\001\002\000" +
    "\004\043\357\001\002\000\004\053\360\001\002\000\004" +
    "\137\361\001\002\000\004\042\362\001\002\000\004\106" +
    "\363\001\002\000\004\111\364\001\002\000\004\106\365" +
    "\001\002\000\004\043\366\001\002\000\004\051\367\001" +
    "\002\000\044\002\ufec8\003\ufec8\010\ufec8\012\ufec8\014\ufec8" +
    "\016\ufec8\021\ufec8\022\ufec8\045\ufec8\051\ufec8\075\ufec8\104" +
    "\ufec8\110\ufec8\123\ufec8\126\ufec8\127\ufec8\165\ufec8\001\002" +
    "\000\004\053\u0126\001\002\000\006\003\373\053\372\001" +
    "\002\000\006\003\u0103\137\u0104\001\002\000\004\137\374" +
    "\001\002\000\004\042\375\001\002\000\004\106\376\001" +
    "\002\000\004\111\377\001\002\000\004\106\u0100\001\002" +
    "\000\004\043\u0101\001\002\000\004\051\u0102\001\002\000" +
    "\044\002\ufeca\003\ufeca\010\ufeca\012\ufeca\014\ufeca\016\ufeca" +
    "\021\ufeca\022\ufeca\045\ufeca\051\ufeca\075\ufeca\104\ufeca\110" +
    "\ufeca\123\ufeca\126\ufeca\127\ufeca\165\ufeca\001\002\000\004" +
    "\042\u0120\001\002\000\006\003\u0105\042\u0106\001\002\000" +
    "\004\106\u011b\001\002\000\006\003\u0108\106\u0107\001\002" +
    "\000\006\003\u010e\111\u010d\001\002\000\004\111\u0109\001" +
    "\002\000\004\106\u010a\001\002\000\004\043\u010b\001\002" +
    "\000\004\051\u010c\001\002\000\044\002\ufecd\003\ufecd\010" +
    "\ufecd\012\ufecd\014\ufecd\016\ufecd\021\ufecd\022\ufecd\045\ufecd" +
    "\051\ufecd\075\ufecd\104\ufecd\110\ufecd\123\ufecd\126\ufecd\127" +
    "\ufecd\165\ufecd\001\002\000\006\003\u0113\106\u0112\001\002" +
    "\000\004\106\u010f\001\002\000\004\043\u0110\001\002\000" +
    "\004\051\u0111\001\002\000\044\002\ufece\003\ufece\010\ufece" +
    "\012\ufece\014\ufece\016\ufece\021\ufece\022\ufece\045\ufece\051" +
    "\ufece\075\ufece\104\ufece\110\ufece\123\ufece\126\ufece\127\ufece" +
    "\165\ufece\001\002\000\006\003\u0116\043\u0117\001\002\000" +
    "\004\043\u0114\001\002\000\004\051\u0115\001\002\000\044" +
    "\002\ufecf\003\ufecf\010\ufecf\012\ufecf\014\ufecf\016\ufecf\021" +
    "\ufecf\022\ufecf\045\ufecf\051\ufecf\075\ufecf\104\ufecf\110\ufecf" +
    "\123\ufecf\126\ufecf\127\ufecf\165\ufecf\001\002\000\004\051" +
    "\u011a\001\002\000\006\003\u0118\051\u0119\001\002\000\044" +
    "\002\ufed1\003\ufed1\010\ufed1\012\ufed1\014\ufed1\016\ufed1\021" +
    "\ufed1\022\ufed1\045\ufed1\051\ufed1\075\ufed1\104\ufed1\110\ufed1" +
    "\123\ufed1\126\ufed1\127\ufed1\165\ufed1\001\002\000\044\002" +
    "\ufedd\003\ufedd\010\ufedd\012\ufedd\014\ufedd\016\ufedd\021\ufedd" +
    "\022\ufedd\045\ufedd\051\ufedd\075\ufedd\104\ufedd\110\ufedd\123" +
    "\ufedd\126\ufedd\127\ufedd\165\ufedd\001\002\000\044\002\ufed0" +
    "\003\ufed0\010\ufed0\012\ufed0\014\ufed0\016\ufed0\021\ufed0\022" +
    "\ufed0\045\ufed0\051\ufed0\075\ufed0\104\ufed0\110\ufed0\123\ufed0" +
    "\126\ufed0\127\ufed0\165\ufed0\001\002\000\004\111\u011c\001" +
    "\002\000\004\106\u011d\001\002\000\004\043\u011e\001\002" +
    "\000\004\051\u011f\001\002\000\044\002\ufecc\003\ufecc\010" +
    "\ufecc\012\ufecc\014\ufecc\016\ufecc\021\ufecc\022\ufecc\045\ufecc" +
    "\051\ufecc\075\ufecc\104\ufecc\110\ufecc\123\ufecc\126\ufecc\127" +
    "\ufecc\165\ufecc\001\002\000\004\106\u0121\001\002\000\004" +
    "\111\u0122\001\002\000\004\106\u0123\001\002\000\004\043" +
    "\u0124\001\002\000\004\051\u0125\001\002\000\044\002\ufecb" +
    "\003\ufecb\010\ufecb\012\ufecb\014\ufecb\016\ufecb\021\ufecb\022" +
    "\ufecb\045\ufecb\051\ufecb\075\ufecb\104\ufecb\110\ufecb\123\ufecb" +
    "\126\ufecb\127\ufecb\165\ufecb\001\002\000\004\137\u0127\001" +
    "\002\000\004\042\u0128\001\002\000\004\106\u0129\001\002" +
    "\000\004\111\u012a\001\002\000\004\106\u012b\001\002\000" +
    "\004\043\u012c\001\002\000\004\051\u012d\001\002\000\044" +
    "\002\ufec9\003\ufec9\010\ufec9\012\ufec9\014\ufec9\016\ufec9\021" +
    "\ufec9\022\ufec9\045\ufec9\051\ufec9\075\ufec9\104\ufec9\110\ufec9" +
    "\123\ufec9\126\ufec9\127\ufec9\165\ufec9\001\002\000\004\043" +
    "\u012f\001\002\000\004\053\u0130\001\002\000\004\137\u0131" +
    "\001\002\000\004\042\u0132\001\002\000\004\106\u0133\001" +
    "\002\000\004\111\u0134\001\002\000\004\106\u0135\001\002" +
    "\000\004\043\u0136\001\002\000\004\051\u0137\001\002\000" +
    "\044\002\ufec7\003\ufec7\010\ufec7\012\ufec7\014\ufec7\016\ufec7" +
    "\021\ufec7\022\ufec7\045\ufec7\051\ufec7\075\ufec7\104\ufec7\110" +
    "\ufec7\123\ufec7\126\ufec7\127\ufec7\165\ufec7\001\002\000\004" +
    "\106\u0139\001\002\000\004\111\u013a\001\002\000\006\044" +
    "\u013c\111\uff7e\001\002\000\004\111\u0151\001\002\000\004" +
    "\166\u013d\001\002\000\004\044\u013e\001\002\000\006\045" +
    "\u0141\167\u0140\001\002\000\004\045\u014d\001\002\000\004" +
    "\044\u0145\001\002\000\004\045\u0142\001\002\000\006\043" +
    "\uff82\111\uff82\001\002\000\010\043\uff7e\044\u013c\111\uff7e" +
    "\001\002\000\006\043\uff81\111\uff81\001\002\000\006\045" +
    "\u0147\106\u0146\001\002\000\004\045\u014a\001\002\000\006" +
    "\045\uff7d\111\u0148\001\002\000\004\167\u0140\001\002\000" +
    "\004\045\uff7c\001\002\000\006\045\uff7b\111\u014b\001\002" +
    "\000\004\167\u0140\001\002\000\004\045\uff7a\001\002\000" +
    "\004\045\u014e\001\002\000\006\043\uff80\111\uff80\001\002" +
    "\000\010\043\uff7e\044\u013c\111\uff7e\001\002\000\006\043" +
    "\uff7f\111\uff7f\001\002\000\006\044\u013c\111\uff7e\001\002" +
    "\000\004\111\u0153\001\002\000\006\043\uff7e\044\u013c\001" +
    "\002\000\004\043\u0155\001\002\000\004\051\u0156\001\002" +
    "\000\044\002\uff83\003\uff83\010\uff83\012\uff83\014\uff83\016" +
    "\uff83\021\uff83\022\uff83\045\uff83\051\uff83\075\uff83\104\uff83" +
    "\110\uff83\123\uff83\126\uff83\127\uff83\165\uff83\001\002\000" +
    "\004\051\u017e\001\002\000\016\003\u0179\051\u017a\104\162" +
    "\106\165\107\163\164\166\001\002\000\016\043\u0171\075" +
    "\u016f\104\u016d\106\165\107\163\164\166\001\002\000\010" +
    "\003\u015c\043\u015e\104\u015b\001\002\000\016\003\ufef6\042" +
    "\ufef6\043\ufef6\044\ufef6\104\u0167\111\u0168\001\002\000\004" +
    "\051\u0166\001\002\000\006\003\u0161\043\u0162\001\002\000" +
    "\006\003\u015f\051\u0160\001\002\000\044\002\ufec3\003\ufec3" +
    "\010\ufec3\012\ufec3\014\ufec3\016\ufec3\021\ufec3\022\ufec3\045" +
    "\ufec3\051\ufec3\075\ufec3\104\ufec3\110\ufec3\123\ufec3\126\ufec3" +
    "\127\ufec3\165\ufec3\001\002\000\044\002\ufedb\003\ufedb\010" +
    "\ufedb\012\ufedb\014\ufedb\016\ufedb\021\ufedb\022\ufedb\045\ufedb" +
    "\051\ufedb\075\ufedb\104\ufedb\110\ufedb\123\ufedb\126\ufedb\127" +
    "\ufedb\165\ufedb\001\002\000\004\051\u0165\001\002\000\006" +
    "\003\u0163\051\u0164\001\002\000\044\002\ufec6\003\ufec6\010" +
    "\ufec6\012\ufec6\014\ufec6\016\ufec6\021\ufec6\022\ufec6\045\ufec6" +
    "\051\ufec6\075\ufec6\104\ufec6\110\ufec6\123\ufec6\126\ufec6\127" +
    "\ufec6\165\ufec6\001\002\000\044\002\ufedc\003\ufedc\010\ufedc" +
    "\012\ufedc\014\ufedc\016\ufedc\021\ufedc\022\ufedc\045\ufedc\051" +
    "\ufedc\075\ufedc\104\ufedc\110\ufedc\123\ufedc\126\ufedc\127\ufedc" +
    "\165\ufedc\001\002\000\044\002\ufec5\003\ufec5\010\ufec5\012" +
    "\ufec5\014\ufec5\016\ufec5\021\ufec5\022\ufec5\045\ufec5\051\ufec5" +
    "\075\ufec5\104\ufec5\110\ufec5\123\ufec5\126\ufec5\127\ufec5\165" +
    "\ufec5\001\002\000\044\002\ufec2\003\ufec2\010\ufec2\012\ufec2" +
    "\014\ufec2\016\ufec2\021\ufec2\022\ufec2\045\ufec2\051\ufec2\075" +
    "\ufec2\104\ufec2\110\ufec2\123\ufec2\126\ufec2\127\ufec2\165\ufec2" +
    "\001\002\000\004\104\u015b\001\002\000\014\003\ufef1\042" +
    "\ufef1\043\ufef1\044\ufef1\104\u016a\001\002\000\012\003\ufef5" +
    "\042\ufef5\043\ufef5\044\ufef5\001\002\000\014\003\ufef4\042" +
    "\ufef4\043\ufef4\044\ufef4\104\u015b\001\002\000\012\003\ufef3" +
    "\042\ufef3\043\ufef3\044\ufef3\001\002\000\012\003\ufef2\042" +
    "\ufef2\043\ufef2\044\ufef2\001\002\000\012\043\ufef6\051\uff3b" +
    "\104\u0167\111\u0168\001\002\000\004\051\u0177\001\002\000" +
    "\012\104\162\106\165\107\163\164\166\001\002\000\004" +
    "\043\u0173\001\002\000\004\051\u0172\001\002\000\044\002" +
    "\ufec1\003\ufec1\010\ufec1\012\ufec1\014\ufec1\016\ufec1\021\ufec1" +
    "\022\ufec1\045\ufec1\051\ufec1\075\ufec1\104\ufec1\110\ufec1\123" +
    "\ufec1\126\ufec1\127\ufec1\165\ufec1\001\002\000\004\051\u0174" +
    "\001\002\000\044\002\ufec4\003\ufec4\010\ufec4\012\ufec4\014" +
    "\ufec4\016\ufec4\021\ufec4\022\ufec4\045\ufec4\051\ufec4\075\ufec4" +
    "\104\ufec4\110\ufec4\123\ufec4\126\ufec4\127\ufec4\165\ufec4\001" +
    "\002\000\004\051\u0176\001\002\000\044\002\uff42\003\uff42" +
    "\010\uff42\012\uff42\014\uff42\016\uff42\021\uff42\022\uff42\045" +
    "\uff42\051\uff42\075\uff42\104\uff42\110\uff42\123\uff42\126\uff42" +
    "\127\uff42\165\uff42\001\002\000\044\002\uff3f\003\uff3f\010" +
    "\uff3f\012\uff3f\014\uff3f\016\uff3f\021\uff3f\022\uff3f\045\uff3f" +
    "\051\uff3f\075\uff3f\104\uff3f\110\uff3f\123\uff3f\126\uff3f\127" +
    "\uff3f\165\uff3f\001\002\000\006\003\u017c\051\u017d\001\002" +
    "\000\004\051\u017b\001\002\000\044\002\uff48\003\uff48\010" +
    "\uff48\012\uff48\014\uff48\016\uff48\021\uff48\022\uff48\045\uff48" +
    "\051\uff48\075\uff48\104\uff48\110\uff48\123\uff48\126\uff48\127" +
    "\uff48\165\uff48\001\002\000\044\002\uff41\003\uff41\010\uff41" +
    "\012\uff41\014\uff41\016\uff41\021\uff41\022\uff41\045\uff41\051" +
    "\uff41\075\uff41\104\uff41\110\uff41\123\uff41\126\uff41\127\uff41" +
    "\165\uff41\001\002\000\044\002\uff40\003\uff40\010\uff40\012" +
    "\uff40\014\uff40\016\uff40\021\uff40\022\uff40\045\uff40\051\uff40" +
    "\075\uff40\104\uff40\110\uff40\123\uff40\126\uff40\127\uff40\165" +
    "\uff40\001\002\000\044\002\uff4e\003\uff4e\010\uff4e\012\uff4e" +
    "\014\uff4e\016\uff4e\021\uff4e\022\uff4e\045\uff4e\051\uff4e\075" +
    "\uff4e\104\uff4e\110\uff4e\123\uff4e\126\uff4e\127\uff4e\165\uff4e" +
    "\001\002\000\044\002\uff49\003\uff49\010\uff49\012\uff49\014" +
    "\uff49\016\uff49\021\uff49\022\uff49\045\uff49\051\uff49\075\uff49" +
    "\104\uff49\110\uff49\123\uff49\126\uff49\127\uff49\165\uff49\001" +
    "\002\000\012\003\u01a2\042\u01a4\043\u01a3\104\u015b\001\002" +
    "\000\004\042\u0191\001\002\000\006\043\u0183\104\u015b\001" +
    "\002\000\004\043\u018a\001\002\000\004\044\u0184\001\002" +
    "\000\026\012\066\014\055\016\063\045\u0185\075\061\104" +
    "\056\123\060\126\067\127\051\165\057\001\002\000\004" +
    "\051\u0189\001\002\000\004\045\u0187\001\002\000\004\051" +
    "\u0188\001\002\000\044\002\uff11\003\uff11\010\uff11\012\uff11" +
    "\014\uff11\016\uff11\021\uff11\022\uff11\045\uff11\051\uff11\075" +
    "\uff11\104\uff11\110\uff11\123\uff11\126\uff11\127\uff11\165\uff11" +
    "\001\002\000\044\002\ufefb\003\ufefb\010\ufefb\012\ufefb\014" +
    "\ufefb\016\ufefb\021\ufefb\022\ufefb\045\ufefb\051\ufefb\075\ufefb" +
    "\104\ufefb\110\ufefb\123\ufefb\126\ufefb\127\ufefb\165\ufefb\001" +
    "\002\000\004\044\u018b\001\002\000\026\012\066\014\055" +
    "\016\063\045\u018c\075\061\104\056\123\060\126\067\127" +
    "\051\165\057\001\002\000\004\051\u0190\001\002\000\004" +
    "\045\u018e\001\002\000\004\051\u018f\001\002\000\044\002" +
    "\uff1c\003\uff1c\010\uff1c\012\uff1c\014\uff1c\016\uff1c\021\uff1c" +
    "\022\uff1c\045\uff1c\051\uff1c\075\uff1c\104\uff1c\110\uff1c\123" +
    "\uff1c\126\uff1c\127\uff1c\165\uff1c\001\002\000\044\002\uff06" +
    "\003\uff06\010\uff06\012\uff06\014\uff06\016\uff06\021\uff06\022" +
    "\uff06\045\uff06\051\uff06\075\uff06\104\uff06\110\uff06\123\uff06" +
    "\126\uff06\127\uff06\165\uff06\001\002\000\006\043\u0193\104" +
    "\u015b\001\002\000\004\043\u019a\001\002\000\004\044\u0194" +
    "\001\002\000\026\012\066\014\055\016\063\045\u0195\075" +
    "\061\104\056\123\060\126\067\127\051\165\057\001\002" +
    "\000\004\051\u0199\001\002\000\004\045\u0197\001\002\000" +
    "\004\051\u0198\001\002\000\044\002\uff17\003\uff17\010\uff17" +
    "\012\uff17\014\uff17\016\uff17\021\uff17\022\uff17\045\uff17\051" +
    "\uff17\075\uff17\104\uff17\110\uff17\123\uff17\126\uff17\127\uff17" +
    "\165\uff17\001\002\000\044\002\uff01\003\uff01\010\uff01\012" +
    "\uff01\014\uff01\016\uff01\021\uff01\022\uff01\045\uff01\051\uff01" +
    "\075\uff01\104\uff01\110\uff01\123\uff01\126\uff01\127\uff01\165" +
    "\uff01\001\002\000\004\044\u019b\001\002\000\026\012\066" +
    "\014\055\016\063\045\u019c\075\061\104\056\123\060\126" +
    "\067\127\051\165\057\001\002\000\004\051\u01a0\001\002" +
    "\000\004\045\u019e\001\002\000\004\051\u019f\001\002\000" +
    "\044\002\uff22\003\uff22\010\uff22\012\uff22\014\uff22\016\uff22" +
    "\021\uff22\022\uff22\045\uff22\051\uff22\075\uff22\104\uff22\110" +
    "\uff22\123\uff22\126\uff22\127\uff22\165\uff22\001\002\000\044" +
    "\002\uff0c\003\uff0c\010\uff0c\012\uff0c\014\uff0c\016\uff0c\021" +
    "\uff0c\022\uff0c\045\uff0c\051\uff0c\075\uff0c\104\uff0c\110\uff0c" +
    "\123\uff0c\126\uff0c\127\uff0c\165\uff0c\001\002\000\004\043" +
    "\u0213\001\002\000\006\043\u0205\104\u015b\001\002\000\004" +
    "\044\u01fe\001\002\000\014\003\u01a5\042\u01a8\043\u01a7\044" +
    "\u01a9\104\u015b\001\002\000\004\044\u01f8\001\002\000\012" +
    "\003\u01cc\042\u01ce\043\u01cd\044\u01cf\001\002\000\030\012" +
    "\066\014\055\016\063\044\u01c0\045\u01bf\075\061\104\056" +
    "\123\060\126\067\127\051\165\057\001\002\000\006\003" +
    "\u01af\044\u01b0\001\002\000\026\012\066\014\055\016\063" +
    "\045\u01aa\075\061\104\056\123\060\126\067\127\051\165" +
    "\057\001\002\000\004\051\u01ae\001\002\000\004\045\u01ac" +
    "\001\002\000\004\051\u01ad\001\002\000\044\002\uff0f\003" +
    "\uff0f\010\uff0f\012\uff0f\014\uff0f\016\uff0f\021\uff0f\022\uff0f" +
    "\045\uff0f\051\uff0f\075\uff0f\104\uff0f\110\uff0f\123\uff0f\126" +
    "\uff0f\127\uff0f\165\uff0f\001\002\000\044\002\ufef9\003\ufef9" +
    "\010\ufef9\012\ufef9\014\ufef9\016\ufef9\021\ufef9\022\ufef9\045" +
    "\ufef9\051\ufef9\075\ufef9\104\ufef9\110\ufef9\123\ufef9\126\ufef9" +
    "\127\ufef9\165\ufef9\001\002\000\026\012\066\014\055\016" +
    "\063\045\u01ba\075\061\104\056\123\060\126\067\127\051" +
    "\165\057\001\002\000\030\003\u01b2\012\066\014\055\016" +
    "\063\045\u01b1\075\061\104\056\123\060\126\067\127\051" +
    "\165\057\001\002\000\004\003\u01b9\001\002\000\004\051" +
    "\u01b8\001\002\000\006\003\u01b4\045\u01b5\001\002\000\004" +
    "\051\u01b7\001\002\000\004\003\u01b6\001\002\000\044\002" +
    "\uff12\003\uff12\010\uff12\012\uff12\014\uff12\016\uff12\021\uff12" +
    "\022\uff12\045\uff12\051\uff12\075\uff12\104\uff12\110\uff12\123" +
    "\uff12\126\uff12\127\uff12\165\uff12\001\002\000\044\002\uff13" +
    "\003\uff13\010\uff13\012\uff13\014\uff13\016\uff13\021\uff13\022" +
    "\uff13\045\uff13\051\uff13\075\uff13\104\uff13\110\uff13\123\uff13" +
    "\126\uff13\127\uff13\165\uff13\001\002\000\044\002\ufefd\003" +
    "\ufefd\010\ufefd\012\ufefd\014\ufefd\016\ufefd\021\ufefd\022\ufefd" +
    "\045\ufefd\051\ufefd\075\ufefd\104\ufefd\110\ufefd\123\ufefd\126" +
    "\ufefd\127\ufefd\165\ufefd\001\002\000\044\002\ufefc\003\ufefc" +
    "\010\ufefc\012\ufefc\014\ufefc\016\ufefc\021\ufefc\022\ufefc\045" +
    "\ufefc\051\ufefc\075\ufefc\104\ufefc\110\ufefc\123\ufefc\126\ufefc" +
    "\127\ufefc\165\ufefc\001\002\000\004\051\u01be\001\002\000" +
    "\004\045\u01bc\001\002\000\004\051\u01bd\001\002\000\044" +
    "\002\uff14\003\uff14\010\uff14\012\uff14\014\uff14\016\uff14\021" +
    "\uff14\022\uff14\045\uff14\051\uff14\075\uff14\104\uff14\110\uff14" +
    "\123\uff14\126\uff14\127\uff14\165\uff14\001\002\000\044\002" +
    "\ufefe\003\ufefe\010\ufefe\012\ufefe\014\ufefe\016\ufefe\021\ufefe" +
    "\022\ufefe\045\ufefe\051\ufefe\075\ufefe\104\ufefe\110\ufefe\123" +
    "\ufefe\126\ufefe\127\ufefe\165\ufefe\001\002\000\004\051\u01cb" +
    "\001\002\000\030\012\066\014\055\016\063\045\u01c4\051" +
    "\u01c5\075\061\104\056\123\060\126\067\127\051\165\057" +
    "\001\002\000\004\045\u01c2\001\002\000\004\051\u01c3\001" +
    "\002\000\044\002\uff0e\003\uff0e\010\uff0e\012\uff0e\014\uff0e" +
    "\016\uff0e\021\uff0e\022\uff0e\045\uff0e\051\uff0e\075\uff0e\104" +
    "\uff0e\110\uff0e\123\uff0e\126\uff0e\127\uff0e\165\uff0e\001\002" +
    "\000\004\051\u01ca\001\002\000\044\002\ufef7\003\ufef7\010" +
    "\ufef7\012\ufef7\014\ufef7\016\ufef7\021\ufef7\022\ufef7\045\ufef7" +
    "\051\ufef7\075\ufef7\104\ufef7\110\ufef7\123\ufef7\126\ufef7\127" +
    "\ufef7\165\ufef7\001\002\000\006\045\u01c7\051\u01c8\001\002" +
    "\000\004\051\u01c9\001\002\000\044\002\uff0d\003\uff0d\010" +
    "\uff0d\012\uff0d\014\uff0d\016\uff0d\021\uff0d\022\uff0d\045\uff0d" +
    "\051\uff0d\075\uff0d\104\uff0d\110\uff0d\123\uff0d\126\uff0d\127" +
    "\uff0d\165\uff0d\001\002\000\044\002\uff24\003\uff24\010\uff24" +
    "\012\uff24\014\uff24\016\uff24\021\uff24\022\uff24\045\uff24\051" +
    "\uff24\075\uff24\104\uff24\110\uff24\123\uff24\126\uff24\127\uff24" +
    "\165\uff24\001\002\000\044\002\uff25\003\uff25\010\uff25\012" +
    "\uff25\014\uff25\016\uff25\021\uff25\022\uff25\045\uff25\051\uff25" +
    "\075\uff25\104\uff25\110\uff25\123\uff25\126\uff25\127\uff25\165" +
    "\uff25\001\002\000\044\002\ufef8\003\ufef8\010\ufef8\012\ufef8" +
    "\014\ufef8\016\ufef8\021\ufef8\022\ufef8\045\ufef8\051\ufef8\075" +
    "\ufef8\104\ufef8\110\ufef8\123\ufef8\126\ufef8\127\ufef8\165\ufef8" +
    "\001\002\000\004\044\u01f2\001\002\000\030\012\066\014" +
    "\055\016\063\044\u01e6\045\u01e5\075\061\104\056\123\060" +
    "\126\067\127\051\165\057\001\002\000\006\003\u01d5\044" +
    "\u01d6\001\002\000\026\012\066\014\055\016\063\045\u01d0" +
    "\075\061\104\056\123\060\126\067\127\051\165\057\001" +
    "\002\000\004\051\u01d4\001\002\000\004\045\u01d2\001\002" +
    "\000\004\051\u01d3\001\002\000\044\002\uff1a\003\uff1a\010" +
    "\uff1a\012\uff1a\014\uff1a\016\uff1a\021\uff1a\022\uff1a\045\uff1a" +
    "\051\uff1a\075\uff1a\104\uff1a\110\uff1a\123\uff1a\126\uff1a\127" +
    "\uff1a\165\uff1a\001\002\000\044\002\uff04\003\uff04\010\uff04" +
    "\012\uff04\014\uff04\016\uff04\021\uff04\022\uff04\045\uff04\051" +
    "\uff04\075\uff04\104\uff04\110\uff04\123\uff04\126\uff04\127\uff04" +
    "\165\uff04\001\002\000\026\012\066\014\055\016\063\045" +
    "\u01e0\075\061\104\056\123\060\126\067\127\051\165\057" +
    "\001\002\000\030\003\u01d8\012\066\014\055\016\063\045" +
    "\u01d7\075\061\104\056\123\060\126\067\127\051\165\057" +
    "\001\002\000\004\003\u01df\001\002\000\004\051\u01de\001" +
    "\002\000\006\003\u01da\045\u01db\001\002\000\004\051\u01dd" +
    "\001\002\000\004\003\u01dc\001\002\000\044\002\uff1d\003" +
    "\uff1d\010\uff1d\012\uff1d\014\uff1d\016\uff1d\021\uff1d\022\uff1d" +
    "\045\uff1d\051\uff1d\075\uff1d\104\uff1d\110\uff1d\123\uff1d\126" +
    "\uff1d\127\uff1d\165\uff1d\001\002\000\044\002\uff1e\003\uff1e" +
    "\010\uff1e\012\uff1e\014\uff1e\016\uff1e\021\uff1e\022\uff1e\045" +
    "\uff1e\051\uff1e\075\uff1e\104\uff1e\110\uff1e\123\uff1e\126\uff1e" +
    "\127\uff1e\165\uff1e\001\002\000\044\002\uff08\003\uff08\010" +
    "\uff08\012\uff08\014\uff08\016\uff08\021\uff08\022\uff08\045\uff08" +
    "\051\uff08\075\uff08\104\uff08\110\uff08\123\uff08\126\uff08\127" +
    "\uff08\165\uff08\001\002\000\044\002\uff07\003\uff07\010\uff07" +
    "\012\uff07\014\uff07\016\uff07\021\uff07\022\uff07\045\uff07\051" +
    "\uff07\075\uff07\104\uff07\110\uff07\123\uff07\126\uff07\127\uff07" +
    "\165\uff07\001\002\000\004\051\u01e4\001\002\000\004\045" +
    "\u01e2\001\002\000\004\051\u01e3\001\002\000\044\002\uff1f" +
    "\003\uff1f\010\uff1f\012\uff1f\014\uff1f\016\uff1f\021\uff1f\022" +
    "\uff1f\045\uff1f\051\uff1f\075\uff1f\104\uff1f\110\uff1f\123\uff1f" +
    "\126\uff1f\127\uff1f\165\uff1f\001\002\000\044\002\uff09\003" +
    "\uff09\010\uff09\012\uff09\014\uff09\016\uff09\021\uff09\022\uff09" +
    "\045\uff09\051\uff09\075\uff09\104\uff09\110\uff09\123\uff09\126" +
    "\uff09\127\uff09\165\uff09\001\002\000\004\051\u01f1\001\002" +
    "\000\030\012\066\014\055\016\063\045\u01ea\051\u01eb\075" +
    "\061\104\056\123\060\126\067\127\051\165\057\001\002" +
    "\000\004\045\u01e8\001\002\000\004\051\u01e9\001\002\000" +
    "\044\002\uff19\003\uff19\010\uff19\012\uff19\014\uff19\016\uff19" +
    "\021\uff19\022\uff19\045\uff19\051\uff19\075\uff19\104\uff19\110" +
    "\uff19\123\uff19\126\uff19\127\uff19\165\uff19\001\002\000\004" +
    "\051\u01f0\001\002\000\044\002\uff02\003\uff02\010\uff02\012" +
    "\uff02\014\uff02\016\uff02\021\uff02\022\uff02\045\uff02\051\uff02" +
    "\075\uff02\104\uff02\110\uff02\123\uff02\126\uff02\127\uff02\165" +
    "\uff02\001\002\000\006\045\u01ed\051\u01ee\001\002\000\004" +
    "\051\u01ef\001\002\000\044\002\uff18\003\uff18\010\uff18\012" +
    "\uff18\014\uff18\016\uff18\021\uff18\022\uff18\045\uff18\051\uff18" +
    "\075\uff18\104\uff18\110\uff18\123\uff18\126\uff18\127\uff18\165" +
    "\uff18\001\002\000\044\002\uff26\003\uff26\010\uff26\012\uff26" +
    "\014\uff26\016\uff26\021\uff26\022\uff26\045\uff26\051\uff26\075" +
    "\uff26\104\uff26\110\uff26\123\uff26\126\uff26\127\uff26\165\uff26" +
    "\001\002\000\044\002\uff23\003\uff23\010\uff23\012\uff23\014" +
    "\uff23\016\uff23\021\uff23\022\uff23\045\uff23\051\uff23\075\uff23" +
    "\104\uff23\110\uff23\123\uff23\126\uff23\127\uff23\165\uff23\001" +
    "\002\000\044\002\uff03\003\uff03\010\uff03\012\uff03\014\uff03" +
    "\016\uff03\021\uff03\022\uff03\045\uff03\051\uff03\075\uff03\104" +
    "\uff03\110\uff03\123\uff03\126\uff03\127\uff03\165\uff03\001\002" +
    "\000\026\012\066\014\055\016\063\045\u01f3\075\061\104" +
    "\056\123\060\126\067\127\051\165\057\001\002\000\004" +
    "\051\u01f7\001\002\000\004\045\u01f5\001\002\000\004\051" +
    "\u01f6\001\002\000\044\002\uff20\003\uff20\010\uff20\012\uff20" +
    "\014\uff20\016\uff20\021\uff20\022\uff20\045\uff20\051\uff20\075" +
    "\uff20\104\uff20\110\uff20\123\uff20\126\uff20\127\uff20\165\uff20" +
    "\001\002\000\044\002\uff0a\003\uff0a\010\uff0a\012\uff0a\014" +
    "\uff0a\016\uff0a\021\uff0a\022\uff0a\045\uff0a\051\uff0a\075\uff0a" +
    "\104\uff0a\110\uff0a\123\uff0a\126\uff0a\127\uff0a\165\uff0a\001" +
    "\002\000\026\012\066\014\055\016\063\045\u01f9\075\061" +
    "\104\056\123\060\126\067\127\051\165\057\001\002\000" +
    "\004\051\u01fd\001\002\000\004\045\u01fb\001\002\000\004" +
    "\051\u01fc\001\002\000\044\002\uff15\003\uff15\010\uff15\012" +
    "\uff15\014\uff15\016\uff15\021\uff15\022\uff15\045\uff15\051\uff15" +
    "\075\uff15\104\uff15\110\uff15\123\uff15\126\uff15\127\uff15\165" +
    "\uff15\001\002\000\044\002\ufeff\003\ufeff\010\ufeff\012\ufeff" +
    "\014\ufeff\016\ufeff\021\ufeff\022\ufeff\045\ufeff\051\ufeff\075" +
    "\ufeff\104\ufeff\110\ufeff\123\ufeff\126\ufeff\127\ufeff\165\ufeff" +
    "\001\002\000\026\012\066\014\055\016\063\045\u01ff\075" +
    "\061\104\056\123\060\126\067\127\051\165\057\001\002" +
    "\000\004\051\u0203\001\002\000\004\045\u0201\001\002\000" +
    "\004\051\u0202\001\002\000\044\002\uff10\003\uff10\010\uff10" +
    "\012\uff10\014\uff10\016\uff10\021\uff10\022\uff10\045\uff10\051" +
    "\uff10\075\uff10\104\uff10\110\uff10\123\uff10\126\uff10\127\uff10" +
    "\165\uff10\001\002\000\044\002\ufefa\003\ufefa\010\ufefa\012" +
    "\ufefa\014\ufefa\016\ufefa\021\ufefa\022\ufefa\045\ufefa\051\ufefa" +
    "\075\ufefa\104\ufefa\110\ufefa\123\ufefa\126\ufefa\127\ufefa\165" +
    "\ufefa\001\002\000\004\043\u020c\001\002\000\004\044\u0206" +
    "\001\002\000\026\012\066\014\055\016\063\045\u0207\075" +
    "\061\104\056\123\060\126\067\127\051\165\057\001\002" +
    "\000\004\051\u020b\001\002\000\004\045\u0209\001\002\000" +
    "\004\051\u020a\001\002\000\044\002\uff16\003\uff16\010\uff16" +
    "\012\uff16\014\uff16\016\uff16\021\uff16\022\uff16\045\uff16\051" +
    "\uff16\075\uff16\104\uff16\110\uff16\123\uff16\126\uff16\127\uff16" +
    "\165\uff16\001\002\000\044\002\uff00\003\uff00\010\uff00\012" +
    "\uff00\014\uff00\016\uff00\021\uff00\022\uff00\045\uff00\051\uff00" +
    "\075\uff00\104\uff00\110\uff00\123\uff00\126\uff00\127\uff00\165" +
    "\uff00\001\002\000\004\044\u020d\001\002\000\026\012\066" +
    "\014\055\016\063\045\u020e\075\061\104\056\123\060\126" +
    "\067\127\051\165\057\001\002\000\004\051\u0212\001\002" +
    "\000\004\045\u0210\001\002\000\004\051\u0211\001\002\000" +
    "\044\002\uff21\003\uff21\010\uff21\012\uff21\014\uff21\016\uff21" +
    "\021\uff21\022\uff21\045\uff21\051\uff21\075\uff21\104\uff21\110" +
    "\uff21\123\uff21\126\uff21\127\uff21\165\uff21\001\002\000\044" +
    "\002\uff0b\003\uff0b\010\uff0b\012\uff0b\014\uff0b\016\uff0b\021" +
    "\uff0b\022\uff0b\045\uff0b\051\uff0b\075\uff0b\104\uff0b\110\uff0b" +
    "\123\uff0b\126\uff0b\127\uff0b\165\uff0b\001\002\000\004\044" +
    "\u0214\001\002\000\026\012\066\014\055\016\063\045\u0215" +
    "\075\061\104\056\123\060\126\067\127\051\165\057\001" +
    "\002\000\004\051\u0219\001\002\000\004\045\u0217\001\002" +
    "\000\004\051\u0218\001\002\000\044\002\uff1b\003\uff1b\010" +
    "\uff1b\012\uff1b\014\uff1b\016\uff1b\021\uff1b\022\uff1b\045\uff1b" +
    "\051\uff1b\075\uff1b\104\uff1b\110\uff1b\123\uff1b\126\uff1b\127" +
    "\uff1b\165\uff1b\001\002\000\044\002\uff05\003\uff05\010\uff05" +
    "\012\uff05\014\uff05\016\uff05\021\uff05\022\uff05\045\uff05\051" +
    "\uff05\075\uff05\104\uff05\110\uff05\123\uff05\126\uff05\127\uff05" +
    "\165\uff05\001\002\000\024\002\uff84\003\uff84\010\uff84\021" +
    "\uff84\022\uff84\045\uff84\051\uff84\104\uff84\110\uff84\001\002" +
    "\000\024\002\uff8c\003\uff8c\010\uff8c\021\uff8c\022\uff8c\045" +
    "\uff8c\051\uff8c\104\uff8c\110\uff8c\001\002\000\004\051\u021d" +
    "\001\002\000\024\002\uffdd\003\uffdd\010\uffdd\021\uffdd\022" +
    "\uffdd\045\uffdd\051\uffdd\104\uffdd\110\uffdd\001\002\000\012" +
    "\104\162\106\165\107\163\164\166\001\002\000\004\043" +
    "\u0220\001\002\000\004\051\u0221\001\002\000\044\002\ufedf" +
    "\003\ufedf\010\ufedf\012\ufedf\014\ufedf\016\ufedf\021\ufedf\022" +
    "\ufedf\045\ufedf\051\ufedf\075\ufedf\104\ufedf\110\ufedf\123\ufedf" +
    "\126\ufedf\127\ufedf\165\ufedf\001\002\000\024\002\uff8a\003" +
    "\uff8a\010\uff8a\021\uff8a\022\uff8a\045\uff8a\051\uff8a\104\uff8a" +
    "\110\uff8a\001\002\000\010\002\ufff5\021\ufff5\051\u0225\001" +
    "\002\000\006\002\ufff1\021\ufff1\001\002\000\006\002\ufff9" +
    "\021\ufff9\001\002\000\004\051\u0227\001\002\000\006\002" +
    "\ufff0\021\ufff0\001\002\000\004\044\u02d0\001\002\000\014" +
    "\003\u02b6\044\u02b9\045\u02b7\051\u02b8\104\u02b5\001\002\000" +
    "\014\003\u0250\042\u0251\104\u024c\106\u024d\163\u024f\001\002" +
    "\000\014\002\uffe8\003\uffe8\021\uffe8\045\uffe8\051\uffe8\001" +
    "\002\000\024\002\uffe5\003\uffe5\010\u022a\021\uffe5\022\u022f" +
    "\045\uffe5\051\uffe5\104\u0228\110\u0229\001\002\000\024\002" +
    "\uffe7\003\uffe7\010\u022a\021\uffe7\022\u022f\045\uffe7\051\uffe7" +
    "\104\u0228\110\u0229\001\002\000\024\002\uffe3\003\uffe3\010" +
    "\u022a\021\uffe3\022\u022f\045\uffe3\051\uffe3\104\u0228\110\u0229" +
    "\001\002\000\010\003\u0231\044\u0232\104\u0230\001\002\000" +
    "\030\003\u023a\012\066\014\055\016\063\044\u0239\075\061" +
    "\104\056\123\060\126\067\127\051\165\057\001\002\000" +
    "\004\044\u0235\001\002\000\024\012\066\014\055\016\063" +
    "\075\061\104\056\123\060\126\067\127\051\165\057\001" +
    "\002\000\004\051\u0234\001\002\000\024\002\uffd0\003\uffd0" +
    "\010\uffd0\021\uffd0\022\uffd0\045\uffd0\051\uffd0\104\uffd0\110" +
    "\uffd0\001\002\000\024\012\066\014\055\016\063\075\061" +
    "\104\056\123\060\126\067\127\051\165\057\001\002\000" +
    "\004\045\u0237\001\002\000\004\051\u0238\001\002\000\024" +
    "\002\uffd4\003\uffd4\010\uffd4\021\uffd4\022\uffd4\045\uffd4\051" +
    "\uffd4\104\uffd4\110\uffd4\001\002\000\024\012\066\014\055" +
    "\016\063\075\061\104\056\123\060\126\067\127\051\165" +
    "\057\001\002\000\024\012\066\014\055\016\063\075\061" +
    "\104\056\123\060\126\067\127\051\165\057\001\002\000" +
    "\006\045\u023c\051\u023d\001\002\000\024\002\uffcb\003\uffcb" +
    "\010\uffcb\021\uffcb\022\uffcb\045\uffcb\051\u023e\104\uffcb\110" +
    "\uffcb\001\002\000\024\002\uffca\003\uffca\010\uffca\021\uffca" +
    "\022\uffca\045\uffca\051\uffca\104\uffca\110\uffca\001\002\000" +
    "\024\002\uffce\003\uffce\010\uffce\021\uffce\022\uffce\045\uffce" +
    "\051\uffce\104\uffce\110\uffce\001\002\000\004\045\u0240\001" +
    "\002\000\004\051\u0241\001\002\000\024\002\uffd5\003\uffd5" +
    "\010\uffd5\021\uffd5\022\uffd5\045\uffd5\051\uffd5\104\uffd5\110" +
    "\uffd5\001\002\000\024\002\uffcc\003\uffcc\010\uffcc\021\uffcc" +
    "\022\uffcc\045\u0244\051\u0245\104\uffcc\110\uffcc\001\002\000" +
    "\004\051\u0248\001\002\000\024\002\uffcd\003\uffcd\010\uffcd" +
    "\021\uffcd\022\uffcd\045\uffcd\051\u0247\104\uffcd\110\uffcd\001" +
    "\002\000\024\002\uffcf\003\uffcf\010\uffcf\021\uffcf\022\uffcf" +
    "\045\uffcf\051\uffcf\104\uffcf\110\uffcf\001\002\000\024\002" +
    "\uffd2\003\uffd2\010\uffd2\021\uffd2\022\uffd2\045\uffd2\051\uffd2" +
    "\104\uffd2\110\uffd2\001\002\000\024\002\uffd6\003\uffd6\010" +
    "\uffd6\021\uffd6\022\uffd6\045\uffd6\051\uffd6\104\uffd6\110\uffd6" +
    "\001\002\000\024\002\uffd3\003\uffd3\010\uffd3\021\uffd3\022" +
    "\uffd3\045\uffd3\051\uffd3\104\uffd3\110\uffd3\001\002\000\014" +
    "\002\uffe2\003\uffe2\021\uffe2\045\uffe2\051\uffe2\001\002\000" +
    "\014\002\uffe6\003\uffe6\021\uffe6\045\uffe6\051\uffe6\001\002" +
    "\000\014\002\uffe4\003\uffe4\021\uffe4\045\uffe4\051\uffe4\001" +
    "\002\000\012\003\uffb2\046\uffb2\111\uffb2\163\u02b4\001\002" +
    "\000\010\003\uffb3\046\uffb3\111\uffb3\001\002\000\004\111" +
    "\u02a7\001\002\000\004\104\u02a6\001\002\000\010\104\u024c" +
    "\106\u024d\163\u024f\001\002\000\014\003\u0254\104\u024c\106" +
    "\u024d\111\u0252\163\u024f\001\002\000\004\046\u029a\001\002" +
    "\000\010\003\u0275\046\u0276\111\u0274\001\002\000\004\111" +
    "\u0255\001\002\000\004\046\u0256\001\002\000\010\047\uffaa" +
    "\052\u0258\106\u0257\001\002\000\012\052\u0266\104\u025e\106" +
    "\u025f\107\u025d\001\002\000\010\104\u025e\106\u025f\107\u025d" +
    "\001\002\000\004\047\u025a\001\002\000\004\043\u025b\001" +
    "\002\000\004\051\u025c\001\002\000\024\002\uffc7\003\uffc7" +
    "\010\uffc7\021\uffc7\022\uffc7\045\uffc7\051\uffc7\104\uffc7\110" +
    "\uffc7\001\002\000\016\003\uffa3\043\uffa3\047\uffa3\071\u0263" +
    "\106\uffa3\111\uffa3\001\002\000\014\003\uffa2\043\uffa2\047" +
    "\uffa2\106\uffa2\111\uffa2\001\002\000\016\003\uffa1\043\uffa1" +
    "\047\uffa1\071\u0261\106\uffa1\111\uffa1\001\002\000\010\003" +
    "\uffad\043\uffad\047\uffad\001\002\000\004\107\u0262\001\002" +
    "\000\014\003\uff9f\043\uff9f\047\uff9f\106\uff9f\111\uff9f\001" +
    "\002\000\004\106\u0264\001\002\000\014\003\uffa0\043\uffa0" +
    "\047\uffa0\106\uffa0\111\uffa0\001\002\000\010\003\uffac\043" +
    "\uffac\047\uffac\001\002\000\016\003\uffab\043\uffab\047\uffab" +
    "\104\u025e\106\u025f\107\u025d\001\002\000\014\003\uffaf\043" +
    "\uffaf\047\uffaf\106\u0269\111\u0268\001\002\000\006\052\u026e" +
    "\106\u026d\001\002\000\004\052\u026b\001\002\000\010\003" +
    "\uffae\043\uffae\047\uffae\001\002\000\010\104\u025e\106\u025f" +
    "\107\u025d\001\002\000\010\003\uffa7\043\uffa7\047\uffa7\001" +
    "\002\000\012\052\u0271\104\u025e\106\u025f\107\u025d\001\002" +
    "\000\010\104\u025e\106\u025f\107\u025d\001\002\000\010\003" +
    "\uffa6\043\uffa6\047\uffa6\001\002\000\010\003\uffa5\043\uffa5" +
    "\047\uffa5\001\002\000\016\003\uffa4\043\uffa4\047\uffa4\104" +
    "\u025e\106\u025f\107\u025d\001\002\000\014\003\uffa9\043\uffa9" +
    "\047\uffa9\106\u0269\111\u0268\001\002\000\010\003\uffa8\043" +
    "\uffa8\047\uffa8\001\002\000\016\003\u0280\043\uffaa\046\u0282" +
    "\047\uffaa\052\u0258\106\u0257\001\002\000\004\046\u027b\001" +
    "\002\000\010\047\uffaa\052\u0258\106\u0257\001\002\000\004" +
    "\047\u0278\001\002\000\004\043\u0279\001\002\000\004\051" +
    "\u027a\001\002\000\024\002\uffbf\003\uffbf\010\uffbf\021\uffbf" +
    "\022\uffbf\045\uffbf\051\uffbf\104\uffbf\110\uffbf\001\002\000" +
    "\010\047\uffaa\052\u0258\106\u0257\001\002\000\004\047\u027d" +
    "\001\002\000\004\043\u027e\001\002\000\004\051\u027f\001" +
    "\002\000\024\002\uffc6\003\uffc6\010\uffc6\021\uffc6\022\uffc6" +
    "\045\uffc6\051\uffc6\104\uffc6\110\uffc6\001\002\000\010\047" +
    "\uffaa\052\u0258\106\u0257\001\002\000\006\043\u0290\047\u0291" +
    "\001\002\000\014\003\uffaa\043\uffaa\047\uffaa\052\u0258\106" +
    "\u0257\001\002\000\010\003\u0284\043\u0285\047\u0286\001\002" +
    "\000\004\043\u028e\001\002\000\004\051\u028d\001\002\000" +
    "\026\002\uffbb\003\uffbb\010\uffbb\021\uffbb\022\uffbb\043\u0288" +
    "\045\uffbb\051\u0289\104\uffbb\110\uffbb\001\002\000\004\051" +
    "\u028c\001\002\000\006\003\u028a\051\u028b\001\002\000\024" +
    "\002\uffbc\003\uffbc\010\uffbc\021\uffbc\022\uffbc\045\uffbc\051" +
    "\uffbc\104\uffbc\110\uffbc\001\002\000\024\002\uffc2\003\uffc2" +
    "\010\uffc2\021\uffc2\022\uffc2\045\uffc2\051\uffc2\104\uffc2\110" +
    "\uffc2\001\002\000\024\002\uffc9\003\uffc9\010\uffc9\021\uffc9" +
    "\022\uffc9\045\uffc9\051\uffc9\104\uffc9\110\uffc9\001\002\000" +
    "\024\002\uffc3\003\uffc3\010\uffc3\021\uffc3\022\uffc3\045\uffc3" +
    "\051\uffc3\104\uffc3\110\uffc3\001\002\000\024\002\uffbd\003" +
    "\uffbd\010\uffbd\021\uffbd\022\uffbd\045\uffbd\051\uffbd\104\uffbd" +
    "\110\uffbd\001\002\000\004\051\u028f\001\002\000\024\002" +
    "\uffc4\003\uffc4\010\uffc4\021\uffc4\022\uffc4\045\uffc4\051\uffc4" +
    "\104\uffc4\110\uffc4\001\002\000\004\051\u0295\001\002\000" +
    "\006\043\u0292\051\u0293\001\002\000\024\002\uffb9\003\uffb9" +
    "\010\uffb9\021\uffb9\022\uffb9\045\uffb9\051\u0294\104\uffb9\110" +
    "\uffb9\001\002\000\024\002\uffb8\003\uffb8\010\uffb8\021\uffb8" +
    "\022\uffb8\045\uffb8\051\uffb8\104\uffb8\110\uffb8\001\002\000" +
    "\024\002\uffbe\003\uffbe\010\uffbe\021\uffbe\022\uffbe\045\uffbe" +
    "\051\uffbe\104\uffbe\110\uffbe\001\002\000\024\002\uffba\003" +
    "\uffba\010\uffba\021\uffba\022\uffba\045\uffba\051\uffba\104\uffba" +
    "\110\uffba\001\002\000\004\047\u0297\001\002\000\004\043" +
    "\u0298\001\002\000\004\051\u0299\001\002\000\024\002\uffc5" +
    "\003\uffc5\010\uffc5\021\uffc5\022\uffc5\045\uffc5\051\uffc5\104" +
    "\uffc5\110\uffc5\001\002\000\010\047\uffaa\052\u0258\106\u0257" +
    "\001\002\000\004\047\u029c\001\002\000\004\043\u029d\001" +
    "\002\000\004\051\u029e\001\002\000\024\002\uffc0\003\uffc0" +
    "\010\uffc0\021\uffc0\022\uffc0\045\uffc0\051\uffc0\104\uffc0\110" +
    "\uffc0\001\002\000\004\111\u02a0\001\002\000\004\046\u02a1" +
    "\001\002\000\010\047\uffaa\052\u0258\106\u0257\001\002\000" +
    "\004\047\u02a3\001\002\000\004\043\u02a4\001\002\000\004" +
    "\051\u02a5\001\002\000\024\002\uffc8\003\uffc8\010\uffc8\021" +
    "\uffc8\022\uffc8\045\uffc8\051\uffc8\104\uffc8\110\uffc8\001\002" +
    "\000\010\003\uffb1\046\uffb1\111\uffb1\001\002\000\012\046" +
    "\u02a9\047\uffaa\052\u0258\106\u0257\001\002\000\004\047\u02b1" +
    "\001\002\000\012\043\uffaa\047\uffaa\052\u0258\106\u0257\001" +
    "\002\000\006\043\u02ab\047\u02ac\001\002\000\004\051\u02b0" +
    "\001\002\000\006\043\u02ad\051\u02ae\001\002\000\024\002" +
    "\uffb7\003\uffb7\010\uffb7\021\uffb7\022\uffb7\045\uffb7\051\u02af" +
    "\104\uffb7\110\uffb7\001\002\000\024\002\uffb6\003\uffb6\010" +
    "\uffb6\021\uffb6\022\uffb6\045\uffb6\051\uffb6\104\uffb6\110\uffb6" +
    "\001\002\000\024\002\uffc1\003\uffc1\010\uffc1\021\uffc1\022" +
    "\uffc1\045\uffc1\051\uffc1\104\uffc1\110\uffc1\001\002\000\024" +
    "\002\uffb5\003\uffb5\010\uffb5\021\uffb5\022\uffb5\045\uffb5\051" +
    "\uffb5\104\uffb5\110\uffb5\001\002\000\004\043\u02b2\001\002" +
    "\000\004\051\u02b3\001\002\000\024\002\uffb4\003\uffb4\010" +
    "\uffb4\021\uffb4\022\uffb4\045\uffb4\051\uffb4\104\uffb4\110\uffb4" +
    "\001\002\000\010\003\uffb0\046\uffb0\111\uffb0\001\002\000" +
    "\012\003\u02c1\044\u02c4\045\u02c2\051\u02c3\001\002\000\004" +
    "\044\u02be\001\002\000\004\051\u02bd\001\002\000\024\002" +
    "\uff93\003\uff93\010\uff93\021\uff93\022\uff93\045\uff93\051\uff93" +
    "\104\uff93\110\uff93\001\002\000\006\045\u02ba\051\u02bb\001" +
    "\002\000\024\002\uff95\003\uff95\010\uff95\021\uff95\022\uff95" +
    "\045\uff95\051\u02bc\104\uff95\110\uff95\001\002\000\024\002" +
    "\uff96\003\uff96\010\uff96\021\uff96\022\uff96\045\uff96\051\uff96" +
    "\104\uff96\110\uff96\001\002\000\024\002\uff9a\003\uff9a\010" +
    "\uff9a\021\uff9a\022\uff9a\045\uff9a\051\uff9a\104\uff9a\110\uff9a" +
    "\001\002\000\024\002\uff94\003\uff94\010\uff94\021\uff94\022" +
    "\uff94\045\uff94\051\uff94\104\uff94\110\uff94\001\002\000\004" +
    "\045\u02bf\001\002\000\004\051\u02c0\001\002\000\024\002" +
    "\uff92\003\uff92\010\uff92\021\uff92\022\uff92\045\uff92\051\uff92" +
    "\104\uff92\110\uff92\001\002\000\004\045\u02ce\001\002\000" +
    "\024\002\uff98\003\uff98\010\uff98\021\uff98\022\uff98\045\uff98" +
    "\051\u02cd\104\uff98\110\uff98\001\002\000\024\002\uff97\003" +
    "\uff97\010\uff97\021\uff97\022\uff97\045\uff97\051\uff97\104\uff97" +
    "\110\uff97\001\002\000\024\002\uff99\003\uff99\010\uff99\021" +
    "\uff99\022\uff99\045\u02c6\051\u02c7\104\uff99\110\uff99\001\002" +
    "\000\006\045\u02ca\051\u02cb\001\002\000\024\002\uff9d\003" +
    "\uff9d\010\uff9d\021\uff9d\022\uff9d\045\uff9d\051\u02c9\104\uff9d" +
    "\110\uff9d\001\002\000\024\002\uff9c\003\uff9c\010\uff9c\021" +
    "\uff9c\022\uff9c\045\uff9c\051\uff9c\104\uff9c\110\uff9c\001\002" +
    "\000\024\002\uff8f\003\uff8f\010\uff8f\021\uff8f\022\uff8f\045" +
    "\uff8f\051\uff8f\104\uff8f\110\uff8f\001\002\000\024\002\uff9e" +
    "\003\uff9e\010\uff9e\021\uff9e\022\uff9e\045\uff9e\051\uff9e\104" +
    "\uff9e\110\uff9e\001\002\000\004\051\u02cc\001\002\000\024" +
    "\002\uff90\003\uff90\010\uff90\021\uff90\022\uff90\045\uff90\051" +
    "\uff90\104\uff90\110\uff90\001\002\000\024\002\uff8e\003\uff8e" +
    "\010\uff8e\021\uff8e\022\uff8e\045\uff8e\051\uff8e\104\uff8e\110" +
    "\uff8e\001\002\000\024\002\uff9b\003\uff9b\010\uff9b\021\uff9b" +
    "\022\uff9b\045\uff9b\051\uff9b\104\uff9b\110\uff9b\001\002\000" +
    "\004\051\u02cf\001\002\000\024\002\uff91\003\uff91\010\uff91" +
    "\021\uff91\022\uff91\045\uff91\051\uff91\104\uff91\110\uff91\001" +
    "\002\000\024\012\066\014\055\016\063\075\061\104\056" +
    "\123\060\126\067\127\051\165\057\001\002\000\004\045" +
    "\u02d2\001\002\000\004\051\u02d3\001\002\000\024\002\uffd1" +
    "\003\uffd1\010\uffd1\021\uffd1\022\uffd1\045\uffd1\051\uffd1\104" +
    "\uffd1\110\uffd1\001\002\000\024\012\066\014\055\016\063" +
    "\075\061\104\056\123\060\126\067\127\051\165\057\001" +
    "\002\000\024\012\066\014\055\016\063\075\061\104\056" +
    "\123\060\126\067\127\051\165\057\001\002\000\006\045" +
    "\u02d7\051\u02d8\001\002\000\024\002\uffd8\003\uffd8\010\uffd8" +
    "\021\uffd8\022\uffd8\045\uffd8\051\u02d9\104\uffd8\110\uffd8\001" +
    "\002\000\024\002\uffd7\003\uffd7\010\uffd7\021\uffd7\022\uffd7" +
    "\045\uffd7\051\uffd7\104\uffd7\110\uffd7\001\002\000\024\002" +
    "\uffdb\003\uffdb\010\uffdb\021\uffdb\022\uffdb\045\uffdb\051\uffdb" +
    "\104\uffdb\110\uffdb\001\002\000\004\045\u02db\001\002\000" +
    "\004\051\u02dc\001\002\000\024\002\uffe0\003\uffe0\010\uffe0" +
    "\021\uffe0\022\uffe0\045\uffe0\051\uffe0\104\uffe0\110\uffe0\001" +
    "\002\000\024\002\uffd9\003\uffd9\010\uffd9\021\uffd9\022\uffd9" +
    "\045\u02df\051\u02e0\104\uffd9\110\uffd9\001\002\000\004\051" +
    "\u02e3\001\002\000\024\002\uffda\003\uffda\010\uffda\021\uffda" +
    "\022\uffda\045\uffda\051\u02e2\104\uffda\110\uffda\001\002\000" +
    "\024\002\uffdc\003\uffdc\010\uffdc\021\uffdc\022\uffdc\045\uffdc" +
    "\051\uffdc\104\uffdc\110\uffdc\001\002\000\024\002\uffde\003" +
    "\uffde\010\uffde\021\uffde\022\uffde\045\uffde\051\uffde\104\uffde" +
    "\110\uffde\001\002\000\024\002\uffe1\003\uffe1\010\uffe1\021" +
    "\uffe1\022\uffe1\045\uffe1\051\uffe1\104\uffe1\110\uffe1\001\002" +
    "\000\024\002\uffdf\003\uffdf\010\uffdf\021\uffdf\022\uffdf\045" +
    "\uffdf\051\uffdf\104\uffdf\110\uffdf\001\002\000\006\011\043" +
    "\044\062\001\002\000\004\045\u02e6\001\002\000\004\051" +
    "\u02e7\001\002\000\006\002\uffee\021\uffee\001\002\000\006" +
    "\011\043\044\062\001\002\000\034\003\u02ef\011\043\012" +
    "\066\014\055\016\063\044\062\045\u02f0\075\061\104\056" +
    "\123\060\126\067\127\051\165\057\001\002\000\006\045" +
    "\u02eb\051\u02ec\001\002\000\010\002\ufff3\021\ufff3\051\u02ed" +
    "\001\002\000\006\002\ufff2\021\ufff2\001\002\000\006\002" +
    "\ufff8\021\ufff8\001\002\000\014\002\ufff4\003\u02f4\021\ufff4" +
    "\045\u02f5\051\u02f6\001\002\000\004\045\u02f2\001\002\000" +
    "\004\051\u02f1\001\002\000\006\002\ufffb\021\ufffb\001\002" +
    "\000\004\051\u02f3\001\002\000\006\002\uffea\021\uffea\001" +
    "\002\000\004\051\u02f9\001\002\000\012\002\ufff6\003\u02f7" +
    "\021\ufff6\051\u02f8\001\002\000\006\002\ufff7\021\ufff7\001" +
    "\002\000\006\002\uffeb\021\uffeb\001\002\000\006\002\ufffd" +
    "\021\ufffd\001\002\000\006\002\uffec\021\uffec\001\002\000" +
    "\004\045\u02fb\001\002\000\004\051\u02fc\001\002\000\006" +
    "\002\uffed\021\uffed\001\002\000\004\044\u02fe\001\002\000" +
    "\006\011\043\044\062\001\002\000\004\045\u0300\001\002" +
    "\000\004\051\u0301\001\002\000\006\002\uffef\021\uffef\001" +
    "\002\000\006\011\043\044\062\001\002\000\004\045\u0304" +
    "\001\002\000\004\051\u0305\001\002\000\006\002\ufffa\021" +
    "\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0303\000\006\002\007\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\043\100\044\001\001" +
    "\000\004\004\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\043\100\u02e9\001\001\000" +
    "\002\001\001\000\016\005\047\013\u02d5\015\064\021\052" +
    "\027\053\102\063\001\001\000\012\017\u022c\050\u022a\052" +
    "\u022b\054\u022d\001\001\000\002\001\001\000\022\005\047" +
    "\013\051\015\064\021\052\027\053\051\043\100\046\102" +
    "\063\001\001\000\002\001\001\000\016\005\047\013\u0221" +
    "\015\064\021\052\027\053\102\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\047\013\u021a\015\064" +
    "\021\052\027\053\102\063\001\001\000\016\005\047\013" +
    "\u0219\015\064\021\052\027\053\102\063\001\001\000\002" +
    "\001\001\000\004\060\u0156\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\350\001\001\000\016\005\047" +
    "\013\051\015\064\021\052\027\053\102\063\001\001\000" +
    "\002\001\001\000\016\005\047\013\211\015\064\021\052" +
    "\027\053\102\063\001\001\000\016\005\047\013\210\015" +
    "\064\021\052\027\053\102\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\173\001\001\000\004\060\171\001\001\000\002" +
    "\001\001\000\004\060\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\201\001\001\000\004\060\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\340\022" +
    "\215\001\001\000\006\020\220\022\215\001\001\000\002" +
    "\001\001\000\006\023\306\057\256\001\001\000\002\001" +
    "\001\000\006\023\253\057\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\047\013" +
    "\241\015\064\021\052\027\053\102\063\001\001\000\016" +
    "\005\047\013\227\015\064\021\052\027\053\102\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\047\013\247\015\064\021\052\027\053\102" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\322\057\256\001\001\000\006\023\311\057\256\001" +
    "\001\000\004\024\316\001\001\000\004\024\313\001\001" +
    "\000\002\001\001\000\004\024\321\001\001\000\004\024" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\324\001\001\000\002\001\001\000\004\024\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\047" +
    "\013\344\015\064\021\052\027\053\102\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\u013a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\104" +
    "\u013e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\u0148\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\u014b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\u014f\001" +
    "\001\000\002\001\001\000\004\103\u0151\001\001\000\002" +
    "\001\001\000\004\103\u0153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\u0177\001\001\000\006\016\u016f\060\u016d\001\001\000" +
    "\004\016\u015c\001\001\000\004\070\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u016b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u016a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\u0168\001\001\000\002" +
    "\001\001\000\004\060\u0174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u01a0\001\001\000\002\001\001" +
    "\000\004\016\u0181\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\047\013\u0185\015\064\021\052\027\053" +
    "\102\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\047\013\u018c\015\064\021\052\027" +
    "\053\102\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u0191\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\047\013\u0195\015\064\021\052\027\053\102" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\047\013\u019c\015\064\021\052\027\053" +
    "\102\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u0203\001\001\000\002\001\001\000" +
    "\004\016\u01a5\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\047\013\u01c0\015\064\021\052\027\053\102" +
    "\063\001\001\000\002\001\001\000\016\005\047\013\u01aa" +
    "\015\064\021\052\027\053\102\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\047\013\u01ba\015\064\021" +
    "\052\027\053\102\063\001\001\000\016\005\047\013\u01b2" +
    "\015\064\021\052\027\053\102\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\047\013\u01c5\015\064" +
    "\021\052\027\053\102\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\047\013\u01e6\015\064\021" +
    "\052\027\053\102\063\001\001\000\002\001\001\000\016" +
    "\005\047\013\u01d0\015\064\021\052\027\053\102\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\047\013" +
    "\u01e0\015\064\021\052\027\053\102\063\001\001\000\016" +
    "\005\047\013\u01d8\015\064\021\052\027\053\102\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\047" +
    "\013\u01eb\015\064\021\052\027\053\102\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\047\013\u01f3\015\064\021" +
    "\052\027\053\102\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\047\013\u01f9\015\064\021\052\027\053" +
    "\102\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\047\013\u01ff\015\064\021\052\027\053\102\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\047\013\u0207\015\064\021\052" +
    "\027\053\102\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\047\013\u020e\015\064\021" +
    "\052\027\053\102\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\047\013\u0215\015\064" +
    "\021\052\027\053\102\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u021e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u024d\001\001\000\002\001\001" +
    "\000\012\017\u022c\050\u024a\052\u022b\054\u022d\001\001\000" +
    "\012\017\u022c\050\u0249\052\u022b\054\u022d\001\001\000\012" +
    "\017\u022c\050\u0248\052\u022b\054\u022d\001\001\000\002\001" +
    "\001\000\016\005\047\013\u023a\015\064\021\052\027\053" +
    "\102\063\001\001\000\002\001\001\000\016\005\047\013" +
    "\u0232\015\064\021\052\027\053\102\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\047\013\u0235\015" +
    "\064\021\052\027\053\102\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\047\013" +
    "\u0241\015\064\021\052\027\053\102\063\001\001\000\016" +
    "\005\047\013\u023e\015\064\021\052\027\053\102\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u029e\001\001" +
    "\000\004\101\u0252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u0258" +
    "\001\001\000\004\066\u0264\001\001\000\004\066\u025f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\u0266\001\001\000\004\067\u0269\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\u026b\001\001\000\002\001\001\000\004\066\u026f" +
    "\001\001\000\004\066\u026e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\u0271\001\001\000\004\067\u0272" +
    "\001\001\000\002\001\001\000\004\053\u0280\001\001\000" +
    "\002\001\001\000\004\053\u0276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\u027b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0295\001" +
    "\001\000\002\001\001\000\004\053\u0282\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\u029a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u02a1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u02a7\001\001\000\002\001\001" +
    "\000\004\053\u02a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\047\013\u02d0\015\064\021\052\027" +
    "\053\102\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\047\013\u02dc\015\064\021" +
    "\052\027\053\102\063\001\001\000\016\005\047\013\u02d9" +
    "\015\064\021\052\027\053\102\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\043\100\u02e4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\051\043\100" +
    "\u02f9\001\001\000\022\005\047\013\051\015\064\021\052" +
    "\027\053\051\043\100\u02ed\102\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\043\100\u02fe\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\043\100\u0302\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    boolean esDAssig=false;
    int fl;

    public Cup(java_cup.runtime.Scanner s,ArrayList<Error1> m,int tfl) {
        super(s); 
        ManejadorDeErrores =m; 
        fl = tfl;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }
    /*public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
            try{
                Object result = sintactico.parse().value;
            }catch(Exception ex){


            }
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // param2 ::= PARENTESIS_A STRING COMA STRING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",37, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // param2 ::= PARENTESIS_A STRING COMA error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID' o 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",37, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // param2 ::= PARENTESIS_A STRING error STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",37, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // param2 ::= PARENTESIS_A error COMA animCondicion2 PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",37, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // param2 ::= PARENTESIS_A STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param2",37, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // param1 ::= PARENTESIS_A animCondicion2 error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param1",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // param1 ::= PARENTESIS_A error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param1",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // param1 ::= PARENTESIS_A animCondicion2 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param1",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // param0 ::= PARENTESIS_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param0",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // param0 ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("param0",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // grupo1 ::= setHTML 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // grupo1 ::= Child error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // grupo1 ::= ChildText 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // grupo1 ::= RChild error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // grupo1 ::= Value error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // grupo1 ::= RClass error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // grupo1 ::= AClass error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // grupo1 ::= div error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // grupo1 ::= inHTML error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'PARAMETRO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // grupo1 ::= setHTML param2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // grupo1 ::= Child param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // grupo1 ::= ChildText param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // grupo1 ::= RChild param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // grupo1 ::= Value param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // grupo1 ::= RClass param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // grupo1 ::= AClass param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // grupo1 ::= div param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // grupo1 ::= inHTML param1 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // grupo0 ::= Remove error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // grupo0 ::= Val error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // grupo0 ::= getSecond error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // grupo0 ::= getMonth error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // grupo0 ::= getMinute error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // grupo0 ::= getMSecond error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // grupo0 ::= getHour error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // grupo0 ::= getYear error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // grupo0 ::= getDay error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // grupo0 ::= getDate error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // grupo0 ::= getBody error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // grupo0 ::= WD error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // grupo0 ::= HG error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // grupo0 ::= outHTML error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" 'PARAMETRO' inesperado."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // grupo0 ::= Remove param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // grupo0 ::= Val param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // grupo0 ::= getSecond param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // grupo0 ::= getMonth param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // grupo0 ::= getMinute param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // grupo0 ::= getMSecond param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // grupo0 ::= getHour param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // grupo0 ::= getYear param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // grupo0 ::= getDay param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // grupo0 ::= getDate param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // grupo0 ::= getBody param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // grupo0 ::= WD param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // grupo0 ::= HG param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // grupo0 ::= outHTML param0 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupo0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // accederMetodos ::= ID error PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // accederMetodos ::= ID PARENTESIS_A error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // accederMetodos ::= ID PARENTESIS_A PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // accederMetodos ::= ID error parametros PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // accederMetodos ::= ID PARENTESIS_A parametros error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // accederMetodos ::= ID PARENTESIS_A parametros PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // accederMetodos ::= docCreateElem error STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // accederMetodos ::= docCreateElem PARENTESIS_A error PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // accederMetodos ::= docCreateElem PARENTESIS_A STRING error PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C error setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '.'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO error PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba una funcion."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML error STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A error COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING error STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA error PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // accederMetodos ::= JQElem error STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // accederMetodos ::= JQElem PARENTESIS_A error PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // accederMetodos ::= JQElem PARENTESIS_A STRING error PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C error ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '.'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO error PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba una funcion."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText error STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A error PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // accederMetodos ::= ID PARENTESIS_A PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // accederMetodos ::= ID PARENTESIS_A parametros PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // accederMetodos ::= docCreateElem PARENTESIS_A STRING PARENTESIS_C PUNTO setHTML PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // accederMetodos ::= JQElem PARENTESIS_A STRING PARENTESIS_C PUNTO ChildText PARENTESIS_A STRING PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // accederMetodos ::= CONSOL PARENTESIS_A NUMIDSTR PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("accederMetodos",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // animCondicion2 ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion2",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // animCondicion2 ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion2",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // animCondicion ::= animCondicion2 DOSPUNTOS error COMA animCondicion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'NUMERO' o 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // animCondicion ::= animCondicion2 error animCondicion2 COMA animCondicion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // animCondicion ::= animCondicion2 DOSPUNTOS error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'NUMERO' o 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // animCondicion ::= animCondicion2 error animCondicion2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // animCondicion ::= animCondicion2 DOSPUNTOS animCondicion2 COMA animCondicion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // animCondicion ::= animCondicion2 DOSPUNTOS animCondicion2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("animCondicion",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // anim ::= Animate PARENTESIS_A LLAVE_A animCondicion LLAVE_C COMA animCondicion2 COMA NUMERO PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // anim ::= Animate PARENTESIS_A LLAVE_A animCondicion LLAVE_C COMA animCondicion2 COMA NUMERO error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // anim ::= Animate PARENTESIS_A LLAVE_A animCondicion LLAVE_C COMA animCondicion2 COMA error PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // anim ::= Animate PARENTESIS_A LLAVE_A animCondicion LLAVE_C COMA animCondicion2 error NUMERO PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // anim ::= Animate PARENTESIS_A LLAVE_A animCondicion LLAVE_C error animCondicion2 COMA NUMERO PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // anim ::= Animate PARENTESIS_A LLAVE_A animCondicion error COMA animCondicion2 COMA NUMERO PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // anim ::= Animate PARENTESIS_A error animCondicion LLAVE_C COMA animCondicion2 COMA NUMERO PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // anim ::= Animate error LLAVE_A animCondicion LLAVE_C COMA animCondicion2 COMA NUMERO PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // anim ::= Animate PARENTESIS_A LLAVE_A animCondicion LLAVE_C COMA animCondicion2 COMA NUMERO PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("anim",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // parametros2 ::= COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",54, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // parametros2 ::= ID parametros 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",54, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // parametros2 ::= COMA ID parametros 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",54, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // parametros2 ::= COMA ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",54, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // parametros ::= ID parametros2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // parametros ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // funcion ::= FUNCTION ID PARENTESIS_A LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // funcion ::= FUNCTION ID PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // funcion ::= FUNCTION PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A error LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // funcion ::= FUNCTION ID PARENTESIS_A error LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // funcion ::= FUNCTION ID error PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // funcion ::= FUNCTION error PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // funcion ::= FUNCTION ID PARENTESIS_A parametros LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // funcion ::= FUNCTION ID parametros PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // funcion ::= FUNCTION PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A error LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // funcion ::= FUNCTION ID PARENTESIS_A parametros error LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // funcion ::= FUNCTION ID error parametros PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // funcion ::= FUNCTION error PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // funcion ::= FUNCTION ID PARENTESIS_A LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // funcion ::= FUNCTION ID PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // funcion ::= FUNCTION PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A cuerpo LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A cuerpo error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A error cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // funcion ::= FUNCTION ID PARENTESIS_A error LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // funcion ::= FUNCTION ID error PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // funcion ::= FUNCTION error PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // funcion ::= FUNCTION ID PARENTESIS_A parametros LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // funcion ::= FUNCTION ID parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // funcion ::= FUNCTION PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A cuerpo LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A cuerpo error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A error cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // funcion ::= FUNCTION ID PARENTESIS_A parametros error LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // funcion ::= FUNCTION ID error parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // funcion ::= FUNCTION error PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // comparador ::= IGUAL2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // comparador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // comparador ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // comparador ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // compuerta ::= XOR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // compuerta ::= ORSIMPLE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // compuerta ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // compuerta ::= ANDSIMPLE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // compuerta ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // listaArray ::= NUMSTR error listaArray 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("listaArray",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // listaArray ::= NUMSTR COMA listaArray 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("listaArray",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // listaArray ::= NUMSTR COMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("listaArray",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NUMSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMSTR",47, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NUMSTR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMSTR",47, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NUMIDSTR ::= INVNUMERO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",46, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NUMIDSTR ::= NUMERO INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",46, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NUMIDSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",46, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NUMIDSTR ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",46, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NUMIDSTR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",46, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // grupos1 ::= grupo2_2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupos1",44, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // grupos1 ::= grupo1_3 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("grupos1",44, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // asignarVariable ::= ID error NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '=' ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // asignarVariable ::= ID ASIGNACION NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // asignarVariable ::= ID ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // asignarVariable ::= ID error ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un  '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // asignarVariable ::= VAR ID ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // asignarVariable ::= VAR ID error NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un  '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // asignarVariable ::= VAR error ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // asignarVariable ::= ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // asignarVariable ::= ID ASIGNACION PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" No se asigno un valor a la variable."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // asignarVariable ::= ID NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // asignarVariable ::= VAR ID PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '=."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // asignarVariable ::= VAR ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // asignarVariable ::= VAR ID ASIGNACION PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" No se asigno un valor a la variable."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // asignarVariable ::= VAR ID NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // asignarVariable ::= ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NUMID ::= INVNUMERO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",45, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NUMID ::= NUMERO INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",45, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NUMID ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",45, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NUMID ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",45, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expFor3 ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un un operador de decremento o cremento."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expFor3 ::= error OPERDECREMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expFor3 ::= ID OPERDECREMENTO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expFor3 ::= ID OPERCREMENTO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expFor2 ::= NUMID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un operador relacional ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor2",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expFor2 ::= NUMID comparador NUMID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor2",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expFor1 ::= VAR ID ASIGNACION INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expFor1 ::= VAR ID error NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expFor1 ::= VAR error ASIGNACION NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expFor1 ::= VAR ID ASIGNACION NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // condicionFor ::= expFor1 PUNTOCOMA expFor2 expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // condicionFor ::= expFor1 PUNTOCOMA PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el segundo parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // condicionFor ::= expFor1 expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // condicionFor ::= PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el primer parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el tercer parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // condicionFor ::= expFor1 PUNTOCOMA expFor2 error expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // condicionFor ::= expFor1 error expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C error cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentenciaFor ::= FOR PARENTESIS_A condicionFor error LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentenciaFor ::= FOR error condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C error LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentenciaFor ::= FOR PARENTESIS_A condicionFor error LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentenciaFor ::= FOR error condicionFor PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentenciaFor ::= FOR PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentenciaDeclare ::= DECLARE PAGE ID error LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentenciaDeclare ::= DECLARE PAGE error LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentenciaDeclare ::= DECLARE error ID LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'PAGE'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C PUNTOCOMA sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cuerpoTablaTh ::= TH LLAVE_A STRING LLAVE_C COMA cuerpoTablaTh 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTh",66, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cuerpoTablaTh ::= TH LLAVE_A STRING LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTh",66, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cuerpoTablaTh ::= TH LLAVE_A LLAVE_C COMA cuerpoTablaTh 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTh",66, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // cuerpoTablaTh ::= TH LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTh",66, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cuerpoTablaTr ::= 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTr",65, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cuerpoTablaTr ::= LLAVE_A TR LLAVE_A cuerpoTablaTh LLAVE_C LLAVE_C COMA cuerpoTablaTr 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTr",65, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cuerpoTablaTr ::= LLAVE_A TR LLAVE_A cuerpoTablaTh LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTr",65, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cuerpoTablaTr ::= LLAVE_A TR LLAVE_A LLAVE_C LLAVE_C COMA cuerpoTablaTr 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTr",65, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cuerpoTablaTr ::= LLAVE_A TR LLAVE_A LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTablaTr",65, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tabla ::= TABLE PARENTESIS_A STRING COMA cuerpoTablaTr COMA cuerpoTablaTr COMA cuerpoTablaTr PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",64, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cuerpo ::= accederMetodos cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cuerpo ::= accederMetodos 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cuerpo ::= tabla cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpo ::= tabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo ::= funcion cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cuerpo ::= funcion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpo ::= asignarVariable cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cuerpo ::= asignarVariable 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cuerpo ::= sentenciaFor cuerpo 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cuerpo ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_A error LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Inesperado ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_A LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_A error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentenciaSCRIPT ::= SCRIPT ID error LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentenciaSCRIPT ::= SCRIPT error LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentenciaSCRIPT ::= SCRIPT PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciaSCRIPT ::= SCRIPT LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentenciaSCRIPT ::= SCRIPT LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentenciaSCRIPT ::= SCRIPT LLAVE_A PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentenciaSCRIPT ::= SCRIPT ID PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaSCRIPT ::= SCRIPT LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_A PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentenciaSCRIPT ::= SCRIPT ID LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaSCRIPT",42, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NI ::= STRING SUMA NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",52, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NI ::= NUMERO SUMA STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",52, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NI ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",52, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NI ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",52, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NI ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",52, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicionCSS2 ::= COMA STRING DOSPUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING', 'NUMERO' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",53, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicionCSS2 ::= COMA STRING NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",53, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicionCSS2 ::= COMA DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",53, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicionCSS2 ::= STRING DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ',''."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",53, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",53, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",53, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicionCSS ::= 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicionCSS ::= STRING DOSPUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING', 'NUMERO' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicionCSS ::= STRING NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicionCSS ::= DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicionCSS ::= STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicionCSS ::= STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",41, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cadena ::= ID COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ' \" '."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cadena ::= COMILLA_SIMPLE ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ' \" '."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cadena ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",63, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaCSS ::= CSS cadena COMA condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ']'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaCSS ::= CSS cadena COMA CORCHETE_A condicionCSS PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ']'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaCSS ::= CSS cadena COMA CORCHETE_A condicionCSS CORCHETE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaCSS ::= CSS cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA condicionCSS CORCHETE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '['."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '['."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA condicionCSS PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '['."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ']'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ']'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaCSS ::= CSS PARENTESIS_A cadena CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaCSS ::= CSS PARENTESIS_A COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciaCSS ::= CSS cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS error PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA error condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentenciaCSS ::= CSS PARENTESIS_A cadena error CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba una ',' despues del primero parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaCSS ::= CSS PARENTESIS_A error COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaCSS ::= CSS error cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",40, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciaJS ::= JS ID cuerpo PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciaJS ::= JS ID cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentenciaJS ::= JS ID LLAVE_A cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentenciaJS ::= JS ID LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentenciaJS ::= JS ID cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentenciaJS ::= JS ID LLAVE_A cuerpo PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaJS ::= JS LLAVE_A cuerpo PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentenciaJS ::= ID LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaJS ::= JS ID LLAVE_A cuerpo LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentenciaJS ::= JS ID LLAVE_A cuerpo error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentenciaJS ::= JS error LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentenciaJS ::= JS ID error cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentenciaJS ::= JS ID LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentenciaHTML ::= HTML cuerpo PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentenciaHTML ::= HTML cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentenciaHTML ::= HTML LLAVE_A cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciaHTML ::= HTML LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentenciaHTML ::= HTML cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentenciaHTML ::= HTML LLAVE_A cuerpo PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentenciaHTML ::= LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciaHTML ::= HTML LLAVE_A cuerpo LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaHTML ::= HTML LLAVE_A cuerpo error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaHTML ::= HTML error cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaHTML ::= HTML LLAVE_A cuerpo LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",39, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciasInterior ::= sentenciaSCRIPT sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciasInterior ::= sentenciaSCRIPT 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciasInterior ::= sentenciaCSS sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciasInterior ::= sentenciaCSS 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciasInterior ::= sentenciaJS sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciasInterior ::= sentenciaJS 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",38, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primeraSentencia ::= sentenciaHTML sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primeraSentencia",62, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primeraSentencia ::= sentenciaHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primeraSentencia",62, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaMain ::= MAIN ID LLAVE_A error LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error en la estructura del programa."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia LLAVE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentenciaMain ::= MAIN ID error primeraSentencia LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentenciaMain ::= MAIN error LLAVE_A primeraSentencia LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentenciaMain ::= error ID LLAVE_A primeraSentencia LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba funcion 'MAIN'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentenciaMain ::= MAIN primeraSentencia LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentenciaMain ::= MAIN LLAVE_A primeraSentencia PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(aleft+1)+", columna: "+(aright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentenciaMain ::= MAIN ID primeraSentencia PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentenciaMain ::= MAIN ID primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(aleft+1)+", columna: "+(aright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentenciaMain ::= MAIN LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(aleft+1)+", columna: "+(aright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciaMain ::= MAIN ID primeraSentencia LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentenciaMain ::= MAIN LLAVE_A primeraSentencia LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentenciaMain ::= ID LLAVE_A primeraSentencia LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'MAIN'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciaMain ::= MAIN ID LLAVE_A LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba funcion 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciaMain ::= MAIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{};'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia LLAVE_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error en la estructura del 'MAIN'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sentenciaMain sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentenciaMain 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

