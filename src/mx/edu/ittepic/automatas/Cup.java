
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 28 09:48:19 MST 2017
//----------------------------------------------------

package mx.edu.ittepic.automatas;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 28 09:48:19 MST 2017
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\007\000\002\003\003" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\032\003\000\002" +
    "\032\004\000\002\021\003\000\002\021\004\000\002\021" +
    "\003\000\002\021\004\000\002\022\006\000\002\022\005" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\023\012\000\002\023\012\000\002\023\012" +
    "\000\002\023\012\000\002\023\012\000\002\023\012\000" +
    "\002\023\013\000\002\033\003\000\002\033\003\000\002" +
    "\024\005\000\002\024\006\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\002\000\002\030\006" +
    "\000\002\030\007\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\005\000\002\027" +
    "\005\000\002\007\003\000\002\007\004\000\002\007\003" +
    "\000\002\007\004\000\002\007\003\000\002\007\004\000" +
    "\002\007\003\000\002\007\004\000\002\007\003\000\002" +
    "\007\004\000\002\007\003\000\002\007\004\000\002\007" +
    "\003\000\002\007\004\000\002\007\003\000\002\007\004" +
    "\000\002\036\006\000\002\036\006\000\002\036\006\000" +
    "\002\036\006\000\002\037\010\000\002\037\006\000\002" +
    "\037\010\000\002\037\010\000\002\037\010\000\002\037" +
    "\010\000\002\037\010\000\002\037\010\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\041\006\000\002" +
    "\041\010\000\002\041\005\000\002\041\006\000\002\041" +
    "\006\000\002\041\006\000\002\041\006\000\002\041\010" +
    "\000\002\041\010\000\002\041\010\000\002\041\010\000" +
    "\002\041\010\000\002\041\010\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\003\000\002" +
    "\040\006\000\002\040\005\000\002\040\006\000\002\040" +
    "\006\000\002\040\006\000\002\045\012\000\002\045\012" +
    "\000\002\045\012\000\002\045\012\000\002\045\012\000" +
    "\002\045\012\000\002\045\012\000\002\045\012\000\002" +
    "\034\005\000\002\034\022\000\002\034\022\000\002\034" +
    "\022\000\002\034\022\000\002\034\022\000\002\034\022" +
    "\000\002\034\022\000\002\034\022\000\002\034\022\000" +
    "\002\034\022\000\002\034\022\000\002\034\022\000\002" +
    "\034\022\000\002\034\022\000\002\034\022\000\002\034" +
    "\022\000\002\035\003\000\002\035\005\000\002\035\003" +
    "\000\002\035\004\000\002\004\007\000\002\004\010\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\015\011\000\002\015\010\000\002\015" +
    "\010\000\002\015\010\000\002\015\010\000\002\015\010" +
    "\000\002\015\011\000\002\015\011\000\002\015\011\000" +
    "\002\015\011\000\002\014\007\000\002\014\007\000\002" +
    "\014\007\000\002\014\007\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\017\005\000\002\017\003\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\020\004\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\004" +
    "\000\002\005\007\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\007\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\004\000\002\026\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\011\012\000\002\011" +
    "\010\000\002\011\011\000\002\011\011\000\002\011\012" +
    "\000\002\011\012\000\002\011\012\000\002\011\012\000" +
    "\002\011\012\000\002\011\011\000\002\011\011\000\002" +
    "\011\011\000\002\011\012\000\002\011\012\000\002\011" +
    "\011\000\002\011\011\000\002\011\011\000\002\011\011" +
    "\000\002\011\011\000\002\011\010\000\002\011\010\000" +
    "\002\011\010\000\002\011\010\000\002\011\011\000\002" +
    "\011\011\000\002\011\011\000\002\011\011\000\002\011" +
    "\011\000\002\011\011\000\002\011\010\000\002\011\010" +
    "\000\002\011\010\000\002\011\010\000\002\011\011\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\007\000\002\011" +
    "\007\000\002\011\007\000\002\011\010\000\002\011\010" +
    "\000\002\012\003\000\002\012\004\000\002\031\004\000" +
    "\002\031\005\000\002\031\004\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02a3\000\010\003\005\013\006\104\004\001\002\000" +
    "\004\044\u02a3\001\002\000\004\002\ufffe\001\002\000\012" +
    "\002\ufffc\021\ufffc\044\034\104\033\001\002\000\006\002" +
    "\000\021\012\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\006\003\015\024\014\001\002\000" +
    "\004\002\uffff\001\002\000\006\003\022\104\021\001\002" +
    "\000\004\104\016\001\002\000\004\044\017\001\002\000" +
    "\004\045\020\001\002\000\004\002\uff69\001\002\000\006" +
    "\003\025\044\026\001\002\000\004\044\023\001\002\000" +
    "\004\045\024\001\002\000\004\002\uff68\001\002\000\004" +
    "\045\032\001\002\000\006\003\027\045\030\001\002\000" +
    "\004\002\uff66\001\002\000\006\002\uff6b\021\012\001\002" +
    "\000\004\002\uff6a\001\002\000\004\002\uff67\001\002\000" +
    "\006\011\036\044\u029e\001\002\000\006\011\036\044\037" +
    "\001\002\000\014\002\ufff6\010\u024e\021\ufff6\022\u0252\045" +
    "\ufff6\001\002\000\036\003\061\012\070\014\052\016\065" +
    "\044\u0249\045\u0248\075\057\104\053\117\062\120\046\123" +
    "\055\127\044\164\054\167\047\001\002\000\034\003\061" +
    "\012\070\014\052\016\065\045\063\075\057\104\053\117" +
    "\062\120\046\123\055\127\044\164\054\167\047\001\002" +
    "\000\004\045\041\001\002\000\006\002\ufff9\021\ufff9\001" +
    "\002\000\044\002\uffc8\003\uffc8\010\uffc8\012\uffc8\014\uffc8" +
    "\016\uffc8\021\uffc8\022\uffc8\045\uffc8\075\uffc8\104\uffc8\117" +
    "\uffc8\120\uffc8\123\uffc8\127\uffc8\164\uffc8\167\uffc8\001\002" +
    "\000\006\003\u0233\042\u0234\001\002\000\006\003\u022a\042" +
    "\u022b\001\002\000\034\003\061\012\070\014\052\016\065" +
    "\045\u0229\075\057\104\053\117\062\120\046\123\055\127" +
    "\044\164\054\167\047\001\002\000\006\003\uffaa\042\uffaa" +
    "\001\002\000\006\003\u0206\042\u0207\001\002\000\044\002" +
    "\uffca\003\uffca\010\uffca\012\uffca\014\uffca\016\uffca\021\uffca" +
    "\022\uffca\045\uffca\075\uffca\104\uffca\117\uffca\120\uffca\123" +
    "\uffca\127\uffca\164\uffca\167\uffca\001\002\000\044\002\uffbc" +
    "\003\uffbc\010\uffbc\012\uffbc\014\uffbc\016\uffbc\021\uffbc\022" +
    "\uffbc\045\uffbc\075\uffbc\104\uffbc\117\uffbc\120\uffbc\123\uffbc" +
    "\127\uffbc\164\uffbc\167\uffbc\001\002\000\010\003\u0197\042" +
    "\u0198\104\u0196\001\002\000\020\003\u0178\042\u0179\075\u0177" +
    "\104\076\106\100\107\075\163\101\001\002\000\006\003" +
    "\351\042\352\001\002\000\006\003\uffa9\042\uffa9\001\002" +
    "\000\044\002\uffc0\003\uffc0\010\uffc0\012\uffc0\014\uffc0\016" +
    "\uffc0\021\uffc0\022\uffc0\045\uffc0\075\uffc0\104\uffc0\117\uffc0" +
    "\120\uffc0\123\uffc0\127\uffc0\164\uffc0\167\uffc0\001\002\000" +
    "\012\104\076\106\100\107\075\163\101\001\002\000\044" +
    "\002\uffbe\003\uffbe\010\uffbe\012\uffbe\014\uffbe\016\uffbe\021" +
    "\uffbe\022\uffbe\045\uffbe\075\uffbe\104\uffbe\117\uffbe\120\uffbe" +
    "\123\uffbe\127\uffbe\164\uffbe\167\uffbe\001\002\000\004\042" +
    "\141\001\002\000\006\003\uffab\042\uffab\001\002\000\014" +
    "\002\uffec\010\uffec\021\uffec\022\uffec\045\uffec\001\002\000" +
    "\044\002\uffc2\003\uffc2\010\uffc2\012\uffc2\014\uffc2\016\uffc2" +
    "\021\uffc2\022\uffc2\045\uffc2\075\uffc2\104\uffc2\117\uffc2\120" +
    "\uffc2\123\uffc2\127\uffc2\164\uffc2\167\uffc2\001\002\000\006" +
    "\003\124\042\125\001\002\000\044\002\uffc4\003\uffc4\010" +
    "\uffc4\012\uffc4\014\uffc4\016\uffc4\021\uffc4\022\uffc4\045\uffc4" +
    "\075\uffc4\104\uffc4\117\uffc4\120\uffc4\123\uffc4\127\uffc4\164" +
    "\uffc4\167\uffc4\001\002\000\044\002\uffc6\003\uffc6\010\uffc6" +
    "\012\uffc6\014\uffc6\016\uffc6\021\uffc6\022\uffc6\045\uffc6\075" +
    "\uffc6\104\uffc6\117\uffc6\120\uffc6\123\uffc6\127\uffc6\164\uffc6" +
    "\167\uffc6\001\002\000\010\003\073\075\072\104\071\001" +
    "\002\000\020\003\111\051\112\075\110\104\076\106\100" +
    "\107\075\163\101\001\002\000\012\104\076\106\100\107" +
    "\075\163\101\001\002\000\004\075\074\001\002\000\012" +
    "\104\076\106\100\107\075\163\101\001\002\000\012\003" +
    "\uff34\043\uff34\051\uff34\163\104\001\002\000\010\003\uff33" +
    "\043\uff33\051\uff33\001\002\000\004\051\103\001\002\000" +
    "\010\003\uff32\043\uff32\051\uff32\001\002\000\004\107\102" +
    "\001\002\000\010\003\uff30\043\uff30\051\uff30\001\002\000" +
    "\044\002\uff3c\003\uff3c\010\uff3c\012\uff3c\014\uff3c\016\uff3c" +
    "\021\uff3c\022\uff3c\045\uff3c\075\uff3c\104\uff3c\117\uff3c\120" +
    "\uff3c\123\uff3c\127\uff3c\164\uff3c\167\uff3c\001\002\000\010" +
    "\003\uff31\043\uff31\051\uff31\001\002\000\004\051\106\001" +
    "\002\000\044\002\uff41\003\uff41\010\uff41\012\uff41\014\uff41" +
    "\016\uff41\021\uff41\022\uff41\045\uff41\075\uff41\104\uff41\117" +
    "\uff41\120\uff41\123\uff41\127\uff41\164\uff41\167\uff41\001\002" +
    "\000\004\051\123\001\002\000\016\003\116\051\117\104" +
    "\076\106\100\107\075\163\101\001\002\000\012\104\076" +
    "\106\100\107\075\163\101\001\002\000\044\002\uff40\003" +
    "\uff40\010\uff40\012\uff40\014\uff40\016\uff40\021\uff40\022\uff40" +
    "\045\uff40\075\uff40\104\uff40\117\uff40\120\uff40\123\uff40\127" +
    "\uff40\164\uff40\167\uff40\001\002\000\004\051\114\001\002" +
    "\000\044\002\uff3b\003\uff3b\010\uff3b\012\uff3b\014\uff3b\016" +
    "\uff3b\021\uff3b\022\uff3b\045\uff3b\075\uff3b\104\uff3b\117\uff3b" +
    "\120\uff3b\123\uff3b\127\uff3b\164\uff3b\167\uff3b\001\002\000" +
    "\006\003\121\051\122\001\002\000\004\051\120\001\002" +
    "\000\044\002\uff42\003\uff42\010\uff42\012\uff42\014\uff42\016" +
    "\uff42\021\uff42\022\uff42\045\uff42\075\uff42\104\uff42\117\uff42" +
    "\120\uff42\123\uff42\127\uff42\164\uff42\167\uff42\001\002\000" +
    "\044\002\uff3a\003\uff3a\010\uff3a\012\uff3a\014\uff3a\016\uff3a" +
    "\021\uff3a\022\uff3a\045\uff3a\075\uff3a\104\uff3a\117\uff3a\120" +
    "\uff3a\123\uff3a\127\uff3a\164\uff3a\167\uff3a\001\002\000\044" +
    "\002\uff39\003\uff39\010\uff39\012\uff39\014\uff39\016\uff39\021" +
    "\uff39\022\uff39\045\uff39\075\uff39\104\uff39\117\uff39\120\uff39" +
    "\123\uff39\127\uff39\164\uff39\167\uff39\001\002\000\044\002" +
    "\uff45\003\uff45\010\uff45\012\uff45\014\uff45\016\uff45\021\uff45" +
    "\022\uff45\045\uff45\075\uff45\104\uff45\117\uff45\120\uff45\123" +
    "\uff45\127\uff45\164\uff45\167\uff45\001\002\000\044\002\uff43" +
    "\003\uff43\010\uff43\012\uff43\014\uff43\016\uff43\021\uff43\022" +
    "\uff43\045\uff43\075\uff43\104\uff43\117\uff43\120\uff43\123\uff43" +
    "\127\uff43\164\uff43\167\uff43\001\002\000\006\012\126\051" +
    "\130\001\002\000\006\012\126\051\130\001\002\000\006" +
    "\003\331\104\330\001\002\000\014\003\310\051\311\104" +
    "\261\107\257\163\263\001\002\000\010\104\261\107\257" +
    "\163\263\001\002\000\006\003\132\043\133\001\002\000" +
    "\004\044\253\001\002\000\006\003\134\044\135\001\002" +
    "\000\034\003\061\012\070\014\052\016\065\045\251\075" +
    "\057\104\053\117\062\120\046\123\055\127\044\164\054" +
    "\167\047\001\002\000\034\003\137\012\070\014\052\016" +
    "\065\045\140\075\057\104\053\117\062\120\046\123\055" +
    "\127\044\164\054\167\047\001\002\000\034\003\243\012" +
    "\070\014\052\016\065\045\244\075\057\104\053\117\062" +
    "\120\046\123\055\127\044\164\054\167\047\001\002\000" +
    "\046\002\uff60\003\uff60\010\uff60\012\uff60\014\uff60\016\uff60" +
    "\021\uff60\022\uff60\042\141\045\uff60\075\uff60\104\uff60\117" +
    "\uff60\120\uff60\123\uff60\127\uff60\164\uff60\167\uff60\001\002" +
    "\000\044\002\uff64\003\uff64\010\uff64\012\uff64\014\uff64\016" +
    "\uff64\021\uff64\022\uff64\045\uff64\075\uff64\104\uff64\117\uff64" +
    "\120\uff64\123\uff64\127\uff64\164\uff64\167\uff64\001\002\000" +
    "\004\106\142\001\002\000\004\043\143\001\002\000\004" +
    "\053\144\001\002\000\032\003\154\115\151\125\153\130" +
    "\162\131\160\132\147\133\157\137\152\142\145\160\161" +
    "\161\150\166\156\001\002\000\006\003\uff8e\042\uff8e\001" +
    "\002\000\006\003\212\042\213\001\002\000\006\003\uff92" +
    "\042\uff92\001\002\000\006\003\uff90\042\uff90\001\002\000" +
    "\006\003\uff93\042\uff93\001\002\000\006\003\uff98\042\uff98" +
    "\001\002\000\006\003\uff8f\042\uff8f\001\002\000\004\042" +
    "\203\001\002\000\044\002\uffb4\003\uffb4\010\uffb4\012\uffb4" +
    "\014\uffb4\016\uffb4\021\uffb4\022\uffb4\045\uffb4\075\uffb4\104" +
    "\uffb4\117\uffb4\120\uffb4\123\uffb4\127\uffb4\164\uffb4\167\uffb4" +
    "\001\002\000\006\003\uff97\042\uff97\001\002\000\006\003" +
    "\uff94\042\uff94\001\002\000\006\003\uff96\042\uff96\001\002" +
    "\000\006\003\uff91\042\uff91\001\002\000\006\003\uff95\042" +
    "\uff95\001\002\000\006\003\176\042\177\001\002\000\006" +
    "\003\165\042\166\001\002\000\004\106\174\001\002\000" +
    "\006\003\170\106\167\001\002\000\006\003\172\043\173" +
    "\001\002\000\004\043\171\001\002\000\044\002\uffa3\003" +
    "\uffa3\010\uffa3\012\uffa3\014\uffa3\016\uffa3\021\uffa3\022\uffa3" +
    "\045\uffa3\075\uffa3\104\uffa3\117\uffa3\120\uffa3\123\uffa3\127" +
    "\uffa3\164\uffa3\167\uffa3\001\002\000\044\002\uffa2\003\uffa2" +
    "\010\uffa2\012\uffa2\014\uffa2\016\uffa2\021\uffa2\022\uffa2\045" +
    "\uffa2\075\uffa2\104\uffa2\117\uffa2\120\uffa2\123\uffa2\127\uffa2" +
    "\164\uffa2\167\uffa2\001\002\000\044\002\uffa8\003\uffa8\010" +
    "\uffa8\012\uffa8\014\uffa8\016\uffa8\021\uffa8\022\uffa8\045\uffa8" +
    "\075\uffa8\104\uffa8\117\uffa8\120\uffa8\123\uffa8\127\uffa8\164" +
    "\uffa8\167\uffa8\001\002\000\004\043\175\001\002\000\044" +
    "\002\uffa4\003\uffa4\010\uffa4\012\uffa4\014\uffa4\016\uffa4\021" +
    "\uffa4\022\uffa4\045\uffa4\075\uffa4\104\uffa4\117\uffa4\120\uffa4" +
    "\123\uffa4\127\uffa4\164\uffa4\167\uffa4\001\002\000\004\043" +
    "\202\001\002\000\006\003\200\043\201\001\002\000\044" +
    "\002\uff99\003\uff99\010\uff99\012\uff99\014\uff99\016\uff99\021" +
    "\uff99\022\uff99\045\uff99\075\uff99\104\uff99\117\uff99\120\uff99" +
    "\123\uff99\127\uff99\164\uff99\167\uff99\001\002\000\044\002" +
    "\uffa6\003\uffa6\010\uffa6\012\uffa6\014\uffa6\016\uffa6\021\uffa6" +
    "\022\uffa6\045\uffa6\075\uffa6\104\uffa6\117\uffa6\120\uffa6\123" +
    "\uffa6\127\uffa6\164\uffa6\167\uffa6\001\002\000\044\002\uff9a" +
    "\003\uff9a\010\uff9a\012\uff9a\014\uff9a\016\uff9a\021\uff9a\022" +
    "\uff9a\045\uff9a\075\uff9a\104\uff9a\117\uff9a\120\uff9a\123\uff9a" +
    "\127\uff9a\164\uff9a\167\uff9a\001\002\000\006\043\205\106" +
    "\204\001\002\000\006\043\207\110\206\001\002\000\044" +
    "\002\uff9b\003\uff9b\010\uff9b\012\uff9b\014\uff9b\016\uff9b\021" +
    "\uff9b\022\uff9b\045\uff9b\075\uff9b\104\uff9b\117\uff9b\120\uff9b" +
    "\123\uff9b\127\uff9b\164\uff9b\167\uff9b\001\002\000\004\106" +
    "\210\001\002\000\044\002\uffa5\003\uffa5\010\uffa5\012\uffa5" +
    "\014\uffa5\016\uffa5\021\uffa5\022\uffa5\045\uffa5\075\uffa5\104" +
    "\uffa5\117\uffa5\120\uffa5\123\uffa5\127\uffa5\164\uffa5\167\uffa5" +
    "\001\002\000\004\043\211\001\002\000\044\002\uffa1\003" +
    "\uffa1\010\uffa1\012\uffa1\014\uffa1\016\uffa1\021\uffa1\022\uffa1" +
    "\045\uffa1\075\uffa1\104\uffa1\117\uffa1\120\uffa1\123\uffa1\127" +
    "\uffa1\164\uffa1\167\uffa1\001\002\000\004\106\232\001\002" +
    "\000\006\003\215\106\214\001\002\000\006\003\222\110" +
    "\221\001\002\000\004\110\216\001\002\000\004\106\217" +
    "\001\002\000\004\043\220\001\002\000\044\002\uff9f\003" +
    "\uff9f\010\uff9f\012\uff9f\014\uff9f\016\uff9f\021\uff9f\022\uff9f" +
    "\045\uff9f\075\uff9f\104\uff9f\117\uff9f\120\uff9f\123\uff9f\127" +
    "\uff9f\164\uff9f\167\uff9f\001\002\000\006\003\226\106\225" +
    "\001\002\000\004\106\223\001\002\000\004\043\224\001" +
    "\002\000\044\002\uff9e\003\uff9e\010\uff9e\012\uff9e\014\uff9e" +
    "\016\uff9e\021\uff9e\022\uff9e\045\uff9e\075\uff9e\104\uff9e\117" +
    "\uff9e\120\uff9e\123\uff9e\127\uff9e\164\uff9e\167\uff9e\001\002" +
    "\000\006\003\230\043\231\001\002\000\004\043\227\001" +
    "\002\000\044\002\uff9d\003\uff9d\010\uff9d\012\uff9d\014\uff9d" +
    "\016\uff9d\021\uff9d\022\uff9d\045\uff9d\075\uff9d\104\uff9d\117" +
    "\uff9d\120\uff9d\123\uff9d\127\uff9d\164\uff9d\167\uff9d\001\002" +
    "\000\044\002\uff9c\003\uff9c\010\uff9c\012\uff9c\014\uff9c\016" +
    "\uff9c\021\uff9c\022\uff9c\045\uff9c\075\uff9c\104\uff9c\117\uff9c" +
    "\120\uff9c\123\uff9c\127\uff9c\164\uff9c\167\uff9c\001\002\000" +
    "\044\002\uffa7\003\uffa7\010\uffa7\012\uffa7\014\uffa7\016\uffa7" +
    "\021\uffa7\022\uffa7\045\uffa7\075\uffa7\104\uffa7\117\uffa7\120" +
    "\uffa7\123\uffa7\127\uffa7\164\uffa7\167\uffa7\001\002\000\004" +
    "\110\233\001\002\000\004\106\234\001\002\000\004\043" +
    "\235\001\002\000\044\002\uffa0\003\uffa0\010\uffa0\012\uffa0" +
    "\014\uffa0\016\uffa0\021\uffa0\022\uffa0\045\uffa0\075\uffa0\104" +
    "\uffa0\117\uffa0\120\uffa0\123\uffa0\127\uffa0\164\uffa0\167\uffa0" +
    "\001\002\000\044\002\uffc7\003\uffc7\010\uffc7\012\uffc7\014" +
    "\uffc7\016\uffc7\021\uffc7\022\uffc7\045\uffc7\075\uffc7\104\uffc7" +
    "\117\uffc7\120\uffc7\123\uffc7\127\uffc7\164\uffc7\167\uffc7\001" +
    "\002\000\044\002\uffc9\003\uffc9\010\uffc9\012\uffc9\014\uffc9" +
    "\016\uffc9\021\uffc9\022\uffc9\045\uffc9\075\uffc9\104\uffc9\117" +
    "\uffc9\120\uffc9\123\uffc9\127\uffc9\164\uffc9\167\uffc9\001\002" +
    "\000\044\002\uffbb\003\uffbb\010\uffbb\012\uffbb\014\uffbb\016" +
    "\uffbb\021\uffbb\022\uffbb\045\uffbb\075\uffbb\104\uffbb\117\uffbb" +
    "\120\uffbb\123\uffbb\127\uffbb\164\uffbb\167\uffbb\001\002\000" +
    "\044\002\uffbf\003\uffbf\010\uffbf\012\uffbf\014\uffbf\016\uffbf" +
    "\021\uffbf\022\uffbf\045\uffbf\075\uffbf\104\uffbf\117\uffbf\120" +
    "\uffbf\123\uffbf\127\uffbf\164\uffbf\167\uffbf\001\002\000\044" +
    "\002\uffbd\003\uffbd\010\uffbd\012\uffbd\014\uffbd\016\uffbd\021" +
    "\uffbd\022\uffbd\045\uffbd\075\uffbd\104\uffbd\117\uffbd\120\uffbd" +
    "\123\uffbd\127\uffbd\164\uffbd\167\uffbd\001\002\000\046\002" +
    "\uff5c\003\uff5c\010\uff5c\012\uff5c\014\uff5c\016\uff5c\021\uff5c" +
    "\022\uff5c\042\141\045\uff5c\075\uff5c\104\uff5c\117\uff5c\120" +
    "\uff5c\123\uff5c\127\uff5c\164\uff5c\167\uff5c\001\002\000\044" +
    "\002\uff65\003\uff65\010\uff65\012\uff65\014\uff65\016\uff65\021" +
    "\uff65\022\uff65\045\uff65\075\uff65\104\uff65\117\uff65\120\uff65" +
    "\123\uff65\127\uff65\164\uff65\167\uff65\001\002\000\044\002" +
    "\uffc1\003\uffc1\010\uffc1\012\uffc1\014\uffc1\016\uffc1\021\uffc1" +
    "\022\uffc1\045\uffc1\075\uffc1\104\uffc1\117\uffc1\120\uffc1\123" +
    "\uffc1\127\uffc1\164\uffc1\167\uffc1\001\002\000\044\002\uffc3" +
    "\003\uffc3\010\uffc3\012\uffc3\014\uffc3\016\uffc3\021\uffc3\022" +
    "\uffc3\045\uffc3\075\uffc3\104\uffc3\117\uffc3\120\uffc3\123\uffc3" +
    "\127\uffc3\164\uffc3\167\uffc3\001\002\000\044\002\uffc5\003" +
    "\uffc5\010\uffc5\012\uffc5\014\uffc5\016\uffc5\021\uffc5\022\uffc5" +
    "\045\uffc5\075\uffc5\104\uffc5\117\uffc5\120\uffc5\123\uffc5\127" +
    "\uffc5\164\uffc5\167\uffc5\001\002\000\034\003\061\012\070" +
    "\014\052\016\065\045\252\075\057\104\053\117\062\120" +
    "\046\123\055\127\044\164\054\167\047\001\002\000\044" +
    "\002\uff61\003\uff61\010\uff61\012\uff61\014\uff61\016\uff61\021" +
    "\uff61\022\uff61\045\uff61\075\uff61\104\uff61\117\uff61\120\uff61" +
    "\123\uff61\127\uff61\164\uff61\167\uff61\001\002\000\044\002" +
    "\uff5d\003\uff5d\010\uff5d\012\uff5d\014\uff5d\016\uff5d\021\uff5d" +
    "\022\uff5d\045\uff5d\075\uff5d\104\uff5d\117\uff5d\120\uff5d\123" +
    "\uff5d\127\uff5d\164\uff5d\167\uff5d\001\002\000\034\003\061" +
    "\012\070\014\052\016\065\045\255\075\057\104\053\117" +
    "\062\120\046\123\055\127\044\164\054\167\047\001\002" +
    "\000\034\003\061\012\070\014\052\016\065\045\256\075" +
    "\057\104\053\117\062\120\046\123\055\127\044\164\054" +
    "\167\047\001\002\000\044\002\uff62\003\uff62\010\uff62\012" +
    "\uff62\014\uff62\016\uff62\021\uff62\022\uff62\045\uff62\075\uff62" +
    "\104\uff62\117\uff62\120\uff62\123\uff62\127\uff62\164\uff62\167" +
    "\uff62\001\002\000\044\002\uff5e\003\uff5e\010\uff5e\012\uff5e" +
    "\014\uff5e\016\uff5e\021\uff5e\022\uff5e\045\uff5e\075\uff5e\104" +
    "\uff5e\117\uff5e\120\uff5e\123\uff5e\127\uff5e\164\uff5e\167\uff5e" +
    "\001\002\000\030\003\uff48\051\uff48\062\uff48\063\uff48\064" +
    "\uff48\065\uff48\066\uff48\067\uff48\070\uff48\104\uff48\163\306" +
    "\001\002\000\004\051\276\001\002\000\026\003\uff49\051" +
    "\uff49\062\uff49\063\uff49\064\uff49\065\uff49\066\uff49\067\uff49" +
    "\070\uff49\104\uff49\001\002\000\026\003\uff4e\051\uff4e\062" +
    "\270\063\265\064\272\065\266\066\267\067\273\070\271" +
    "\104\uff4e\001\002\000\004\107\264\001\002\000\026\003" +
    "\uff46\051\uff46\062\uff46\063\uff46\064\uff46\065\uff46\066\uff46" +
    "\067\uff46\070\uff46\104\uff46\001\002\000\010\104\uff29\107" +
    "\uff29\163\uff29\001\002\000\010\104\uff27\107\uff27\163\uff27" +
    "\001\002\000\010\104\uff26\107\uff26\163\uff26\001\002\000" +
    "\010\104\uff2a\107\uff2a\163\uff2a\001\002\000\010\104\uff24" +
    "\107\uff24\163\uff24\001\002\000\010\104\uff28\107\uff28\163" +
    "\uff28\001\002\000\010\104\uff25\107\uff25\163\uff25\001\002" +
    "\000\010\104\261\107\257\163\263\001\002\000\010\003" +
    "\uff4f\051\uff4f\104\uff4f\001\002\000\006\003\300\104\277" +
    "\001\002\000\010\003\304\102\305\103\303\001\002\000" +
    "\004\102\302\001\002\000\006\003\uff57\043\uff57\001\002" +
    "\000\006\003\uff4b\043\uff4b\001\002\000\006\003\uff4d\043" +
    "\uff4d\001\002\000\006\003\uff4a\043\uff4a\001\002\000\006" +
    "\003\uff4c\043\uff4c\001\002\000\026\003\uff47\051\uff47\062" +
    "\uff47\063\uff47\064\uff47\065\uff47\066\uff47\067\uff47\070\uff47" +
    "\104\uff47\001\002\000\004\051\326\001\002\000\010\104" +
    "\261\107\257\163\263\001\002\000\012\051\313\104\261" +
    "\107\257\163\263\001\002\000\010\003\315\051\316\104" +
    "\277\001\002\000\006\003\300\104\277\001\002\000\006" +
    "\003\uff55\043\uff55\001\002\000\010\003\300\102\302\104" +
    "\277\001\002\000\006\003\320\104\277\001\002\000\006" +
    "\003\uff54\043\uff54\001\002\000\010\003\uff58\043\uff58\102" +
    "\302\001\002\000\006\003\uff5b\043\uff5b\001\002\000\006" +
    "\003\uff59\043\uff59\001\002\000\004\051\324\001\002\000" +
    "\006\003\300\104\277\001\002\000\006\003\uff5a\043\uff5a" +
    "\001\002\000\006\003\300\104\277\001\002\000\006\003" +
    "\uff56\043\uff56\001\002\000\006\003\335\075\334\001\002" +
    "\000\004\075\332\001\002\000\004\107\333\001\002\000" +
    "\014\003\uff52\051\uff52\104\uff52\107\uff52\163\uff52\001\002" +
    "\000\006\107\337\163\340\001\002\000\004\107\336\001" +
    "\002\000\014\003\uff51\051\uff51\104\uff51\107\uff51\163\uff51" +
    "\001\002\000\014\003\uff53\051\uff53\104\uff53\107\uff53\163" +
    "\uff53\001\002\000\014\003\uff50\051\uff50\104\uff50\107\uff50" +
    "\163\uff50\001\002\000\004\043\342\001\002\000\004\044" +
    "\343\001\002\000\034\003\061\012\070\014\052\016\065" +
    "\045\345\075\057\104\053\117\062\120\046\123\055\127" +
    "\044\164\054\167\047\001\002\000\034\003\061\012\070" +
    "\014\052\016\065\045\346\075\057\104\053\117\062\120" +
    "\046\123\055\127\044\164\054\167\047\001\002\000\044" +
    "\002\uff63\003\uff63\010\uff63\012\uff63\014\uff63\016\uff63\021" +
    "\uff63\022\uff63\045\uff63\075\uff63\104\uff63\117\uff63\120\uff63" +
    "\123\uff63\127\uff63\164\uff63\167\uff63\001\002\000\044\002" +
    "\uff5f\003\uff5f\010\uff5f\012\uff5f\014\uff5f\016\uff5f\021\uff5f" +
    "\022\uff5f\045\uff5f\075\uff5f\104\uff5f\117\uff5f\120\uff5f\123" +
    "\uff5f\127\uff5f\164\uff5f\167\uff5f\001\002\000\004\051\350" +
    "\001\002\000\044\002\uff3d\003\uff3d\010\uff3d\012\uff3d\014" +
    "\uff3d\016\uff3d\021\uff3d\022\uff3d\045\uff3d\075\uff3d\104\uff3d" +
    "\117\uff3d\120\uff3d\123\uff3d\127\uff3d\164\uff3d\167\uff3d\001" +
    "\002\000\004\106\u0168\001\002\000\010\003\354\043\355" +
    "\106\353\001\002\000\006\003\u0101\110\u0100\001\002\000" +
    "\004\110\356\001\002\000\044\002\uff80\003\uff80\010\uff80" +
    "\012\uff80\014\uff80\016\uff80\021\uff80\022\uff80\045\uff80\075" +
    "\uff80\104\uff80\117\uff80\120\uff80\123\uff80\127\uff80\164\uff80" +
    "\167\uff80\001\002\000\004\046\357\001\002\000\006\003" +
    "\361\106\360\001\002\000\010\003\uff6f\047\uff6f\110\375" +
    "\001\002\000\006\003\uff6d\047\uff6d\001\002\000\004\047" +
    "\363\001\002\000\004\110\364\001\002\000\004\046\365" +
    "\001\002\000\006\003\361\106\360\001\002\000\004\047" +
    "\367\001\002\000\004\110\370\001\002\000\004\046\371" +
    "\001\002\000\006\003\361\106\360\001\002\000\004\047" +
    "\373\001\002\000\004\043\374\001\002\000\044\002\uff7d" +
    "\003\uff7d\010\uff7d\012\uff7d\014\uff7d\016\uff7d\021\uff7d\022" +
    "\uff7d\045\uff7d\075\uff7d\104\uff7d\117\uff7d\120\uff7d\123\uff7d" +
    "\127\uff7d\164\uff7d\167\uff7d\001\002\000\006\003\361\106" +
    "\360\001\002\000\006\003\uff6c\047\uff6c\001\002\000\006" +
    "\003\uff6e\047\uff6e\001\002\000\006\003\u010e\046\u010f\001" +
    "\002\000\004\046\u0102\001\002\000\006\003\361\106\360" +
    "\001\002\000\004\047\u0104\001\002\000\004\110\u0105\001" +
    "\002\000\004\046\u0106\001\002\000\006\003\361\106\360" +
    "\001\002\000\004\047\u0108\001\002\000\004\110\u0109\001" +
    "\002\000\004\046\u010a\001\002\000\006\003\361\106\360" +
    "\001\002\000\004\047\u010c\001\002\000\004\043\u010d\001" +
    "\002\000\044\002\uff7c\003\uff7c\010\uff7c\012\uff7c\014\uff7c" +
    "\016\uff7c\021\uff7c\022\uff7c\045\uff7c\075\uff7c\104\uff7c\117" +
    "\uff7c\120\uff7c\123\uff7c\127\uff7c\164\uff7c\167\uff7c\001\002" +
    "\000\006\003\361\106\360\001\002\000\006\003\u0110\106" +
    "\360\001\002\000\006\003\uff6d\047\u0153\001\002\000\006" +
    "\003\u0112\047\u0113\001\002\000\004\110\u014a\001\002\000" +
    "\006\003\u0115\110\u0114\001\002\000\006\003\u011e\046\u011f" +
    "\001\002\000\004\046\u0116\001\002\000\006\003\361\106" +
    "\360\001\002\000\004\047\u0118\001\002\000\004\110\u0119" +
    "\001\002\000\004\046\u011a\001\002\000\006\003\361\106" +
    "\360\001\002\000\004\047\u011c\001\002\000\004\043\u011d" +
    "\001\002\000\044\002\uff78\003\uff78\010\uff78\012\uff78\014" +
    "\uff78\016\uff78\021\uff78\022\uff78\045\uff78\075\uff78\104\uff78" +
    "\117\uff78\120\uff78\123\uff78\127\uff78\164\uff78\167\uff78\001" +
    "\002\000\006\003\361\106\360\001\002\000\006\003\u0120" +
    "\106\360\001\002\000\006\003\uff6d\047\u013d\001\002\000" +
    "\006\003\u0122\047\u0123\001\002\000\004\110\u0138\001\002" +
    "\000\006\003\u0125\110\u0124\001\002\000\006\003\u012a\046" +
    "\u012b\001\002\000\004\046\u0126\001\002\000\006\003\361" +
    "\106\360\001\002\000\004\047\u0128\001\002\000\004\043" +
    "\u0129\001\002\000\044\002\uff74\003\uff74\010\uff74\012\uff74" +
    "\014\uff74\016\uff74\021\uff74\022\uff74\045\uff74\075\uff74\104" +
    "\uff74\117\uff74\120\uff74\123\uff74\127\uff74\164\uff74\167\uff74" +
    "\001\002\000\006\003\361\106\360\001\002\000\006\003" +
    "\u012c\106\360\001\002\000\006\003\uff6d\047\u0133\001\002" +
    "\000\006\003\u012e\047\u012f\001\002\000\004\043\u0132\001" +
    "\002\000\006\003\u0130\043\u0131\001\002\000\044\002\uff70" +
    "\003\uff70\010\uff70\012\uff70\014\uff70\016\uff70\021\uff70\022" +
    "\uff70\045\uff70\075\uff70\104\uff70\117\uff70\120\uff70\123\uff70" +
    "\127\uff70\164\uff70\167\uff70\001\002\000\044\002\uff7f\003" +
    "\uff7f\010\uff7f\012\uff7f\014\uff7f\016\uff7f\021\uff7f\022\uff7f" +
    "\045\uff7f\075\uff7f\104\uff7f\117\uff7f\120\uff7f\123\uff7f\127" +
    "\uff7f\164\uff7f\167\uff7f\001\002\000\044\002\uff71\003\uff71" +
    "\010\uff71\012\uff71\014\uff71\016\uff71\021\uff71\022\uff71\045" +
    "\uff71\075\uff71\104\uff71\117\uff71\120\uff71\123\uff71\127\uff71" +
    "\164\uff71\167\uff71\001\002\000\004\043\u0134\001\002\000" +
    "\044\002\uff72\003\uff72\010\uff72\012\uff72\014\uff72\016\uff72" +
    "\021\uff72\022\uff72\045\uff72\075\uff72\104\uff72\117\uff72\120" +
    "\uff72\123\uff72\127\uff72\164\uff72\167\uff72\001\002\000\004" +
    "\047\u0136\001\002\000\004\043\u0137\001\002\000\044\002" +
    "\uff73\003\uff73\010\uff73\012\uff73\014\uff73\016\uff73\021\uff73" +
    "\022\uff73\045\uff73\075\uff73\104\uff73\117\uff73\120\uff73\123" +
    "\uff73\127\uff73\164\uff73\167\uff73\001\002\000\004\046\u0139" +
    "\001\002\000\006\003\361\106\360\001\002\000\004\047" +
    "\u013b\001\002\000\004\043\u013c\001\002\000\044\002\uff75" +
    "\003\uff75\010\uff75\012\uff75\014\uff75\016\uff75\021\uff75\022" +
    "\uff75\045\uff75\075\uff75\104\uff75\117\uff75\120\uff75\123\uff75" +
    "\127\uff75\164\uff75\167\uff75\001\002\000\004\110\u013e\001" +
    "\002\000\004\046\u013f\001\002\000\006\003\361\106\360" +
    "\001\002\000\004\047\u0141\001\002\000\004\043\u0142\001" +
    "\002\000\044\002\uff76\003\uff76\010\uff76\012\uff76\014\uff76" +
    "\016\uff76\021\uff76\022\uff76\045\uff76\075\uff76\104\uff76\117" +
    "\uff76\120\uff76\123\uff76\127\uff76\164\uff76\167\uff76\001\002" +
    "\000\004\047\u0144\001\002\000\004\110\u0145\001\002\000" +
    "\004\046\u0146\001\002\000\006\003\361\106\360\001\002" +
    "\000\004\047\u0148\001\002\000\004\043\u0149\001\002\000" +
    "\044\002\uff77\003\uff77\010\uff77\012\uff77\014\uff77\016\uff77" +
    "\021\uff77\022\uff77\045\uff77\075\uff77\104\uff77\117\uff77\120" +
    "\uff77\123\uff77\127\uff77\164\uff77\167\uff77\001\002\000\004" +
    "\046\u014b\001\002\000\006\003\361\106\360\001\002\000" +
    "\004\047\u014d\001\002\000\004\110\u014e\001\002\000\004" +
    "\046\u014f\001\002\000\006\003\361\106\360\001\002\000" +
    "\004\047\u0151\001\002\000\004\043\u0152\001\002\000\044" +
    "\002\uff79\003\uff79\010\uff79\012\uff79\014\uff79\016\uff79\021" +
    "\uff79\022\uff79\045\uff79\075\uff79\104\uff79\117\uff79\120\uff79" +
    "\123\uff79\127\uff79\164\uff79\167\uff79\001\002\000\004\110" +
    "\u0154\001\002\000\004\046\u0155\001\002\000\006\003\361" +
    "\106\360\001\002\000\004\047\u0157\001\002\000\004\110" +
    "\u0158\001\002\000\004\046\u0159\001\002\000\006\003\361" +
    "\106\360\001\002\000\004\047\u015b\001\002\000\004\043" +
    "\u015c\001\002\000\044\002\uff7a\003\uff7a\010\uff7a\012\uff7a" +
    "\014\uff7a\016\uff7a\021\uff7a\022\uff7a\045\uff7a\075\uff7a\104" +
    "\uff7a\117\uff7a\120\uff7a\123\uff7a\127\uff7a\164\uff7a\167\uff7a" +
    "\001\002\000\004\047\u015e\001\002\000\004\110\u015f\001" +
    "\002\000\004\046\u0160\001\002\000\006\003\361\106\360" +
    "\001\002\000\004\047\u0162\001\002\000\004\110\u0163\001" +
    "\002\000\004\046\u0164\001\002\000\006\003\361\106\360" +
    "\001\002\000\004\047\u0166\001\002\000\004\043\u0167\001" +
    "\002\000\044\002\uff7b\003\uff7b\010\uff7b\012\uff7b\014\uff7b" +
    "\016\uff7b\021\uff7b\022\uff7b\045\uff7b\075\uff7b\104\uff7b\117" +
    "\uff7b\120\uff7b\123\uff7b\127\uff7b\164\uff7b\167\uff7b\001\002" +
    "\000\004\110\u0169\001\002\000\004\046\u016a\001\002\000" +
    "\006\003\361\106\360\001\002\000\004\047\u016c\001\002" +
    "\000\004\110\u016d\001\002\000\004\046\u016e\001\002\000" +
    "\006\003\361\106\360\001\002\000\004\047\u0170\001\002" +
    "\000\004\110\u0171\001\002\000\004\046\u0172\001\002\000" +
    "\006\003\361\106\360\001\002\000\004\047\u0174\001\002" +
    "\000\004\043\u0175\001\002\000\044\002\uff7e\003\uff7e\010" +
    "\uff7e\012\uff7e\014\uff7e\016\uff7e\021\uff7e\022\uff7e\045\uff7e" +
    "\075\uff7e\104\uff7e\117\uff7e\120\uff7e\123\uff7e\127\uff7e\164" +
    "\uff7e\167\uff7e\001\002\000\004\051\u0195\001\002\000\016" +
    "\003\u0190\051\u0191\104\076\106\100\107\075\163\101\001" +
    "\002\000\014\075\u0189\104\u0187\106\100\107\075\163\101" +
    "\001\002\000\010\003\u017b\043\u017d\104\u017a\001\002\000" +
    "\016\003\ufef7\042\ufef7\043\ufef7\044\ufef7\104\u0181\110\u0182" +
    "\001\002\000\004\043\u0180\001\002\000\006\003\u017e\043" +
    "\u017f\001\002\000\044\002\uff8c\003\uff8c\010\uff8c\012\uff8c" +
    "\014\uff8c\016\uff8c\021\uff8c\022\uff8c\045\uff8c\075\uff8c\104" +
    "\uff8c\117\uff8c\120\uff8c\123\uff8c\127\uff8c\164\uff8c\167\uff8c" +
    "\001\002\000\044\002\uff89\003\uff89\010\uff89\012\uff89\014" +
    "\uff89\016\uff89\021\uff89\022\uff89\045\uff89\075\uff89\104\uff89" +
    "\117\uff89\120\uff89\123\uff89\127\uff89\164\uff89\167\uff89\001" +
    "\002\000\044\002\uff8d\003\uff8d\010\uff8d\012\uff8d\014\uff8d" +
    "\016\uff8d\021\uff8d\022\uff8d\045\uff8d\075\uff8d\104\uff8d\117" +
    "\uff8d\120\uff8d\123\uff8d\127\uff8d\164\uff8d\167\uff8d\001\002" +
    "\000\044\002\uff8a\003\uff8a\010\uff8a\012\uff8a\014\uff8a\016" +
    "\uff8a\021\uff8a\022\uff8a\045\uff8a\075\uff8a\104\uff8a\117\uff8a" +
    "\120\uff8a\123\uff8a\127\uff8a\164\uff8a\167\uff8a\001\002\000" +
    "\004\104\u017a\001\002\000\014\003\ufef2\042\ufef2\043\ufef2" +
    "\044\ufef2\104\u0184\001\002\000\012\003\ufef6\042\ufef6\043" +
    "\ufef6\044\ufef6\001\002\000\014\003\ufef5\042\ufef5\043\ufef5" +
    "\044\ufef5\104\u017a\001\002\000\012\003\ufef4\042\ufef4\043" +
    "\ufef4\044\ufef4\001\002\000\012\003\ufef3\042\ufef3\043\ufef3" +
    "\044\ufef3\001\002\000\012\043\ufef7\051\uff33\104\u0181\110" +
    "\u0182\001\002\000\004\051\u018e\001\002\000\012\104\076" +
    "\106\100\107\075\163\101\001\002\000\004\043\u018b\001" +
    "\002\000\044\002\uff8b\003\uff8b\010\uff8b\012\uff8b\014\uff8b" +
    "\016\uff8b\021\uff8b\022\uff8b\045\uff8b\075\uff8b\104\uff8b\117" +
    "\uff8b\120\uff8b\123\uff8b\127\uff8b\164\uff8b\167\uff8b\001\002" +
    "\000\004\051\u018d\001\002\000\044\002\uff38\003\uff38\010" +
    "\uff38\012\uff38\014\uff38\016\uff38\021\uff38\022\uff38\045\uff38" +
    "\075\uff38\104\uff38\117\uff38\120\uff38\123\uff38\127\uff38\164" +
    "\uff38\167\uff38\001\002\000\044\002\uff35\003\uff35\010\uff35" +
    "\012\uff35\014\uff35\016\uff35\021\uff35\022\uff35\045\uff35\075" +
    "\uff35\104\uff35\117\uff35\120\uff35\123\uff35\127\uff35\164\uff35" +
    "\167\uff35\001\002\000\006\003\u0193\051\u0194\001\002\000" +
    "\004\051\u0192\001\002\000\044\002\uff3e\003\uff3e\010\uff3e" +
    "\012\uff3e\014\uff3e\016\uff3e\021\uff3e\022\uff3e\045\uff3e\075" +
    "\uff3e\104\uff3e\117\uff3e\120\uff3e\123\uff3e\127\uff3e\164\uff3e" +
    "\167\uff3e\001\002\000\044\002\uff37\003\uff37\010\uff37\012" +
    "\uff37\014\uff37\016\uff37\021\uff37\022\uff37\045\uff37\075\uff37" +
    "\104\uff37\117\uff37\120\uff37\123\uff37\127\uff37\164\uff37\167" +
    "\uff37\001\002\000\044\002\uff36\003\uff36\010\uff36\012\uff36" +
    "\014\uff36\016\uff36\021\uff36\022\uff36\045\uff36\075\uff36\104" +
    "\uff36\117\uff36\120\uff36\123\uff36\127\uff36\164\uff36\167\uff36" +
    "\001\002\000\044\002\uff44\003\uff44\010\uff44\012\uff44\014" +
    "\uff44\016\uff44\021\uff44\022\uff44\045\uff44\075\uff44\104\uff44" +
    "\117\uff44\120\uff44\123\uff44\127\uff44\164\uff44\167\uff44\001" +
    "\002\000\044\002\uff3f\003\uff3f\010\uff3f\012\uff3f\014\uff3f" +
    "\016\uff3f\021\uff3f\022\uff3f\045\uff3f\075\uff3f\104\uff3f\117" +
    "\uff3f\120\uff3f\123\uff3f\127\uff3f\164\uff3f\167\uff3f\001\002" +
    "\000\012\003\u01b6\042\u01b8\043\u01b7\104\u017a\001\002\000" +
    "\006\042\u01a5\104\u017a\001\002\000\006\043\u019a\104\u017a" +
    "\001\002\000\004\043\u019f\001\002\000\004\044\u019b\001" +
    "\002\000\034\003\061\012\070\014\052\016\065\045\u019d" +
    "\075\057\104\053\117\062\120\046\123\055\127\044\164" +
    "\054\167\047\001\002\000\034\003\061\012\070\014\052" +
    "\016\065\045\u019e\075\057\104\053\117\062\120\046\123" +
    "\055\127\044\164\054\167\047\001\002\000\044\002\ufefc" +
    "\003\ufefc\010\ufefc\012\ufefc\014\ufefc\016\ufefc\021\ufefc\022" +
    "\ufefc\045\ufefc\075\ufefc\104\ufefc\117\ufefc\120\ufefc\123\ufefc" +
    "\127\ufefc\164\ufefc\167\ufefc\001\002\000\044\002\uff10\003" +
    "\uff10\010\uff10\012\uff10\014\uff10\016\uff10\021\uff10\022\uff10" +
    "\045\uff10\075\uff10\104\uff10\117\uff10\120\uff10\123\uff10\127" +
    "\uff10\164\uff10\167\uff10\001\002\000\004\044\u01a0\001\002" +
    "\000\034\003\061\012\070\014\052\016\065\045\u01a2\075" +
    "\057\104\053\117\062\120\046\123\055\127\044\164\054" +
    "\167\047\001\002\000\034\003\061\012\070\014\052\016" +
    "\065\045\u01a3\075\057\104\053\117\062\120\046\123\055" +
    "\127\044\164\054\167\047\001\002\000\044\002\uff06\003" +
    "\uff06\010\uff06\012\uff06\014\uff06\016\uff06\021\uff06\022\uff06" +
    "\045\uff06\075\uff06\104\uff06\117\uff06\120\uff06\123\uff06\127" +
    "\uff06\164\uff06\167\uff06\001\002\000\044\002\uff1a\003\uff1a" +
    "\010\uff1a\012\uff1a\014\uff1a\016\uff1a\021\uff1a\022\uff1a\045" +
    "\uff1a\075\uff1a\104\uff1a\117\uff1a\120\uff1a\123\uff1a\127\uff1a" +
    "\164\uff1a\167\uff1a\001\002\000\004\043\u01b1\001\002\000" +
    "\006\043\u01a7\104\u017a\001\002\000\004\043\u01ac\001\002" +
    "\000\004\044\u01a8\001\002\000\034\003\061\012\070\014" +
    "\052\016\065\045\u01aa\075\057\104\053\117\062\120\046" +
    "\123\055\127\044\164\054\167\047\001\002\000\034\003" +
    "\061\012\070\014\052\016\065\045\u01ab\075\057\104\053" +
    "\117\062\120\046\123\055\127\044\164\054\167\047\001" +
    "\002\000\044\002\uff01\003\uff01\010\uff01\012\uff01\014\uff01" +
    "\016\uff01\021\uff01\022\uff01\045\uff01\075\uff01\104\uff01\117" +
    "\uff01\120\uff01\123\uff01\127\uff01\164\uff01\167\uff01\001\002" +
    "\000\044\002\uff15\003\uff15\010\uff15\012\uff15\014\uff15\016" +
    "\uff15\021\uff15\022\uff15\045\uff15\075\uff15\104\uff15\117\uff15" +
    "\120\uff15\123\uff15\127\uff15\164\uff15\167\uff15\001\002\000" +
    "\004\044\u01ad\001\002\000\034\003\061\012\070\014\052" +
    "\016\065\045\u01af\075\057\104\053\117\062\120\046\123" +
    "\055\127\044\164\054\167\047\001\002\000\034\003\061" +
    "\012\070\014\052\016\065\045\u01b0\075\057\104\053\117" +
    "\062\120\046\123\055\127\044\164\054\167\047\001\002" +
    "\000\044\002\uff0b\003\uff0b\010\uff0b\012\uff0b\014\uff0b\016" +
    "\uff0b\021\uff0b\022\uff0b\045\uff0b\075\uff0b\104\uff0b\117\uff0b" +
    "\120\uff0b\123\uff0b\127\uff0b\164\uff0b\167\uff0b\001\002\000" +
    "\044\002\uff1f\003\uff1f\010\uff1f\012\uff1f\014\uff1f\016\uff1f" +
    "\021\uff1f\022\uff1f\045\uff1f\075\uff1f\104\uff1f\117\uff1f\120" +
    "\uff1f\123\uff1f\127\uff1f\164\uff1f\167\uff1f\001\002\000\004" +
    "\044\u01b2\001\002\000\032\003\061\012\070\014\052\016" +
    "\065\075\057\104\053\117\062\120\046\123\055\127\044" +
    "\164\054\167\047\001\002\000\034\003\061\012\070\014" +
    "\052\016\065\045\u01b4\075\057\104\053\117\062\120\046" +
    "\123\055\127\044\164\054\167\047\001\002\000\044\002" +
    "\uff19\003\uff19\010\uff19\012\uff19\014\uff19\016\uff19\021\uff19" +
    "\022\uff19\045\uff19\075\uff19\104\uff19\117\uff19\120\uff19\123" +
    "\uff19\127\uff19\164\uff19\167\uff19\001\002\000\004\043\u0203" +
    "\001\002\000\006\043\u01f9\104\u017a\001\002\000\004\044" +
    "\u01f4\001\002\000\014\003\u01b9\042\u01bc\043\u01bb\044\u01bd" +
    "\104\u017a\001\002\000\004\044\u01f0\001\002\000\012\003" +
    "\u01d3\042\u01d5\043\u01d4\044\u01d6\001\002\000\034\003\u01ca" +
    "\012\070\014\052\016\065\044\u01cb\075\057\104\053\117" +
    "\062\120\046\123\055\127\044\164\054\167\047\001\002" +
    "\000\006\003\u01c1\044\u01c2\001\002\000\034\003\061\012" +
    "\070\014\052\016\065\045\u01bf\075\057\104\053\117\062" +
    "\120\046\123\055\127\044\164\054\167\047\001\002\000" +
    "\034\003\061\012\070\014\052\016\065\045\u01c0\075\057" +
    "\104\053\117\062\120\046\123\055\127\044\164\054\167" +
    "\047\001\002\000\044\002\ufefa\003\ufefa\010\ufefa\012\ufefa" +
    "\014\ufefa\016\ufefa\021\ufefa\022\ufefa\045\ufefa\075\ufefa\104" +
    "\ufefa\117\ufefa\120\ufefa\123\ufefa\127\ufefa\164\ufefa\167\ufefa" +
    "\001\002\000\044\002\uff0e\003\uff0e\010\uff0e\012\uff0e\014" +
    "\uff0e\016\uff0e\021\uff0e\022\uff0e\045\uff0e\075\uff0e\104\uff0e" +
    "\117\uff0e\120\uff0e\123\uff0e\127\uff0e\164\uff0e\167\uff0e\001" +
    "\002\000\034\003\061\012\070\014\052\016\065\045\u01c7" +
    "\075\057\104\053\117\062\120\046\123\055\127\044\164" +
    "\054\167\047\001\002\000\032\003\u01c4\012\070\014\052" +
    "\016\065\075\057\104\053\117\062\120\046\123\055\127" +
    "\044\164\054\167\047\001\002\000\032\003\u01c5\012\070" +
    "\014\052\016\065\075\057\104\053\117\062\120\046\123" +
    "\055\127\044\164\054\167\047\001\002\000\046\002\ufefd" +
    "\003\ufefd\010\ufefd\012\ufefd\014\ufefd\016\ufefd\021\ufefd\022" +
    "\ufefd\042\141\045\ufefd\075\ufefd\104\ufefd\117\ufefd\120\ufefd" +
    "\123\ufefd\127\ufefd\164\ufefd\167\ufefd\001\002\000\046\002" +
    "\uff11\003\uff11\010\uff11\012\uff11\014\uff11\016\uff11\021\uff11" +
    "\022\uff11\042\141\045\uff11\075\uff11\104\uff11\117\uff11\120" +
    "\uff11\123\uff11\127\uff11\164\uff11\167\uff11\001\002\000\034" +
    "\003\061\012\070\014\052\016\065\045\u01c8\075\057\104" +
    "\053\117\062\120\046\123\055\127\044\164\054\167\047" +
    "\001\002\000\044\002\ufefe\003\ufefe\010\ufefe\012\ufefe\014" +
    "\ufefe\016\ufefe\021\ufefe\022\ufefe\045\ufefe\075\ufefe\104\ufefe" +
    "\117\ufefe\120\ufefe\123\ufefe\127\ufefe\164\ufefe\167\ufefe\001" +
    "\002\000\044\002\uff12\003\uff12\010\uff12\012\uff12\014\uff12" +
    "\016\uff12\021\uff12\022\uff12\045\uff12\075\uff12\104\uff12\117" +
    "\uff12\120\uff12\123\uff12\127\uff12\164\uff12\167\uff12\001\002" +
    "\000\034\003\061\012\070\014\052\016\065\045\u01d2\075" +
    "\057\104\053\117\062\120\046\123\055\127\044\164\054" +
    "\167\047\001\002\000\006\042\141\045\u01d1\001\002\000" +
    "\034\003\u01cd\012\070\014\052\016\065\045\u01ce\075\057" +
    "\104\053\117\062\120\046\123\055\127\044\164\054\167" +
    "\047\001\002\000\034\003\u01cf\012\070\014\052\016\065" +
    "\045\u01d0\075\057\104\053\117\062\120\046\123\055\127" +
    "\044\164\054\167\047\001\002\000\046\002\ufef8\003\ufef8" +
    "\010\ufef8\012\ufef8\014\ufef8\016\ufef8\021\ufef8\022\ufef8\042" +
    "\141\045\ufef8\075\ufef8\104\ufef8\117\ufef8\120\ufef8\123\ufef8" +
    "\127\ufef8\164\ufef8\167\ufef8\001\002\000\044\002\uff22\003" +
    "\uff22\010\uff22\012\uff22\014\uff22\016\uff22\021\uff22\022\uff22" +
    "\045\uff22\075\uff22\104\uff22\117\uff22\120\uff22\123\uff22\127" +
    "\uff22\164\uff22\167\uff22\001\002\000\046\002\uff0c\003\uff0c" +
    "\010\uff0c\012\uff0c\014\uff0c\016\uff0c\021\uff0c\022\uff0c\042" +
    "\141\045\uff0c\075\uff0c\104\uff0c\117\uff0c\120\uff0c\123\uff0c" +
    "\127\uff0c\164\uff0c\167\uff0c\001\002\000\044\002\uff21\003" +
    "\uff21\010\uff21\012\uff21\014\uff21\016\uff21\021\uff21\022\uff21" +
    "\045\uff21\075\uff21\104\uff21\117\uff21\120\uff21\123\uff21\127" +
    "\uff21\164\uff21\167\uff21\001\002\000\044\002\ufef9\003\ufef9" +
    "\010\ufef9\012\ufef9\014\ufef9\016\ufef9\021\ufef9\022\ufef9\045" +
    "\ufef9\075\ufef9\104\ufef9\117\ufef9\120\ufef9\123\ufef9\127\ufef9" +
    "\164\ufef9\167\ufef9\001\002\000\044\002\uff0d\003\uff0d\010" +
    "\uff0d\012\uff0d\014\uff0d\016\uff0d\021\uff0d\022\uff0d\045\uff0d" +
    "\075\uff0d\104\uff0d\117\uff0d\120\uff0d\123\uff0d\127\uff0d\164" +
    "\uff0d\167\uff0d\001\002\000\004\044\u01ec\001\002\000\010" +
    "\003\u01e2\044\u01e4\045\u01e3\001\002\000\006\003\u01da\044" +
    "\u01db\001\002\000\034\003\061\012\070\014\052\016\065" +
    "\045\u01d8\075\057\104\053\117\062\120\046\123\055\127" +
    "\044\164\054\167\047\001\002\000\034\003\061\012\070" +
    "\014\052\016\065\045\u01d9\075\057\104\053\117\062\120" +
    "\046\123\055\127\044\164\054\167\047\001\002\000\044" +
    "\002\uff04\003\uff04\010\uff04\012\uff04\014\uff04\016\uff04\021" +
    "\uff04\022\uff04\045\uff04\075\uff04\104\uff04\117\uff04\120\uff04" +
    "\123\uff04\127\uff04\164\uff04\167\uff04\001\002\000\044\002" +
    "\uff18\003\uff18\010\uff18\012\uff18\014\uff18\016\uff18\021\uff18" +
    "\022\uff18\045\uff18\075\uff18\104\uff18\117\uff18\120\uff18\123" +
    "\uff18\127\uff18\164\uff18\167\uff18\001\002\000\034\003\061" +
    "\012\070\014\052\016\065\045\u01e0\075\057\104\053\117" +
    "\062\120\046\123\055\127\044\164\054\167\047\001\002" +
    "\000\032\003\u01dd\012\070\014\052\016\065\075\057\104" +
    "\053\117\062\120\046\123\055\127\044\164\054\167\047" +
    "\001\002\000\032\003\u01de\012\070\014\052\016\065\075" +
    "\057\104\053\117\062\120\046\123\055\127\044\164\054" +
    "\167\047\001\002\000\046\002\uff07\003\uff07\010\uff07\012" +
    "\uff07\014\uff07\016\uff07\021\uff07\022\uff07\042\141\045\uff07" +
    "\075\uff07\104\uff07\117\uff07\120\uff07\123\uff07\127\uff07\164" +
    "\uff07\167\uff07\001\002\000\046\002\uff1b\003\uff1b\010\uff1b" +
    "\012\uff1b\014\uff1b\016\uff1b\021\uff1b\022\uff1b\042\141\045" +
    "\uff1b\075\uff1b\104\uff1b\117\uff1b\120\uff1b\123\uff1b\127\uff1b" +
    "\164\uff1b\167\uff1b\001\002\000\034\003\061\012\070\014" +
    "\052\016\065\045\u01e1\075\057\104\053\117\062\120\046" +
    "\123\055\127\044\164\054\167\047\001\002\000\044\002" +
    "\uff08\003\uff08\010\uff08\012\uff08\014\uff08\016\uff08\021\uff08" +
    "\022\uff08\045\uff08\075\uff08\104\uff08\117\uff08\120\uff08\123" +
    "\uff08\127\uff08\164\uff08\167\uff08\001\002\000\044\002\uff1c" +
    "\003\uff1c\010\uff1c\012\uff1c\014\uff1c\016\uff1c\021\uff1c\022" +
    "\uff1c\045\uff1c\075\uff1c\104\uff1c\117\uff1c\120\uff1c\123\uff1c" +
    "\127\uff1c\164\uff1c\167\uff1c\001\002\000\032\003\061\012" +
    "\070\014\052\016\065\075\057\104\053\117\062\120\046" +
    "\123\055\127\044\164\054\167\047\001\002\000\044\002" +
    "\uff03\003\uff03\010\uff03\012\uff03\014\uff03\016\uff03\021\uff03" +
    "\022\uff03\045\uff03\075\uff03\104\uff03\117\uff03\120\uff03\123" +
    "\uff03\127\uff03\164\uff03\167\uff03\001\002\000\034\003\u01e6" +
    "\012\070\014\052\016\065\045\u01e7\075\057\104\053\117" +
    "\062\120\046\123\055\127\044\164\054\167\047\001\002" +
    "\000\034\003\u01e8\012\070\014\052\016\065\045\u01e9\075" +
    "\057\104\053\117\062\120\046\123\055\127\044\164\054" +
    "\167\047\001\002\000\046\002\uff02\003\uff02\010\uff02\012" +
    "\uff02\014\uff02\016\uff02\021\uff02\022\uff02\042\141\045\uff02" +
    "\075\uff02\104\uff02\117\uff02\120\uff02\123\uff02\127\uff02\164" +
    "\uff02\167\uff02\001\002\000\044\002\uff20\003\uff20\010\uff20" +
    "\012\uff20\014\uff20\016\uff20\021\uff20\022\uff20\045\uff20\075" +
    "\uff20\104\uff20\117\uff20\120\uff20\123\uff20\127\uff20\164\uff20" +
    "\167\uff20\001\002\000\046\002\uff16\003\uff16\010\uff16\012" +
    "\uff16\014\uff16\016\uff16\021\uff16\022\uff16\042\141\045\uff16" +
    "\075\uff16\104\uff16\117\uff16\120\uff16\123\uff16\127\uff16\164" +
    "\uff16\167\uff16\001\002\000\044\002\uff23\003\uff23\010\uff23" +
    "\012\uff23\014\uff23\016\uff23\021\uff23\022\uff23\045\uff23\075" +
    "\uff23\104\uff23\117\uff23\120\uff23\123\uff23\127\uff23\164\uff23" +
    "\167\uff23\001\002\000\034\003\061\012\070\014\052\016" +
    "\065\045\u01eb\075\057\104\053\117\062\120\046\123\055" +
    "\127\044\164\054\167\047\001\002\000\044\002\uff17\003" +
    "\uff17\010\uff17\012\uff17\014\uff17\016\uff17\021\uff17\022\uff17" +
    "\045\uff17\075\uff17\104\uff17\117\uff17\120\uff17\123\uff17\127" +
    "\uff17\164\uff17\167\uff17\001\002\000\034\003\061\012\070" +
    "\014\052\016\065\045\u01ee\075\057\104\053\117\062\120" +
    "\046\123\055\127\044\164\054\167\047\001\002\000\034" +
    "\003\061\012\070\014\052\016\065\045\u01ef\075\057\104" +
    "\053\117\062\120\046\123\055\127\044\164\054\167\047" +
    "\001\002\000\044\002\uff09\003\uff09\010\uff09\012\uff09\014" +
    "\uff09\016\uff09\021\uff09\022\uff09\045\uff09\075\uff09\104\uff09" +
    "\117\uff09\120\uff09\123\uff09\127\uff09\164\uff09\167\uff09\001" +
    "\002\000\044\002\uff1d\003\uff1d\010\uff1d\012\uff1d\014\uff1d" +
    "\016\uff1d\021\uff1d\022\uff1d\045\uff1d\075\uff1d\104\uff1d\117" +
    "\uff1d\120\uff1d\123\uff1d\127\uff1d\164\uff1d\167\uff1d\001\002" +
    "\000\034\003\061\012\070\014\052\016\065\045\u01f2\075" +
    "\057\104\053\117\062\120\046\123\055\127\044\164\054" +
    "\167\047\001\002\000\034\003\061\012\070\014\052\016" +
    "\065\045\u01f3\075\057\104\053\117\062\120\046\123\055" +
    "\127\044\164\054\167\047\001\002\000\044\002\ufeff\003" +
    "\ufeff\010\ufeff\012\ufeff\014\ufeff\016\ufeff\021\ufeff\022\ufeff" +
    "\045\ufeff\075\ufeff\104\ufeff\117\ufeff\120\ufeff\123\ufeff\127" +
    "\ufeff\164\ufeff\167\ufeff\001\002\000\044\002\uff13\003\uff13" +
    "\010\uff13\012\uff13\014\uff13\016\uff13\021\uff13\022\uff13\045" +
    "\uff13\075\uff13\104\uff13\117\uff13\120\uff13\123\uff13\127\uff13" +
    "\164\uff13\167\uff13\001\002\000\034\003\061\012\070\014" +
    "\052\016\065\045\u01f6\075\057\104\053\117\062\120\046" +
    "\123\055\127\044\164\054\167\047\001\002\000\034\003" +
    "\061\012\070\014\052\016\065\045\u01f7\075\057\104\053" +
    "\117\062\120\046\123\055\127\044\164\054\167\047\001" +
    "\002\000\044\002\ufefb\003\ufefb\010\ufefb\012\ufefb\014\ufefb" +
    "\016\ufefb\021\ufefb\022\ufefb\045\ufefb\075\ufefb\104\ufefb\117" +
    "\ufefb\120\ufefb\123\ufefb\127\ufefb\164\ufefb\167\ufefb\001\002" +
    "\000\044\002\uff0f\003\uff0f\010\uff0f\012\uff0f\014\uff0f\016" +
    "\uff0f\021\uff0f\022\uff0f\045\uff0f\075\uff0f\104\uff0f\117\uff0f" +
    "\120\uff0f\123\uff0f\127\uff0f\164\uff0f\167\uff0f\001\002\000" +
    "\004\043\u01fe\001\002\000\004\044\u01fa\001\002\000\034" +
    "\003\061\012\070\014\052\016\065\045\u01fc\075\057\104" +
    "\053\117\062\120\046\123\055\127\044\164\054\167\047" +
    "\001\002\000\034\003\061\012\070\014\052\016\065\045" +
    "\u01fd\075\057\104\053\117\062\120\046\123\055\127\044" +
    "\164\054\167\047\001\002\000\044\002\uff00\003\uff00\010" +
    "\uff00\012\uff00\014\uff00\016\uff00\021\uff00\022\uff00\045\uff00" +
    "\075\uff00\104\uff00\117\uff00\120\uff00\123\uff00\127\uff00\164" +
    "\uff00\167\uff00\001\002\000\044\002\uff14\003\uff14\010\uff14" +
    "\012\uff14\014\uff14\016\uff14\021\uff14\022\uff14\045\uff14\075" +
    "\uff14\104\uff14\117\uff14\120\uff14\123\uff14\127\uff14\164\uff14" +
    "\167\uff14\001\002\000\004\044\u01ff\001\002\000\034\003" +
    "\061\012\070\014\052\016\065\045\u0201\075\057\104\053" +
    "\117\062\120\046\123\055\127\044\164\054\167\047\001" +
    "\002\000\034\003\061\012\070\014\052\016\065\045\u0202" +
    "\075\057\104\053\117\062\120\046\123\055\127\044\164" +
    "\054\167\047\001\002\000\044\002\uff0a\003\uff0a\010\uff0a" +
    "\012\uff0a\014\uff0a\016\uff0a\021\uff0a\022\uff0a\045\uff0a\075" +
    "\uff0a\104\uff0a\117\uff0a\120\uff0a\123\uff0a\127\uff0a\164\uff0a" +
    "\167\uff0a\001\002\000\044\002\uff1e\003\uff1e\010\uff1e\012" +
    "\uff1e\014\uff1e\016\uff1e\021\uff1e\022\uff1e\045\uff1e\075\uff1e" +
    "\104\uff1e\117\uff1e\120\uff1e\123\uff1e\127\uff1e\164\uff1e\167" +
    "\uff1e\001\002\000\004\044\u0204\001\002\000\004\045\u0205" +
    "\001\002\000\044\002\uff05\003\uff05\010\uff05\012\uff05\014" +
    "\uff05\016\uff05\021\uff05\022\uff05\045\uff05\075\uff05\104\uff05" +
    "\117\uff05\120\uff05\123\uff05\127\uff05\164\uff05\167\uff05\001" +
    "\002\000\004\106\u0223\001\002\000\006\003\u0209\106\u0208" +
    "\001\002\000\006\003\u0210\110\u020f\001\002\000\004\110" +
    "\u020a\001\002\000\004\046\u020b\001\002\000\006\003\361" +
    "\106\360\001\002\000\004\047\u020d\001\002\000\004\043" +
    "\u020e\001\002\000\044\002\uff86\003\uff86\010\uff86\012\uff86" +
    "\014\uff86\016\uff86\021\uff86\022\uff86\045\uff86\075\uff86\104" +
    "\uff86\117\uff86\120\uff86\123\uff86\127\uff86\164\uff86\167\uff86" +
    "\001\002\000\006\003\u0215\046\u0216\001\002\000\004\046" +
    "\u0211\001\002\000\006\003\361\106\360\001\002\000\004" +
    "\047\u0213\001\002\000\004\043\u0214\001\002\000\044\002" +
    "\uff85\003\uff85\010\uff85\012\uff85\014\uff85\016\uff85\021\uff85" +
    "\022\uff85\045\uff85\075\uff85\104\uff85\117\uff85\120\uff85\123" +
    "\uff85\127\uff85\164\uff85\167\uff85\001\002\000\006\003\361" +
    "\106\360\001\002\000\006\003\u0217\106\360\001\002\000" +
    "\006\003\uff6d\047\u021e\001\002\000\006\003\u0219\047\u021a" +
    "\001\002\000\004\043\u021d\001\002\000\006\003\u021b\043" +
    "\u021c\001\002\000\044\002\uff81\003\uff81\010\uff81\012\uff81" +
    "\014\uff81\016\uff81\021\uff81\022\uff81\045\uff81\075\uff81\104" +
    "\uff81\117\uff81\120\uff81\123\uff81\127\uff81\164\uff81\167\uff81" +
    "\001\002\000\044\002\uff88\003\uff88\010\uff88\012\uff88\014" +
    "\uff88\016\uff88\021\uff88\022\uff88\045\uff88\075\uff88\104\uff88" +
    "\117\uff88\120\uff88\123\uff88\127\uff88\164\uff88\167\uff88\001" +
    "\002\000\044\002\uff82\003\uff82\010\uff82\012\uff82\014\uff82" +
    "\016\uff82\021\uff82\022\uff82\045\uff82\075\uff82\104\uff82\117" +
    "\uff82\120\uff82\123\uff82\127\uff82\164\uff82\167\uff82\001\002" +
    "\000\004\043\u021f\001\002\000\044\002\uff83\003\uff83\010" +
    "\uff83\012\uff83\014\uff83\016\uff83\021\uff83\022\uff83\045\uff83" +
    "\075\uff83\104\uff83\117\uff83\120\uff83\123\uff83\127\uff83\164" +
    "\uff83\167\uff83\001\002\000\004\047\u0221\001\002\000\004" +
    "\043\u0222\001\002\000\044\002\uff84\003\uff84\010\uff84\012" +
    "\uff84\014\uff84\016\uff84\021\uff84\022\uff84\045\uff84\075\uff84" +
    "\104\uff84\117\uff84\120\uff84\123\uff84\127\uff84\164\uff84\167" +
    "\uff84\001\002\000\004\110\u0224\001\002\000\004\046\u0225" +
    "\001\002\000\006\003\361\106\360\001\002\000\004\047" +
    "\u0227\001\002\000\004\043\u0228\001\002\000\044\002\uff87" +
    "\003\uff87\010\uff87\012\uff87\014\uff87\016\uff87\021\uff87\022" +
    "\uff87\045\uff87\075\uff87\104\uff87\117\uff87\120\uff87\123\uff87" +
    "\127\uff87\164\uff87\167\uff87\001\002\000\014\002\uffeb\010" +
    "\uffeb\021\uffeb\022\uffeb\045\uffeb\001\002\000\012\104\076" +
    "\106\100\107\075\163\101\001\002\000\014\003\u022d\104" +
    "\076\106\100\107\075\163\101\001\002\000\006\003\u022f" +
    "\043\u0230\001\002\000\004\043\u022e\001\002\000\044\002" +
    "\uffb8\003\uffb8\010\uffb8\012\uffb8\014\uffb8\016\uffb8\021\uffb8" +
    "\022\uffb8\045\uffb8\075\uffb8\104\uffb8\117\uffb8\120\uffb8\123" +
    "\uffb8\127\uffb8\164\uffb8\167\uffb8\001\002\000\044\002\uffb7" +
    "\003\uffb7\010\uffb7\012\uffb7\014\uffb7\016\uffb7\021\uffb7\022" +
    "\uffb7\045\uffb7\075\uffb7\104\uffb7\117\uffb7\120\uffb7\123\uffb7" +
    "\127\uffb7\164\uffb7\167\uffb7\001\002\000\044\002\uffba\003" +
    "\uffba\010\uffba\012\uffba\014\uffba\016\uffba\021\uffba\022\uffba" +
    "\045\uffba\075\uffba\104\uffba\117\uffba\120\uffba\123\uffba\127" +
    "\uffba\164\uffba\167\uffba\001\002\000\004\043\u0232\001\002" +
    "\000\044\002\uffb9\003\uffb9\010\uffb9\012\uffb9\014\uffb9\016" +
    "\uffb9\021\uffb9\022\uffb9\045\uffb9\075\uffb9\104\uffb9\117\uffb9" +
    "\120\uffb9\123\uffb9\127\uffb9\164\uffb9\167\uffb9\001\002\000" +
    "\004\106\u0243\001\002\000\006\003\u0236\106\u0235\001\002" +
    "\000\006\003\u023a\043\u023b\001\002\000\004\043\u0237\001" +
    "\002\000\046\002\uffad\003\uffad\010\uffad\012\uffad\014\uffad" +
    "\016\uffad\021\uffad\022\uffad\045\uffad\053\u0238\075\uffad\104" +
    "\uffad\117\uffad\120\uffad\123\uffad\127\uffad\164\uffad\167\uffad" +
    "\001\002\000\032\003\154\115\151\125\153\130\162\131" +
    "\160\132\147\133\157\137\152\142\145\160\161\161\150" +
    "\166\156\001\002\000\044\002\uffb2\003\uffb2\010\uffb2\012" +
    "\uffb2\014\uffb2\016\uffb2\021\uffb2\022\uffb2\045\uffb2\075\uffb2" +
    "\104\uffb2\117\uffb2\120\uffb2\123\uffb2\127\uffb2\164\uffb2\167" +
    "\uffb2\001\002\000\046\002\uffac\003\uffac\010\uffac\012\uffac" +
    "\014\uffac\016\uffac\021\uffac\022\uffac\045\uffac\053\u0241\075" +
    "\uffac\104\uffac\117\uffac\120\uffac\123\uffac\127\uffac\164\uffac" +
    "\167\uffac\001\002\000\046\002\uffb5\003\uffb5\010\uffb5\012" +
    "\uffb5\014\uffb5\016\uffb5\021\uffb5\022\uffb5\045\uffb5\053\u023c" +
    "\075\uffb5\104\uffb5\117\uffb5\120\uffb5\123\uffb5\127\uffb5\164" +
    "\uffb5\167\uffb5\001\002\000\032\003\u023f\115\151\125\153" +
    "\130\162\131\160\132\147\133\157\137\152\142\145\160" +
    "\161\161\150\166\156\001\002\000\032\003\154\115\151" +
    "\125\153\130\162\131\160\132\147\133\157\137\152\142" +
    "\145\160\161\161\150\166\156\001\002\000\044\002\uffb0" +
    "\003\uffb0\010\uffb0\012\uffb0\014\uffb0\016\uffb0\021\uffb0\022" +
    "\uffb0\045\uffb0\075\uffb0\104\uffb0\117\uffb0\120\uffb0\123\uffb0" +
    "\127\uffb0\164\uffb0\167\uffb0\001\002\000\046\002\uffaf\003" +
    "\uffaf\010\uffaf\012\uffaf\014\uffaf\016\uffaf\021\uffaf\022\uffaf" +
    "\042\203\045\uffaf\075\uffaf\104\uffaf\117\uffaf\120\uffaf\123" +
    "\uffaf\127\uffaf\164\uffaf\167\uffaf\001\002\000\044\002\uffb6" +
    "\003\uffb6\010\uffb6\012\uffb6\014\uffb6\016\uffb6\021\uffb6\022" +
    "\uffb6\045\uffb6\075\uffb6\104\uffb6\117\uffb6\120\uffb6\123\uffb6" +
    "\127\uffb6\164\uffb6\167\uffb6\001\002\000\032\003\154\115" +
    "\151\125\153\130\162\131\160\132\147\133\157\137\152" +
    "\142\145\160\161\161\150\166\156\001\002\000\044\002" +
    "\uffb1\003\uffb1\010\uffb1\012\uffb1\014\uffb1\016\uffb1\021\uffb1" +
    "\022\uffb1\045\uffb1\075\uffb1\104\uffb1\117\uffb1\120\uffb1\123" +
    "\uffb1\127\uffb1\164\uffb1\167\uffb1\001\002\000\004\043\u0244" +
    "\001\002\000\046\002\uffae\003\uffae\010\uffae\012\uffae\014" +
    "\uffae\016\uffae\021\uffae\022\uffae\045\uffae\053\u0245\075\uffae" +
    "\104\uffae\117\uffae\120\uffae\123\uffae\127\uffae\164\uffae\167" +
    "\uffae\001\002\000\032\003\154\115\151\125\153\130\162" +
    "\131\160\132\147\133\157\137\152\142\145\160\161\161" +
    "\150\166\156\001\002\000\044\002\uffb3\003\uffb3\010\uffb3" +
    "\012\uffb3\014\uffb3\016\uffb3\021\uffb3\022\uffb3\045\uffb3\075" +
    "\uffb3\104\uffb3\117\uffb3\120\uffb3\123\uffb3\127\uffb3\164\uffb3" +
    "\167\uffb3\001\002\000\034\003\061\012\070\014\052\016" +
    "\065\045\u024d\075\057\104\053\117\062\120\046\123\055" +
    "\127\044\164\054\167\047\001\002\000\014\002\uffee\010" +
    "\uffee\021\uffee\022\uffee\045\uffee\001\002\000\044\002\uffed" +
    "\003\061\010\uffed\012\070\014\052\016\065\021\uffed\022" +
    "\uffed\045\u024b\075\057\104\053\117\062\120\046\123\055" +
    "\127\044\164\054\167\047\001\002\000\044\002\uffea\003" +
    "\061\010\uffea\012\070\014\052\016\065\021\uffea\022\uffea" +
    "\045\u024c\075\057\104\053\117\062\120\046\123\055\127" +
    "\044\164\054\167\047\001\002\000\014\002\uffef\010\uffef" +
    "\021\uffef\022\uffef\045\uffef\001\002\000\014\002\ufff0\010" +
    "\ufff0\021\ufff0\022\ufff0\045\ufff0\001\002\000\014\002\uffe9" +
    "\010\uffe9\021\uffe9\022\uffe9\045\uffe9\001\002\000\006\003" +
    "\u0261\042\u0262\001\002\000\010\002\ufff5\021\ufff5\045\ufff5" +
    "\001\002\000\014\002\ufff2\010\u024e\021\ufff2\022\u0252\045" +
    "\ufff2\001\002\000\014\002\ufff4\010\u024e\021\ufff4\022\u0252" +
    "\045\ufff4\001\002\000\006\003\u0254\104\u0253\001\002\000" +
    "\006\003\u0258\044\u0259\001\002\000\004\044\u0255\001\002" +
    "\000\032\003\061\012\070\014\052\016\065\075\057\104" +
    "\053\117\062\120\046\123\055\127\044\164\054\167\047" +
    "\001\002\000\034\003\061\012\070\014\052\016\065\045" +
    "\u0257\075\057\104\053\117\062\120\046\123\055\127\044" +
    "\164\054\167\047\001\002\000\014\002\uffe7\010\uffe7\021" +
    "\uffe7\022\uffe7\045\uffe7\001\002\000\032\003\061\012\070" +
    "\014\052\016\065\075\057\104\053\117\062\120\046\123" +
    "\055\127\044\164\054\167\047\001\002\000\032\003\061" +
    "\012\070\014\052\016\065\075\057\104\053\117\062\120" +
    "\046\123\055\127\044\164\054\167\047\001\002\000\034" +
    "\003\u025b\012\070\014\052\016\065\045\u025c\075\057\104" +
    "\053\117\062\120\046\123\055\127\044\164\054\167\047" +
    "\001\002\000\016\002\uffe6\010\uffe6\021\uffe6\022\uffe6\042" +
    "\141\045\uffe6\001\002\000\014\002\uffe8\010\uffe8\021\uffe8" +
    "\022\uffe8\045\uffe8\001\002\000\034\003\061\012\070\014" +
    "\052\016\065\045\u025e\075\057\104\053\117\062\120\046" +
    "\123\055\127\044\164\054\167\047\001\002\000\014\002" +
    "\uffe5\010\uffe5\021\uffe5\022\uffe5\045\uffe5\001\002\000\010" +
    "\002\ufff3\021\ufff3\045\ufff3\001\002\000\010\002\ufff1\021" +
    "\ufff1\045\ufff1\001\002\000\006\104\u0263\106\u0264\001\002" +
    "\000\010\003\u0266\104\u0263\106\u0264\001\002\000\006\003" +
    "\uffdc\110\uffdc\001\002\000\006\003\uffdd\110\uffdd\001\002" +
    "\000\006\003\u0286\110\u0285\001\002\000\004\110\u0267\001" +
    "\002\000\004\046\u0268\001\002\000\010\047\uffd6\052\u026a" +
    "\106\u0269\001\002\000\012\052\u0277\104\u026f\106\u0270\107" +
    "\u026e\001\002\000\010\104\u026f\106\u0270\107\u026e\001\002" +
    "\000\004\047\u026c\001\002\000\004\043\u026d\001\002\000" +
    "\014\002\uffe2\010\uffe2\021\uffe2\022\uffe2\045\uffe2\001\002" +
    "\000\014\003\uffcf\047\uffcf\071\u0274\106\uffcf\110\uffcf\001" +
    "\002\000\012\003\uffce\047\uffce\106\uffce\110\uffce\001\002" +
    "\000\014\003\uffcd\047\uffcd\071\u0272\106\uffcd\110\uffcd\001" +
    "\002\000\006\003\uffd9\047\uffd9\001\002\000\004\107\u0273" +
    "\001\002\000\012\003\uffcb\047\uffcb\106\uffcb\110\uffcb\001" +
    "\002\000\004\106\u0275\001\002\000\012\003\uffcc\047\uffcc" +
    "\106\uffcc\110\uffcc\001\002\000\006\003\uffd8\047\uffd8\001" +
    "\002\000\014\003\uffd7\047\uffd7\104\u026f\106\u0270\107\u026e" +
    "\001\002\000\012\003\uffdb\047\uffdb\106\u027a\110\u0279\001" +
    "\002\000\006\052\u027f\106\u027e\001\002\000\004\052\u027c" +
    "\001\002\000\006\003\uffda\047\uffda\001\002\000\010\104" +
    "\u026f\106\u0270\107\u026e\001\002\000\006\003\uffd3\047\uffd3" +
    "\001\002\000\012\052\u0282\104\u026f\106\u0270\107\u026e\001" +
    "\002\000\010\104\u026f\106\u0270\107\u026e\001\002\000\006" +
    "\003\uffd2\047\uffd2\001\002\000\006\003\uffd1\047\uffd1\001" +
    "\002\000\014\003\uffd0\047\uffd0\104\u026f\106\u0270\107\u026e" +
    "\001\002\000\012\003\uffd5\047\uffd5\106\u027a\110\u0279\001" +
    "\002\000\006\003\uffd4\047\uffd4\001\002\000\006\003\u028b" +
    "\046\u028c\001\002\000\004\046\u0287\001\002\000\010\047" +
    "\uffd6\052\u026a\106\u0269\001\002\000\004\047\u0289\001\002" +
    "\000\004\043\u028a\001\002\000\014\002\uffe1\010\uffe1\021" +
    "\uffe1\022\uffe1\045\uffe1\001\002\000\010\047\uffd6\052\u026a" +
    "\106\u0269\001\002\000\012\003\uffd6\047\uffd6\052\u026a\106" +
    "\u0269\001\002\000\006\003\u028e\047\u028f\001\002\000\004" +
    "\043\u0293\001\002\000\006\003\u0290\043\u0291\001\002\000" +
    "\004\051\u0292\001\002\000\014\002\uffe4\010\uffe4\021\uffe4" +
    "\022\uffe4\045\uffe4\001\002\000\014\002\uffde\010\uffde\021" +
    "\uffde\022\uffde\045\uffde\001\002\000\014\002\uffdf\010\uffdf" +
    "\021\uffdf\022\uffdf\045\uffdf\001\002\000\004\047\u0295\001" +
    "\002\000\004\043\u0296\001\002\000\014\002\uffe0\010\uffe0" +
    "\021\uffe0\022\uffe0\045\uffe0\001\002\000\004\110\u0298\001" +
    "\002\000\004\046\u0299\001\002\000\010\047\uffd6\052\u026a" +
    "\106\u0269\001\002\000\004\047\u029b\001\002\000\004\043" +
    "\u029c\001\002\000\014\002\uffe3\010\uffe3\021\uffe3\022\uffe3" +
    "\045\uffe3\001\002\000\004\045\u02a2\001\002\000\040\003" +
    "\061\011\036\012\070\014\052\016\065\044\037\045\u02a0" +
    "\075\057\104\053\117\062\120\046\123\055\127\044\164" +
    "\054\167\047\001\002\000\010\002\ufff7\021\ufff7\045\u02a1" +
    "\001\002\000\014\002\ufffb\010\uffec\021\ufffb\022\uffec\045" +
    "\uffec\001\002\000\006\002\ufffd\021\ufffd\001\002\000\006" +
    "\002\ufff8\021\ufff8\001\002\000\006\011\036\044\037\001" +
    "\002\000\004\045\u02a5\001\002\000\006\002\ufffa\021\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02a3\000\006\002\007\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\034\032\u029c\001\001\000\006\022" +
    "\034\032\037\001\001\000\010\013\u0250\021\u024e\023\u024f" +
    "\001\001\000\026\005\041\007\u0246\011\066\015\047\034" +
    "\065\036\063\037\055\040\057\045\050\046\042\001\001" +
    "\000\026\005\041\007\044\011\066\015\047\034\065\036" +
    "\063\037\055\040\057\045\050\046\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\235\011\246\015\236" +
    "\034\245\036\244\037\240\040\241\045\237\046\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\106\001\001\000\004\026\104" +
    "\001\001\000\002\001\001\000\004\026\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\114\001\001\000\004\026" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\340\016\126\001\001\000" +
    "\006\014\130\016\126\001\001\000\002\001\001\000\006" +
    "\017\306\025\261\001\001\000\006\017\257\025\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\041\007\247\011\066\015\047\034\065\036" +
    "\063\037\055\040\057\045\050\046\042\001\001\000\026" +
    "\005\041\007\135\011\066\015\047\034\065\036\063\037" +
    "\055\040\057\045\050\046\042\001\001\000\024\005\235" +
    "\011\246\015\236\034\245\036\244\037\240\040\241\045" +
    "\237\046\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\154\042\145\043\163\044\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\235\011\246\015" +
    "\236\034\245\036\244\037\240\040\241\045\237\046\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\041\007\253\011\066\015\047\034\065\036\063\037\055" +
    "\040\057\045\050\046\042\001\001\000\024\005\235\011" +
    "\246\015\236\034\245\036\244\037\240\040\241\045\237" +
    "\046\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\274\001\001\000\002\001\001\000\004" +
    "\020\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\322\025\261\001\001\000\006\017\311" +
    "\025\261\001\001\000\004\020\316\001\001\000\004\020" +
    "\313\001\001\000\002\001\001\000\004\020\321\001\001" +
    "\000\004\020\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\324\001\001\000\002\001\001\000\004\020" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\041\007\343\011\066\015\047\034\065\036\063" +
    "\037\055\040\057\045\050\046\042\001\001\000\024\005" +
    "\235\011\246\015\236\034\245\036\244\037\240\040\241" +
    "\045\237\046\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u015c\001\001\000\004\035\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u0142" +
    "\001\001\000\004\035\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\u0134\001\001\000\004\035\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\u0146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u014b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u014f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u0155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u0159\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\u0160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u0164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u016a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u016e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u018e" +
    "\001\001\000\006\012\u0189\026\u0187\001\001\000\004\012" +
    "\u017b\001\001\000\004\031\u0182\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0185\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0184\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0182" +
    "\001\001\000\002\001\001\000\004\026\u018b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u01b4\001" +
    "\001\000\004\012\u01a3\001\001\000\004\012\u0198\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\041\007" +
    "\u019b\011\066\015\047\034\065\036\063\037\055\040\057" +
    "\045\050\046\042\001\001\000\024\005\235\011\246\015" +
    "\236\034\245\036\244\037\240\040\241\045\237\046\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\041\007\u01a0\011\066\015\047\034\065" +
    "\036\063\037\055\040\057\045\050\046\042\001\001\000" +
    "\024\005\235\011\246\015\236\034\245\036\244\037\240" +
    "\040\241\045\237\046\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u01a5\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\041\007" +
    "\u01a8\011\066\015\047\034\065\036\063\037\055\040\057" +
    "\045\050\046\042\001\001\000\024\005\235\011\246\015" +
    "\236\034\245\036\244\037\240\040\241\045\237\046\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\041\007\u01ad\011\066\015\047\034\065" +
    "\036\063\037\055\040\057\045\050\046\042\001\001\000" +
    "\024\005\235\011\246\015\236\034\245\036\244\037\240" +
    "\040\241\045\237\046\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\041\007\u01b2" +
    "\011\066\015\047\034\065\036\063\037\055\040\057\045" +
    "\050\046\042\001\001\000\024\005\235\011\246\015\236" +
    "\034\245\036\244\037\240\040\241\045\237\046\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u01f7" +
    "\001\001\000\002\001\001\000\004\012\u01b9\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\041\007\u01c8" +
    "\011\066\015\047\034\065\036\063\037\055\040\057\045" +
    "\050\046\042\001\001\000\002\001\001\000\026\005\041" +
    "\007\u01bd\011\066\015\047\034\065\036\063\037\055\040" +
    "\057\045\050\046\042\001\001\000\024\005\235\011\246" +
    "\015\236\034\245\036\244\037\240\040\241\045\237\046" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\041\007\u01c5\011\066\015\047\034\065\036\063\037" +
    "\055\040\057\045\050\046\042\001\001\000\026\005\041" +
    "\007\u01c2\011\066\015\047\034\065\036\063\037\055\040" +
    "\057\045\050\046\042\001\001\000\024\005\235\011\246" +
    "\015\236\034\245\036\244\037\240\040\241\045\237\046" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\235\011\246\015\236\034\245\036\244\037\240\040" +
    "\241\045\237\046\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\235\011\246\015\236\034\245\036" +
    "\244\037\240\040\241\045\237\046\042\001\001\000\002" +
    "\001\001\000\026\005\041\007\u01cb\011\066\015\047\034" +
    "\065\036\063\037\055\040\057\045\050\046\042\001\001" +
    "\000\024\005\235\011\246\015\236\034\245\036\244\037" +
    "\240\040\241\045\237\046\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\041\007\u01d6\011" +
    "\066\015\047\034\065\036\063\037\055\040\057\045\050" +
    "\046\042\001\001\000\024\005\235\011\246\015\236\034" +
    "\245\036\244\037\240\040\241\045\237\046\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\041\007" +
    "\u01de\011\066\015\047\034\065\036\063\037\055\040\057" +
    "\045\050\046\042\001\001\000\026\005\041\007\u01db\011" +
    "\066\015\047\034\065\036\063\037\055\040\057\045\050" +
    "\046\042\001\001\000\024\005\235\011\246\015\236\034" +
    "\245\036\244\037\240\040\241\045\237\046\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\235\011" +
    "\246\015\236\034\245\036\244\037\240\040\241\045\237" +
    "\046\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\041\007\u01e9\011\066\015\047\034\065\036\063" +
    "\037\055\040\057\045\050\046\042\001\001\000\002\001" +
    "\001\000\026\005\041\007\u01e4\011\066\015\047\034\065" +
    "\036\063\037\055\040\057\045\050\046\042\001\001\000" +
    "\024\005\235\011\246\015\236\034\245\036\244\037\240" +
    "\040\241\045\237\046\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\235\011\246\015\236\034\245\036\244\037\240\040" +
    "\241\045\237\046\042\001\001\000\002\001\001\000\026" +
    "\005\041\007\u01ec\011\066\015\047\034\065\036\063\037" +
    "\055\040\057\045\050\046\042\001\001\000\024\005\235" +
    "\011\246\015\236\034\245\036\244\037\240\040\241\045" +
    "\237\046\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\041\007\u01f0\011\066\015\047\034\065\036" +
    "\063\037\055\040\057\045\050\046\042\001\001\000\024" +
    "\005\235\011\246\015\236\034\245\036\244\037\240\040" +
    "\241\045\237\046\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\041\007\u01f4\011\066\015\047\034" +
    "\065\036\063\037\055\040\057\045\050\046\042\001\001" +
    "\000\024\005\235\011\246\015\236\034\245\036\244\037" +
    "\240\040\241\045\237\046\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\041\007\u01fa\011\066\015\047\034\065\036\063" +
    "\037\055\040\057\045\050\046\042\001\001\000\024\005" +
    "\235\011\246\015\236\034\245\036\244\037\240\040\241" +
    "\045\237\046\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\041\007\u01ff\011\066" +
    "\015\047\034\065\036\063\037\055\040\057\045\050\046" +
    "\042\001\001\000\024\005\235\011\246\015\236\034\245" +
    "\036\244\037\240\040\241\045\237\046\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u020b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u021f\001\001\000\004" +
    "\035\u0217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u0225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u0230\001\001\000\004\026" +
    "\u022b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\u0238\042\145\043\163\044\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\041" +
    "\u023f\042\145\043\163\044\162\001\001\000\012\041\u023d" +
    "\042\145\043\163\044\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\041\u0241\042\145" +
    "\043\163\044\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\041\u0245\042\145\043\163" +
    "\044\162\001\001\000\002\001\001\000\024\005\235\011" +
    "\246\015\236\034\245\036\244\037\240\040\241\045\237" +
    "\046\042\001\001\000\002\001\001\000\026\005\041\007" +
    "\u0249\011\066\015\047\034\065\036\063\037\055\040\057" +
    "\045\050\046\042\001\001\000\024\005\235\011\246\015" +
    "\236\034\245\036\244\037\240\040\241\045\237\046\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\u0250" +
    "\021\u025f\023\u024f\001\001\000\010\013\u0250\021\u025e\023" +
    "\u024f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\041\007\u0255\011\066\015\047\034" +
    "\065\036\063\037\055\040\057\045\050\046\042\001\001" +
    "\000\024\005\235\011\246\015\236\034\245\036\244\037" +
    "\240\040\241\045\237\046\042\001\001\000\002\001\001" +
    "\000\026\005\041\007\u025c\011\066\015\047\034\065\036" +
    "\063\037\055\040\057\045\050\046\042\001\001\000\026" +
    "\005\041\007\u0259\011\066\015\047\034\065\036\063\037" +
    "\055\040\057\045\050\046\042\001\001\000\024\005\235" +
    "\011\246\015\236\034\245\036\244\037\240\040\241\045" +
    "\237\046\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\235\011\246\015\236\034\245\036\244\037" +
    "\240\040\241\045\237\046\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u0296\001" +
    "\001\000\004\033\u0264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u026a\001\001\000\004\027\u0275\001\001" +
    "\000\004\027\u0270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u0277\001\001\000\004\030\u027a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u027c\001\001\000\002\001\001\000\004\027" +
    "\u0280\001\001\000\004\027\u027f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u0282\001\001\000\004\030" +
    "\u0283\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0287\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u0293\001\001" +
    "\000\004\024\u028c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0299\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\041\007\044\011\066\015\047\022\034\032\u029e\034" +
    "\065\036\063\037\055\040\057\045\050\046\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\034\032\u02a3\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    boolean esDAssig=false;
    int fl;

    public Cup(java_cup.runtime.Scanner s,ArrayList<Error1> m,int tfl) {
        super(s);
        ManejadorDeErrores =m;
        fl = tfl;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }
    /*public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
            try{
                Object result = sintactico.parse().value;
            }catch(Exception ex){


            }
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // parametros2 ::= COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // parametros2 ::= ID parametros 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // parametros2 ::= COMA ID parametros 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // parametros2 ::= COMA ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros2",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // parametros ::= ID parametros2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // parametros ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // funcion ::= FUNCTION ID PARENTESIS_A LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // funcion ::= FUNCTION ID PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // funcion ::= FUNCTION PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // funcion ::= FUNCTION ID PARENTESIS_A error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // funcion ::= FUNCTION ID error PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // funcion ::= FUNCTION error PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // funcion ::= FUNCTION ID PARENTESIS_A parametros LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // funcion ::= FUNCTION ID parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // funcion ::= FUNCTION PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // funcion ::= FUNCTION ID PARENTESIS_A parametros error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // funcion ::= FUNCTION ID error parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // funcion ::= FUNCTION error PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // funcion ::= FUNCTION ID PARENTESIS_A LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // funcion ::= FUNCTION ID PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // funcion ::= FUNCTION PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_A error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // funcion ::= FUNCTION ID PARENTESIS_A error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // funcion ::= FUNCTION ID error PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // funcion ::= FUNCTION error PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // funcion ::= FUNCTION ID PARENTESIS_A parametros LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // funcion ::= FUNCTION error parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // funcion ::= FUNCTION PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_A error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // funcion ::= FUNCTION ID PARENTESIS_A parametros error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // funcion ::= FUNCTION ID error parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // funcion ::= FUNCTION error PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // funcion ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // comparador ::= IGUAL2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // comparador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // comparador ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // comparador ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // comparador ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("comparador",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // compuerta ::= XOR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // compuerta ::= ORSIMPLE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // compuerta ::= OR 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // compuerta ::= ANDSIMPLE 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // compuerta ::= AND 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("compuerta",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NUMIDSTR ::= INVNUMERO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NUMIDSTR ::= NUMERO INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NUMIDSTR ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NUMIDSTR ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NUMIDSTR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // asignarVariable ::= ID error NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '=' ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // asignarVariable ::= ID ASIGNACION NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // asignarVariable ::= ID ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // asignarVariable ::= ID error ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un  '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // asignarVariable ::= VAR ID ASIGNACION error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // asignarVariable ::= VAR ID error NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un  '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // asignarVariable ::= VAR error ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // asignarVariable ::= ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // asignarVariable ::= ID ASIGNACION PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" No se asigno un valor a la variable."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // asignarVariable ::= ID NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // asignarVariable ::= VAR ID PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '=."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING', 'ID' O 'NUMERO'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // asignarVariable ::= VAR ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // asignarVariable ::= VAR ID ASIGNACION PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" No se asigno un valor a la variable."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // asignarVariable ::= VAR ID NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // asignarVariable ::= ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignarVariable",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NUMID ::= INVNUMERO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NUMID ::= NUMERO INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NUMID ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NUMID ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NUMID",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expFor3 ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un un operador de decremento o cremento."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expFor3 ::= error OPERDECREMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expFor3 ::= ID OPERDECREMENTO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expFor3 ::= ID OPERCREMENTO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor3",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expFor2 ::= NUMID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un operador relacional ."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor2",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expFor2 ::= NUMID comparador NUMID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor2",13, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expFor1 ::= VAR ID ASIGNACION INVNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Numero invalido."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expFor1 ::= VAR ID error NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '='."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expFor1 ::= VAR error ASIGNACION NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expFor1 ::= VAR ID ASIGNACION NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expFor1",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // condicionFor ::= expFor1 PUNTOCOMA expFor2 expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // condicionFor ::= expFor1 PUNTOCOMA PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el segundo parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // condicionFor ::= expFor1 expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condicionFor ::= PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el primer parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba el tercer parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condicionFor ::= expFor1 PUNTOCOMA expFor2 error expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // condicionFor ::= expFor1 error expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionFor",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sentenciaFor ::= FOR PARENTESIS_A condicionFor error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sentenciaFor ::= FOR error condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentenciaFor ::= FOR PARENTESIS_A condicionFor error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ';'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentenciaFor ::= FOR error condicionFor PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		 System.out.println("For"); parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		 System.out.println("For"); 
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaFor",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentenciaDeclare ::= DECLARE PAGE ID error LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentenciaDeclare ::= DECLARE PAGE error LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentenciaDeclare ::= DECLARE error ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'PAGE'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // cuerpoTabla ::= STRING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // cuerpoTabla ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cuerpoTabla ::= STRING COMA cuerpoTabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // cuerpoTabla ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ']'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A error CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Estructura de tabla incorrecta."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA error cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C error CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla error COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ']'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A error CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Estructura de tabla incorrecta."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA error cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-7)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C error CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-8)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla error COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-9)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ']'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A error CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-10)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Estructura de tabla incorrecta."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tabla ::= TABLE PARENTESIS_A STRING COMA error cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-11)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tabla ::= TABLE PARENTESIS_A STRING error CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-12)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tabla ::= TABLE PARENTESIS_A error COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-13)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-13)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tabla ::= TABLE error STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-14)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-14)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-15)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tabla ::= TABLE PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lista ::= LIST PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // lista ::= LIST PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ']'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lista ::= LIST PARENTESIS_A STRING COMA CORCHETE_A error CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Estructura de lista incorrecta."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lista ::= LIST PARENTESIS_A STRING COMA error cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lista ::= LIST PARENTESIS_A STRING error CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lista ::= LIST PARENTESIS_A error COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lista ::= LIST error STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lista ::= LIST PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lista",35, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // llamarFuncion ::= ID PARENTESIS_A parametros error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // llamarFuncion ::= ID PARENTESIS_A error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // llamarFuncion ::= ID error parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // llamarFuncion ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // llamarFuncion ::= ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("llamarFuncion",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funciones4 ::= inHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones4",34, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funciones3 ::= Remove 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funciones3 ::= RClass 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funciones3 ::= AClass 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // funciones3 ::= RChild 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // funciones3 ::= getAtt 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // funciones3 ::= beforeChild 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // funciones3 ::= Child 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // funciones3 ::= ChildText 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones3",33, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // funciones2 ::= optSelect 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones2",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // funciones2 ::= setHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones2",32, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // funciones ::= funciones4 PARENTESIS_A error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // funciones ::= funciones4 error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // funciones ::= error PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Funcion invalida."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // funciones ::= funciones2 PARENTESIS_A STRING COMA STRING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funciones ::= funciones2 PARENTESIS_A STRING COMA error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // funciones ::= funciones2 PARENTESIS_A STRING error STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ','."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // funciones ::= funciones2 PARENTESIS_A error COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funciones ::= funciones2 error STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funciones ::= error PARENTESIS_A STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Funcion invalida."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funciones ::= funciones3 PARENTESIS_A STRING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // funciones ::= funciones3 PARENTESIS_A error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING"));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // funciones ::= funciones3 error STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('"));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // funciones ::= error PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Funcion invalida."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // funciones ::= funciones4 PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // funciones ::= funciones2 PARENTESIS_A STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // funciones ::= funciones3 PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // elementos ::= docCreateElem 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("elementos",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // elementos ::= docGetElemClass 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("elementos",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // elementos ::= docGetElemID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("elementos",36, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // obtenerElemento ::= elementos PARENTESIS_A STRING error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // obtenerElemento ::= elementos PARENTESIS_A error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // obtenerElemento ::= elementos error STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // obtenerElemento ::= elementos PARENTESIS_A STRING PARENTESIS_C PUNTO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Funcion invalida."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // obtenerElemento ::= elementos PARENTESIS_A STRING PARENTESIS_C error funciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '.'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // obtenerElemento ::= elementos PARENTESIS_A STRING error PUNTO funciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // obtenerElemento ::= elementos PARENTESIS_A error PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un STRING."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // obtenerElemento ::= elementos error STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // obtenerElemento ::= error PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Funcion invalida."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // obtenerElemento ::= elementos PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // obtenerElemento ::= elementos PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("obtenerElemento",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // consola ::= CONSOL PARENTESIS_A NUMIDSTR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("consola",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // consola ::= CONSOL PARENTESIS_A error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un NUMERO, STRING o ID."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("consola",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // consola ::= CONSOL error NUMIDSTR PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("consola",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // consola ::= CONSOL PARENTESIS_A NUMIDSTR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("consola",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cuerpo ::= cuerpo lista 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpo ::= lista 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cuerpo ::= cuerpo llamarFuncion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpo ::= llamarFuncion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpo ::= cuerpo obtenerElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpo ::= obtenerElemento 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpo ::= cuerpo consola 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo ::= consola 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpo ::= cuerpo tabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpo ::= tabla 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpo ::= cuerpo funcion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpo ::= funcion 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo ::= cuerpo asignarVariable 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo ::= asignarVariable 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo ::= cuerpo sentenciaFor 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NI ::= STRING SUMA NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NI ::= NUMERO SUMA STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NI ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NI ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NI ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NI",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicionCSS2 ::= COMA STRING DOSPUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING', 'NUMERO' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicionCSS2 ::= COMA STRING NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicionCSS2 ::= COMA DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicionCSS2 ::= STRING DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ',''."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS2",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicionCSS ::= 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicionCSS ::= STRING DOSPUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING', 'NUMERO' o 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicionCSS ::= STRING NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ':'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicionCSS ::= DOSPUNTOS NI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicionCSS ::= STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicionCSS ::= STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicionCSS",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cadena ::= ID 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cadena ::= STRING 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cadena",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C error PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS error PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba ')'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA error condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '['."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaCSS ::= CSS PARENTESIS_A cadena error CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba una ',' despues del primero parametro."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaCSS ::= CSS PARENTESIS_A error COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba un 'STRING'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaCSS ::= CSS error cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-6)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '('."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaJS ::= JS ID error cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaJS ::= JS ID LLAVE_A cuerpo error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaJS ::= JS error LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaJS ::= JS ID LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaJS",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaHTML ::= HTML cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaHTML ::= HTML LLAVE_A cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaHTML ::= LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaHTML ::= LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentenciaHTML ::= HTML LLAVE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentenciaHTML ::= HTML LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentenciaHTML ::= HTML LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentenciaHTML ::= HTML LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentenciasInterior ::= sentenciaCSS sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentenciasInterior ::= sentenciaCSS 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentenciasInterior ::= sentenciaJS sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentenciasInterior ::= sentenciaJS 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // primeraSentencia ::= sentenciaHTML sentenciasInterior 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primeraSentencia",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primeraSentencia ::= sentenciaHTML 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("primeraSentencia",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '}'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciaMain ::= MAIN ID primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentenciaMain ::= MAIN LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentenciaMain ::= ID LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'MAIN'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciaMain ::= MAIN ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba funcion 'HTML'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciaMain ::= MAIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba 'ID'."));parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Se esperaba '{};'."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentenciaMain",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		parser.ManejadorDeErrores.add(new Error1("ES",eleft,eright,"Error sintactico en la linea: "+(eleft+1)+", columna: "+(eright+1)+"."+" Error en la estructura del programa."));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sentenciaMain sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentenciaMain 
            {
              Object RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

