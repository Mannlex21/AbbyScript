package mx.edu.ittepic.automatas;
import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;

action code{:
    static String fin="",finJs="",finFun="",finCss="";
    static String v="",v2="",v3="",v4="",v5="", vText="",jsText="";
    static String attrElem="",attrElem2="", listaElem="";
    static String expFor1="",expFor2="",expFor3="",expForOper="",expForAsig="",forElem="", varFor="",
                    varExpFor1="",varCssCadena="",varCss1="",varCss2="",varFor2="",varFor3="";
    :};

parser code {:
    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    ArrayList<Variables> ManejadorVariables;
    boolean esDAssig=false;
    int fl;


    public CupObjeto(java_cup.runtime.Scanner s,ArrayList<Variables> v,ArrayList<Error1> m,int tfl) {
        super(s);
        ManejadorDeErrores =m;
        ManejadorVariables = v;
        fl = tfl;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontr√≥ ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }
    /*public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
            try{
                Object result = sintactico.parse().value;
            }catch(Exception ex){


            }
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/
:};

//DECLARACION DE TERMINALES
terminal    COMENTARIO,LITERAL,ERROR,LOGIC,
            CSS, HTML, VAR, MAIN,FUNCTION,IF,FOR,OBJECT,ARRAY,DECLARE,JS,CREATE,PAGE,FALSE,THIS,RETURN,ELSE,CATCH,TRY,
            BREAK,MAPX,FORMATTER,DATE,NULL,NEW,TRUE,PARENTESIS_A,PARENTESIS_C,LLAVE_A,LLAVE_C,CORCHETE_A,CORCHETE_C,
            GUIONBAJO,PUNTOCOMA,DOSPUNTOS,PUNTO,AND,ANDSIMPLE,OR,ORSIMPLE,NOT,XOR,MAYORQUE,MAYORIGUAL,MENORQUE,MENORIGUAL,IGUAL,IGUAL2,
            DIFERENTE,SUMA,RESTA,MULTIPLICACION,DIVISION,ASIGNACION,ASIGNACIONINCRE,ASIGNACIONDECRE,ASIGNACIONMULT,ASIGNACIONDIV,OPERDECREMENTO,
            OPERCREMENTO,ID,PACKAGE,STRING,NUMERO, COMA, EN, WHILE, fileName, PrintCon, getAtt, JQDocReady, docGetElemID,docGetElemClass, docGetElemTag,
            docCreateElemTag, docCreateElem, docOn, Remove, JQElem, CONSOL, Child, ChildText,ChildTextH, RChild, beforeChild, Value, Val, makeTable, setHTML,
            HG, WD, inHTML,outHTML, css, getBody, getDate, getDay,getYear, getHour, getMSecond, getMinute, getMonth, getSecond, div, hvr, AClass, RClass,
            COMILLA_SIMPLE, INVNUMERO, TABLE, DIV, optSelect, LIST
            ;

/*terminal String ID,STRING;
terminal Integer NUMERO;*/

//DECLACACION DE NO TERMINALES
non terminal inicio, sentenciaDeclare, asignarVariable, comparador, cuerpo, compuerta, funcion, parametros,
            sentenciaJS, condicionFor, sentenciaFor, expFor1,expFor2,expFor3,sentenciasInterior, sentenciaHTML, sentenciaCSS,
            condicionCSS, NUMID,NUMIDSTR,NI, condicionCSS2, parametros2,parametros3, primeraSentencia, cadena, tabla, cuerpoTabla,cuerpoLista,  consola,
            obtenerElemento,crearElemento,elementos2,llamarFuncion, funciones, funciones2,funciones3, funciones4, lista, elementos, divElem,
            cuerpoFor,cuerpo2;
non terminal sentenciaMain;
precedence right PARENTESIS_A, PARENTESIS_C;
precedence right LLAVE_A, LLAVE_C;
precedence right CORCHETE_A, CORCHETE_C;
precedence right ID,STRING;





start with inicio;

///////////////////////////////INICIO///////////////////////////////////

inicio ::=    sentenciaMain
                {:
                    //fin=fin+"\n";


                    :}
            | sentenciaMain sentenciaDeclare
;

sentenciaMain ::=   MAIN ID:e LLAVE_A primeraSentencia LLAVE_C
                    {://fin="MAIN "+e+" { \n"+fin+"}M\n";:}

;
primeraSentencia::= sentenciaHTML
                    {:Principal.codigointer=""+fin;:}
                    | sentenciaHTML sentenciasInterior
                    {:Principal.codigointer=""+fin;:}
;
sentenciasInterior::=   sentenciaJS
                        {:Principal.codigointerJs="\n"+finJs;:}
                        | sentenciaJS sentenciasInterior
                            {:Principal.codigointerJs="\n"+finJs;:}
                        | sentenciaCSS
                            {:Principal.codigointerCss="\n"+finCss;:}
                        | sentenciaCSS sentenciasInterior
                            {:Principal.codigointerCss="\n"+finCss;:}
;

sentenciaHTML ::=
                    HTML LLAVE_A cuerpo2 LLAVE_C
                        {://fin="HTML { \n"+fin+"}H\n";:}
                    | HTML LLAVE_A LLAVE_C
;
sentenciaJS ::=  JS ID LLAVE_A cuerpo LLAVE_C
 ;
sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C
                    {:finCss=finCss+varCssCadena+"{\n"+varCss1+"}\n";varCss1="";:}
;
cadena::= STRING:e {:String[] x=e.toString().split("\"");varCssCadena=x[1];:}| ID:e {:varCssCadena=e.toString();:};
condicionCSS ::= STRING:e DOSPUNTOS STRING:e2
                    {:
                        String[] x=e.toString().split("\"");
                        String[] x2=e2.toString().split("\"");
                        varCss1=varCss1+x[1]+":"+x2[1]+";\n";
                    :}
                | STRING:e DOSPUNTOS STRING:e2 COMA condicionCSS
                    {:
                        String[] x=e.toString().split("\"");
                        String[] x2=e2.toString().split("\"");
                        varCss1=varCss1+x[1]+":"+x2[1]+";\n";
                    :}
;
condicionCSS2 ::= COMA STRING DOSPUNTOS NI
                | COMA STRING DOSPUNTOS NI condicionCSS2
;
NI ::= NUMERO |ID | STRING | NUMERO SUMA STRING | STRING SUMA NUMERO
;
cuerpo2::=crearElemento
            | cuerpo2 crearElemento
            | tabla
            | cuerpo2 tabla
            | divElem
            | cuerpo2 divElem
            | lista
            | cuerpo2 lista
            | sentenciaFor
            | cuerpo2 sentenciaFor
;
cuerpo ::=
            asignarVariable
            | cuerpo asignarVariable
            | funcion
            | cuerpo funcion
            | consola
            | cuerpo consola
            | obtenerElemento
            | cuerpo obtenerElemento
            | llamarFuncion
            | cuerpo llamarFuncion
;
/*cuerpo ::=   sentenciaFor
            | cuerpo sentenciaFor
            | tabla
            | cuerpo tabla
            | crearElemento
            | cuerpo crearElemento
            | lista
            | cuerpo lista
            | divElem
            | cuerpo divElem
            | asignarVariable
            | cuerpo asignarVariable
            | funcion
            | cuerpo funcion
            | consola
            | cuerpo consola
            | obtenerElemento
            | cuerpo obtenerElemento
            | llamarFuncion
            | cuerpo llamarFuncion
;*/
cuerpoFor ::=   sentenciaFor
                {:forElem=forElem+varFor2;varFor2="";:}
            | cuerpoFor sentenciaFor
              {:forElem=forElem+varFor2;varFor2="";:}
            | tabla
              {:forElem=forElem+varFor2;varFor2="";:}
            | cuerpoFor tabla
              {:forElem=forElem+varFor2;varFor2="";:}
            | crearElemento
              {:forElem=forElem+varFor2;varFor2="";:}
            | cuerpoFor crearElemento
              {:forElem=forElem+varFor2;varFor2="";:}
            | lista
              {:forElem=forElem+varFor2;varFor2="";:}
            | cuerpoFor lista
              {:forElem=forElem+varFor2;varFor2="";:}
            | divElem
              {:forElem=forElem+varFor2;varFor2="";:}
            | cuerpoFor divElem
              {:forElem=forElem+varFor2;varFor2="";:}

;
/*--------------------------------------------------------------*/
consola::= CONSOL PARENTESIS_A NUMIDSTR PARENTESIS_C
            {:
                System.out.println(v3);
                for (int i = 0; i <= parser.ManejadorVariables.size() - 1; i++) {
                     String variableNombre = parser.ManejadorVariables.get(i).nombre;
                     if(v3.equals(variableNombre)){

                     }
                 }
                //finJs=finJs+"console.log("+v3+");\n";
            :}
;
crearElemento::= elementos2 PARENTESIS_A STRING:e PARENTESIS_C PUNTO funciones
                        {:
                                String x4="";
                                String[] x= e.toString().split("\"");
                                String[] x2 = attrElem2.toString().split(",");
                                String[] x3 = attrElem.toString().split(",");
                                String[] x5=  vText.split("\"");
                                for(int i=0; i<x3.length;i++){
                                    x4=x4+x3[i]+"='"+x2[i]+"' ";
                                }
                                if(vText.equals("") || vText==null ){
                                    fin=fin+"<"+x[1]+" "+x4+"></"+x[1]+">\n";
                                    varFor2="<"+x[1]+" "+x4+"></"+x[1]+">\n";
                                    varFor3=varFor3+"<"+x[1]+" "+x4+"></"+x[1]+">\n";
                                }else{
                                    fin=fin+"<"+x[1]+" "+x4+">"+x5[1]+"</"+x[1]+">\n";
                                    varFor2="<"+x[1]+" "+x4+">"+x5[1]+"</"+x[1]+">\n";
                                    varFor3=varFor3+"<"+x[1]+" "+x4+">"+x5[1]+"</"+x[1]+">\n";
                                }
                                attrElem="";
                                attrElem2="";
                                vText="";
                        :}
                    | elementos2 PARENTESIS_A STRING:e PARENTESIS_C
                        {:
                            if(v.equals("docCreateElem")){
                                String[] x= e.toString().split("\"");
                                fin=fin+"<"+x[1]+"></"+x[1]+">\n";
                            }
                        :}
;
obtenerElemento::= elementos PARENTESIS_A STRING:e PARENTESIS_C PUNTO funciones
                    {:
                            if(v.equals("docGetElemID")){
                                if(v5.equals("true")){
                                    finFun=finFun+"document.getElementById("+e.toString()+")"+jsText+"\n";
                                }else{
                                    finJs=finJs+"document.getElementById("+e.toString()+")"+jsText+"\n";
                                }

                            }
                    :}
                    | elementos PARENTESIS_A STRING:e PARENTESIS_C
                        {:
                            if(v.equals("docGetElemID")){
                                if(v5.equals("true")){
                                    finFun=finFun+"document.getElementById("+e.toString()+");\n";
                                }else{
                                    finJs=finJs+"document.getElementById("+e.toString()+");\n";
                                }

                            }
                        :}
;
elementos::= docGetElemID {:v="docGetElemID";:}
            | docGetElemClass {:v="docCreateElem";:}
;
elementos2::= docCreateElem
              {:v="docCreateElem";:}
;

funciones::=funciones3 PARENTESIS_A STRING:e PARENTESIS_C
            {:
                if(v3.equals("ChildText")){
                    vText=e.toString();
                    jsText=".appendChild(document.createTextNode("+e.toString()+"));\n";
                }else if(v3.equals("Child")){
                    jsText=".appendChild(document.getElementById("+e.toString()+"));\n";
                }else if(v3.equals("beforeChild")){
                    jsText=".insertBefore(newItem, list.childNodes[0]);\n";
                }else if(v3.equals("getAtt")){
                        jsText=".getAttribute("+e.toString()+");\n";
                }else if(v3.equals("RChild")){
                    jsText=".removeChild("+e.toString()+");\n";
                }else if(v3.equals("AClass")){
                    jsText=".addClass( "+e.toString()+" );\n";
                }else if(v3.equals("RClass")){
                    jsText=".removeClass( "+e.toString()+" );\n";
                }else if(v3.equals("Remove")){
                    jsText=".removeChild( "+e.toString()+" );\n";
                }
                else if(v3.equals("ChildTextH")){
                    vText=e.toString();
                }
            :}

            | funciones2 PARENTESIS_A STRING:e1 COMA STRING:e2 PARENTESIS_C
                {:
                    if(v2.equals("setHTML")){
                    String[] x= e2.toString().split("\"");
                    String[] x2= e1.toString().split("\"");
                    attrElem=attrElem+x2[1]+",";
                    attrElem2=attrElem2+x[1]+",";
                    }else if(v2.equals("beforeChild")){
                        jsText=".insertBefore(document.getElementById("+e1.toString()+"), document.getElementById("+e2.toString()+"));\n";
                    }
                :}
            | funciones2 PARENTESIS_A STRING:e1 COMA STRING:e2 PARENTESIS_C PUNTO funciones
                {:
                    if(v2.equals("setHTML")){
                    String[] x= e2.toString().split("\"");
                    String[] x2= e1.toString().split("\"");
                    attrElem=attrElem+x2[1]+",";
                    attrElem2=attrElem2+x[1]+",";
                    }
                    jsText=jsText+"\n";
                :}
            | funciones4 PARENTESIS_A PARENTESIS_C
                {:
                    if(v3.equals("inHTML")){
                        jsText=".innerHTML;\n";
                    }
                :}

;
funciones2::= setHTML {:v2="setHTML";:}| beforeChild {:v2="beforeChild";:};
funciones3::= ChildText {:v3="ChildText";:} | Child {:v3="Child";:}  | getAtt {:v3="getAtt";:}
            | RChild {:v3="RChild";:} | AClass {:v3="AClass";:} | RClass {:v3="RClass";:} | Remove {:v3="Remove";:}
            | ChildTextH {:v3="ChildTextH";:}

;
funciones4::=inHTML {:v3="inHTML";:};
llamarFuncion::= ID:e PARENTESIS_A parametros PARENTESIS_C
                    {:
                        finJs=finJs+e.toString()+"("+v3+");\n";
                    :}
                    | ID:e PARENTESIS_A PARENTESIS_C
                        {:
                        finJs=finJs+e.toString()+"();\n";
                    :}
;
lista::= LIST PARENTESIS_A STRING:e COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C
            {:
                String[] x=e.toString().split("\"");
                String[] x2 = listaElem.toString().split(",");
                String x3="";
                for(int i=0; i<x2.length;i++){
                    String[] x4=x2[i].split("\"");
                    x3=x3+"\n<li class='list-group-item list-group-item-success'>"+x4[1]+"</li>";
                }
                fin=fin+"<ul id="+e.toString()+" class='list-group col-sm-4'>"+x3+"\n</ul>\n";
                varFor2="<ul id="+e.toString()+" class='list-group col-sm-4'>"+x3+"\n</ul>\n";
                listaElem="";
            :}
;

tabla::= TABLE PARENTESIS_A PARENTESIS_C
           {:fin=fin+"<table class='table'></table>\n";:}
        |TABLE PARENTESIS_A STRING:e COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA
            CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C
            {:
                String[] x = listaElem.split(",");
                String x2="",x3="",x4="";
                int r = ((x.length)/3);
                int r2= r,r3=r*2;
                //Strin[] id=e.toString().split("");
                for(int i=0;i<r;i++){
                    x2=x2+"<th>"+x[i]+"</th>\n";
                    x3=x3+"<th>"+x[r2]+"</th>\n";
                    x4=x4+"<th>"+x[r3]+"</th>\n";
                    r2++;r3++;
                }
                x2="<tr>\n"+x2+"</tr>\n";
                x3="<tr>\n"+x3+"</tr>\n";
                x4="<tr>\n"+x4+"</tr>\n";
                fin=fin+"<table id="+e.toString()+" class='table col-sm-4 table-striped'>\n"+x2+x3+x4+"</table>\n";
                varFor2="<table id="+e.toString()+" class='table col-sm-4 table-striped'>\n"+x2+x3+x4+"</table>\n";
                listaElem="";
            :}
;
cuerpoTabla::= STRING:e
                {:listaElem=listaElem+e.toString()+",";:}
                | STRING:e COMA cuerpoTabla
                {:listaElem=listaElem+e.toString()+",";:}
;

divElem::= DIV ID:e LLAVE_A cuerpo2 LLAVE_C
            {:fin="<div id='"+e.toString()+"'>\n"+fin+"</div>\n";
            varFor3="";
                varFor2="<div id='"+e.toString()+"'>\n"+fin+"</div>\n"; :}
           | DIV ID LLAVE_A LLAVE_C
;
/*--------------------------------------------------------------*/
sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C
                    | DECLARE PAGE ID LLAVE_A LLAVE_C sentenciaDeclare
;
sentenciaFor ::=  FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpoFor LLAVE_C
                {:
                        String x ="";
                        if(expForAsig.equals("<")){
                            if(expForOper.equals("++")){

                                for(int i=Integer.parseInt(expFor1);i<(Integer.parseInt(expFor2)-1);i++){
                                    //System.out.print("Prueba-");
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }else if(expForOper.equals("--")){
                                 for(int i=Integer.parseInt(expFor1);i<(Integer.parseInt(expFor2)-1);i--){
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }

                        }else if(expForAsig.equals(">")){
                            if(expForOper.equals("++")){
                                for(int i=Integer.parseInt(expFor1);i>(Integer.parseInt(expFor2)-1);i++){
                                    //System.out.print("Prueba-");
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }else if(expForOper.equals("--")){
                                 for(int i=Integer.parseInt(expFor1);i>(Integer.parseInt(expFor2)-1);i--){
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }

                        }else if(expForAsig.equals("<=")){
                            if(expForOper.equals("++")){
                                for(int i=Integer.parseInt(expFor1);i<=(Integer.parseInt(expFor2)-1);i++){
                                    //System.out.print("Prueba-");
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }else if(expForOper.equals("--")){
                                 for(int i=Integer.parseInt(expFor1);i<=(Integer.parseInt(expFor2)-1);i--){
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }

                        }else if(expForAsig.equals(">=")){
                            if(expForOper.equals("++")){

                                for(int i=Integer.parseInt(expFor1);i>=(Integer.parseInt(expFor2)-1);i++){
                                    //System.out.print("Prueba-");
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }else if(expForOper.equals("--")){
                                 for(int i=Integer.parseInt(expFor1);i>=(Integer.parseInt(expFor2)-1);i--){
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }

                        }
                        if(!varFor.equals("true")){
                            finJs=finJs+"FOR(var "+varExpFor1+" = "+Integer.parseInt(expFor1)+";"+expFor2+" "+expForAsig+" "+expFor2+";"+varExpFor1+expForOper+"){"+forElem+"};\n";
                        }


                     :}
                | FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A LLAVE_C
                    {:System.out.println("entro");
                        String[] x= varExpFor1.split("");

                        if(!varFor.equals("true")){
                            finJs=finJs+"FOR(var "+varExpFor1+" = "+Integer.parseInt(expFor1)+";"+expFor2+" "+expForAsig+" "+expFor2+";"+varExpFor1+expForOper+"){};\n";
                        }
                    :}
;

condicionFor ::=    expFor1 PUNTOCOMA expFor2 PUNTOCOMA expFor3

;

expFor1 ::=   VAR ID:i ASIGNACION NUMERO:e
                {:expFor1=e.toString();
                 varExpFor1=i.toString();
                   varFor="true";:}
;

expFor2 ::= NUMID comparador NUMID
;

expFor3 ::= ID:e OPERCREMENTO:o
            {:expFor3=e.toString();
              expForOper=o.toString();:}
            | ID:e OPERDECREMENTO:o
            {:expFor3=e.toString();
              expForOper=o.toString();:}
;
NUMID::= ID:e {:expFor2=e.toString();:}| NUMERO:e {:expFor2=e.toString();:}
;
  /*********************/
 /* Asignar Variable  *///---------------------------------->
/*********************/
asignarVariable ::= VAR ID:e ASIGNACION NUMIDSTR PUNTOCOMA
                    {:
                        if(v5.equals("true")){
                            finFun=finFun+"VAR "+e.toString()+" ="+v3+";\n";
                        }else{
                            finJs=finJs+"VAR "+e.toString()+" ="+v3+";\n";
                        }

                    :}
                    | ID:e ASIGNACION NUMIDSTR PUNTOCOMA
                    {:
                        if(v5.equals("true")){
                              finFun=finFun+e.toString()+" ="+v3+";\n";
                          }else{
                              finJs=finJs+e.toString()+" ="+v3+";\n";
                          }
                    :}
;
NUMIDSTR ::= NUMERO:e {:v3=e.toString();:} | ID:e {:v3=e.toString();:} | STRING:e {:v3=e.toString();:}
;

compuerta ::= AND | ANDSIMPLE | OR | ORSIMPLE | XOR
;

comparador ::= MAYORQUE:e{:expForAsig=e.toString();:}
              | MAYORIGUAL:e{:expForAsig=e.toString();:}
              | MENORQUE:e{:expForAsig=e.toString();:}
              |¬†MENORIGUAL:e{:expForAsig=e.toString();:}
              | IGUAL:e{:expForAsig=e.toString();:}
              | IGUAL2:e{:expForAsig=e.toString();:}
              | DIFERENTE:e{:expForAsig=e.toString();:}

;

funcion ::=   FUNCTION ID:e PARENTESIS_A parametros3 PARENTESIS_C LLAVE_A cuerpo LLAVE_C
                {:
                    System.out.println("Entro func");
                        finFun="function "+e.toString()+"("+v4.toString()+") {"+finFun+"}\n";
                        finJs=finJs+"function "+e.toString()+"("+v4.toString()+") {"+finFun+"}\n";
                   finFun="";v5="";
                :}
            | FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C
            | FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C
            | FUNCTION ID PARENTESIS_A parametros3 PARENTESIS_C LLAVE_A LLAVE_C
;

parametros ::=    ID:e
                    {:v3=e.toString();v4=e.toString();:}
                | ID:e parametros2
                    {:v3=e.toString()+",";v4=e.toString()+",";:}
;
parametros3 ::=    ID:e
                    {:v4=e.toString(); v5="true";:}
                | ID:e parametros2
                    {:v4=e.toString()+",";v5="true";:}
;
parametros2 ::= COMA ID:e
                {:v3=v3+e.toString();:}
                | COMA ID:e parametros
                    {:v3=v3+e.toString()+",";:}
;
