/* The following code was generated by JFlex 1.4.3 on 21/11/17 10:13 AM */

package mx.edu.ittepic.automatas;

import static mx.edu.ittepic.automatas.Token.*;
import mx.edu.ittepic.automatas.Token;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/11/17 10:13 AM from the specification file
 * <tt>C:/Users/Mannlex21/Documents/Tec/Automatas 2/AnalizadorLex/src/mx/edu/ittepic/automatas/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\1\0\1\0\1\4\22\0\1\4\1\6\1\3"+
    "\3\0\1\26\1\0\1\13\1\15\1\10\1\31\1\24\1\7\1\14"+
    "\1\32\12\2\1\25\1\23\1\5\1\30\1\11\2\0\1\42\1\57"+
    "\1\33\1\52\1\53\1\46\1\56\1\35\1\44\1\54\1\60\1\40"+
    "\1\37\1\45\1\50\1\55\1\73\1\43\1\34\1\36\1\47\1\41"+
    "\1\62\1\61\1\51\1\1\1\20\1\111\1\21\1\27\1\22\1\0"+
    "\1\67\1\105\1\75\1\76\1\66\1\63\1\71\1\103\1\64\1\1"+
    "\1\107\1\65\1\70\1\101\1\74\2\1\1\100\1\110\1\72\1\106"+
    "\1\102\1\1\1\104\1\77\1\1\1\16\1\12\1\17\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\33\2\1\3\1\33\1\0"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\41\1\0"+
    "\1\42\1\43\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\7\2\1\51\1\52\1\2\1\53\11\2\1\54\1\55"+
    "\7\2\1\56\5\2\1\57\13\2\1\33\3\0\1\60"+
    "\1\61\11\2\1\62\2\2\1\63\1\64\12\2\1\65"+
    "\16\2\1\66\1\67\1\2\1\70\2\2\4\0\1\3"+
    "\5\2\1\71\1\72\1\2\1\73\1\74\1\75\10\2"+
    "\1\76\3\2\1\77\1\2\1\100\2\2\1\101\23\2"+
    "\2\0\1\102\1\0\1\33\1\103\2\2\1\104\1\2"+
    "\1\105\1\106\1\2\1\107\5\2\1\110\6\2\1\111"+
    "\1\112\16\2\1\113\3\2\2\0\1\114\1\115\1\2"+
    "\1\116\1\117\1\2\1\120\1\121\1\122\1\123\4\2"+
    "\1\124\2\2\1\125\6\2\1\126\10\2\1\0\1\127"+
    "\1\2\1\130\2\2\1\131\5\2\1\132\3\2\1\133"+
    "\1\134\1\135\1\136\3\2\1\137\1\127\1\2\1\140"+
    "\2\2\1\141\1\142\4\2\1\143\3\2\1\144\1\145"+
    "\1\2\1\146\1\147\1\2\1\150\3\2\1\151\1\152"+
    "\6\2\1\153\2\2\1\154\1\155\1\156\2\2\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\112\0\u0172\0\u01bc"+
    "\0\u0206\0\u0250\0\u029a\0\u02e4\0\u032e\0\112\0\112\0\112"+
    "\0\112\0\112\0\112\0\224\0\112\0\112\0\112\0\u0378"+
    "\0\112\0\u03c2\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e"+
    "\0\u05c8\0\u0612\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce"+
    "\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e"+
    "\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24\0\u0c6e"+
    "\0\u0c6e\0\u0128\0\112\0\u0cb8\0\112\0\112\0\112\0\112"+
    "\0\112\0\u0d02\0\112\0\112\0\u0d4c\0\112\0\u0d96\0\112"+
    "\0\112\0\112\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52"+
    "\0\u0f9c\0\224\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\224\0\224"+
    "\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a\0\224"+
    "\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\224\0\u16d6\0\u1720"+
    "\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970"+
    "\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\112\0\224\0\u1b2c"+
    "\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c"+
    "\0\224\0\u1dc6\0\u1e10\0\224\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38"+
    "\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188"+
    "\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8"+
    "\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\224\0\224"+
    "\0\u25de\0\224\0\u2628\0\u2672\0\u1a04\0\u26bc\0\u2706\0\u2750"+
    "\0\112\0\u279a\0\u27e4\0\u282e\0\u2878\0\u28c2\0\224\0\224"+
    "\0\u290c\0\224\0\224\0\224\0\u2956\0\u29a0\0\u29ea\0\u2a34"+
    "\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c\0\224\0\u2ba6\0\u2bf0\0\u2c3a"+
    "\0\224\0\u2c84\0\224\0\u2cce\0\u2d18\0\224\0\u2d62\0\u2dac"+
    "\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc"+
    "\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\u3202\0\u324c"+
    "\0\u3296\0\u32e0\0\u332a\0\112\0\u3374\0\112\0\224\0\u33be"+
    "\0\u3408\0\u3452\0\u349c\0\224\0\224\0\u34e6\0\224\0\u3530"+
    "\0\u357a\0\u35c4\0\u360e\0\u3658\0\224\0\u36a2\0\u36ec\0\u3736"+
    "\0\u3780\0\u37ca\0\u3814\0\224\0\224\0\u385e\0\u38a8\0\u38f2"+
    "\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42"+
    "\0\u3b8c\0\u3bd6\0\u3c20\0\224\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48"+
    "\0\u3d92\0\224\0\224\0\u3ddc\0\224\0\224\0\u3e26\0\224"+
    "\0\224\0\224\0\224\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\224"+
    "\0\u3f98\0\u3fe2\0\224\0\u402c\0\u4076\0\u40c0\0\u410a\0\u4154"+
    "\0\u419e\0\224\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310\0\u435a"+
    "\0\u43a4\0\u43ee\0\u4438\0\u32e0\0\u4482\0\224\0\u44cc\0\u4516"+
    "\0\224\0\u4560\0\u45aa\0\u45f4\0\u463e\0\u4688\0\224\0\u46d2"+
    "\0\u471c\0\u4766\0\224\0\224\0\224\0\224\0\u47b0\0\u47fa"+
    "\0\u4844\0\224\0\112\0\u488e\0\224\0\u48d8\0\u4922\0\224"+
    "\0\224\0\u496c\0\u49b6\0\u4a00\0\u4a4a\0\224\0\u4a94\0\u4ade"+
    "\0\u4b28\0\224\0\224\0\u4b72\0\224\0\224\0\u4bbc\0\224"+
    "\0\u4c06\0\u4c50\0\u4c9a\0\224\0\224\0\u4ce4\0\u4d2e\0\u4d78"+
    "\0\u4dc2\0\u4e0c\0\u4e56\0\224\0\u4ea0\0\u4eea\0\224\0\u4f34"+
    "\0\224\0\u4f7e\0\u4fc8\0\224";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\3\1\42\1\43\1\44\1\45\1\46\1\47\3\3"+
    "\1\50\1\51\1\52\1\53\1\3\1\54\2\3\1\55"+
    "\1\56\1\57\3\3\1\60\1\61\2\3\1\62\1\63"+
    "\1\64\4\3\1\65\1\3\1\66\2\3\1\67\1\2"+
    "\113\0\2\3\17\0\1\3\10\0\56\3\3\0\1\70"+
    "\11\0\1\71\75\0\3\72\1\73\105\72\7\0\1\74"+
    "\21\0\1\75\111\0\1\76\70\0\1\77\20\0\1\100"+
    "\111\0\1\101\70\0\1\102\20\0\1\103\73\0\1\104"+
    "\106\0\1\105\130\0\1\106\113\0\1\107\111\0\1\110"+
    "\1\111\110\0\1\112\62\0\2\3\17\0\1\3\10\0"+
    "\1\3\1\113\5\3\1\114\1\115\4\3\1\116\32\3"+
    "\1\117\5\3\2\0\2\3\17\0\1\3\10\0\1\120"+
    "\55\3\2\0\2\3\17\0\1\3\10\0\3\3\1\121"+
    "\17\3\1\122\32\3\2\0\2\3\17\0\1\3\10\0"+
    "\2\3\1\123\4\3\1\124\1\125\45\3\2\0\2\3"+
    "\17\0\1\3\10\0\7\3\1\126\46\3\2\0\2\3"+
    "\17\0\1\3\10\0\7\3\1\127\24\3\1\130\21\3"+
    "\2\0\2\3\17\0\1\3\10\0\1\131\7\3\1\132"+
    "\35\3\1\133\7\3\2\0\2\3\17\0\1\3\10\0"+
    "\1\134\17\3\1\135\12\3\1\136\22\3\2\0\2\3"+
    "\17\0\1\3\10\0\12\3\1\137\1\140\42\3\2\0"+
    "\2\3\17\0\1\3\10\0\14\3\1\141\41\3\2\0"+
    "\2\3\17\0\1\3\10\0\7\3\1\142\4\3\1\143"+
    "\1\144\40\3\2\0\2\3\17\0\1\3\10\0\7\3"+
    "\1\145\10\3\1\146\35\3\2\0\2\3\17\0\1\3"+
    "\10\0\5\3\1\147\50\3\2\0\2\3\17\0\1\3"+
    "\10\0\1\3\1\150\36\3\1\151\15\3\2\0\2\3"+
    "\17\0\1\3\10\0\7\3\1\152\35\3\1\153\10\3"+
    "\2\0\2\3\17\0\1\3\10\0\10\3\1\154\45\3"+
    "\2\0\2\3\17\0\1\3\10\0\2\3\1\155\14\3"+
    "\1\156\36\3\2\0\2\3\17\0\1\3\10\0\31\3"+
    "\1\157\24\3\2\0\2\3\17\0\1\3\10\0\46\3"+
    "\1\160\7\3\2\0\2\3\17\0\1\3\10\0\34\3"+
    "\1\161\21\3\2\0\2\3\17\0\1\3\10\0\33\3"+
    "\1\162\22\3\2\0\2\3\17\0\1\3\10\0\53\3"+
    "\1\163\2\3\2\0\2\3\17\0\1\3\10\0\55\3"+
    "\1\164\2\0\2\3\17\0\1\3\10\0\31\3\1\165"+
    "\7\3\1\166\14\3\2\0\2\3\17\0\1\3\10\0"+
    "\47\3\1\167\6\3\2\0\2\3\17\0\1\3\10\0"+
    "\33\3\1\170\22\3\2\0\2\3\17\0\1\3\10\0"+
    "\33\3\1\171\22\3\3\0\1\70\11\0\1\172\104\0"+
    "\1\173\102\0\10\174\1\0\101\174\2\0\1\175\137\0"+
    "\1\176\62\0\2\3\17\0\1\3\10\0\1\3\1\177"+
    "\54\3\2\0\2\3\17\0\1\3\10\0\3\3\1\200"+
    "\52\3\2\0\2\3\17\0\1\3\10\0\20\3\1\201"+
    "\35\3\2\0\2\3\17\0\1\3\10\0\12\3\1\202"+
    "\43\3\2\0\2\3\17\0\1\3\10\0\31\3\1\203"+
    "\24\3\2\0\2\3\17\0\1\3\10\0\10\3\1\204"+
    "\45\3\2\0\2\3\17\0\1\3\10\0\4\3\1\205"+
    "\51\3\2\0\2\3\17\0\1\3\10\0\11\3\1\206"+
    "\44\3\2\0\2\3\17\0\1\3\10\0\24\3\1\207"+
    "\31\3\2\0\2\3\17\0\1\3\10\0\14\3\1\210"+
    "\1\3\1\211\37\3\2\0\2\3\17\0\1\3\10\0"+
    "\11\3\1\212\10\3\1\213\33\3\2\0\2\3\17\0"+
    "\1\3\10\0\10\3\1\214\45\3\2\0\2\3\17\0"+
    "\1\3\10\0\32\3\1\215\23\3\2\0\2\3\17\0"+
    "\1\3\10\0\32\3\1\216\23\3\2\0\2\3\17\0"+
    "\1\3\10\0\10\3\1\217\45\3\2\0\2\3\17\0"+
    "\1\3\10\0\31\3\1\220\24\3\2\0\2\3\17\0"+
    "\1\3\10\0\32\3\1\221\15\3\1\222\5\3\2\0"+
    "\2\3\17\0\1\3\10\0\3\3\1\223\52\3\2\0"+
    "\2\3\17\0\1\3\10\0\35\3\1\224\20\3\2\0"+
    "\2\3\17\0\1\3\10\0\5\3\1\225\50\3\2\0"+
    "\2\3\17\0\1\3\10\0\5\3\1\226\50\3\2\0"+
    "\2\3\17\0\1\3\10\0\12\3\1\227\43\3\2\0"+
    "\2\3\17\0\1\3\10\0\10\3\1\230\45\3\2\0"+
    "\2\3\17\0\1\3\10\0\3\3\1\231\52\3\2\0"+
    "\2\3\17\0\1\3\10\0\1\232\55\3\2\0\2\3"+
    "\17\0\1\3\10\0\1\3\1\233\54\3\2\0\2\3"+
    "\17\0\1\3\10\0\17\3\1\234\1\235\35\3\2\0"+
    "\2\3\17\0\1\3\10\0\23\3\1\236\32\3\2\0"+
    "\2\3\17\0\1\3\10\0\31\3\1\237\24\3\2\0"+
    "\2\3\17\0\1\3\10\0\20\3\1\240\35\3\2\0"+
    "\2\3\17\0\1\3\10\0\11\3\1\241\44\3\2\0"+
    "\2\3\17\0\1\3\10\0\32\3\1\242\23\3\2\0"+
    "\2\3\17\0\1\3\10\0\2\3\1\243\53\3\2\0"+
    "\2\3\17\0\1\3\10\0\54\3\1\244\1\3\2\0"+
    "\2\3\17\0\1\3\10\0\37\3\1\245\16\3\2\0"+
    "\2\3\17\0\1\3\10\0\37\3\1\246\16\3\2\0"+
    "\2\3\17\0\1\3\10\0\55\3\1\247\2\0\2\3"+
    "\17\0\1\3\10\0\47\3\1\250\6\3\2\0\2\3"+
    "\17\0\1\3\10\0\42\3\1\251\13\3\2\0\2\3"+
    "\17\0\1\3\10\0\45\3\1\252\10\3\2\0\2\3"+
    "\17\0\1\3\10\0\30\3\1\253\25\3\2\0\2\3"+
    "\17\0\1\3\10\0\37\3\1\254\16\3\3\0\1\255"+
    "\11\0\1\172\104\0\1\256\102\0\6\174\1\257\103\174"+
    "\2\0\1\175\11\0\1\260\1\261\75\0\2\3\17\0"+
    "\1\3\10\0\1\262\55\3\2\0\2\3\17\0\1\3"+
    "\10\0\7\3\1\263\46\3\2\0\2\3\17\0\1\3"+
    "\10\0\1\3\1\264\54\3\2\0\2\3\17\0\1\3"+
    "\10\0\32\3\1\265\23\3\2\0\2\3\17\0\1\3"+
    "\10\0\11\3\1\266\44\3\2\0\2\3\17\0\1\3"+
    "\10\0\5\3\1\267\50\3\2\0\2\3\17\0\1\3"+
    "\10\0\1\3\1\270\54\3\2\0\2\3\17\0\1\3"+
    "\10\0\5\3\1\271\50\3\2\0\2\3\17\0\1\3"+
    "\10\0\20\3\1\272\35\3\2\0\2\3\17\0\1\3"+
    "\10\0\12\3\1\273\43\3\2\0\2\3\17\0\1\3"+
    "\10\0\26\3\1\274\27\3\2\0\2\3\17\0\1\3"+
    "\10\0\53\3\1\275\2\3\2\0\2\3\17\0\1\3"+
    "\10\0\34\3\1\276\21\3\2\0\2\3\17\0\1\3"+
    "\10\0\7\3\1\277\46\3\2\0\2\3\17\0\1\3"+
    "\10\0\35\3\1\300\20\3\2\0\2\3\17\0\1\3"+
    "\10\0\34\3\1\301\21\3\2\0\2\3\17\0\1\3"+
    "\10\0\31\3\1\302\24\3\2\0\2\3\17\0\1\3"+
    "\10\0\14\3\1\303\41\3\2\0\2\3\17\0\1\3"+
    "\10\0\41\3\1\304\14\3\2\0\2\3\17\0\1\3"+
    "\10\0\5\3\1\305\50\3\2\0\2\3\17\0\1\3"+
    "\10\0\1\3\1\306\54\3\2\0\2\3\17\0\1\3"+
    "\10\0\1\307\55\3\2\0\2\3\17\0\1\3\10\0"+
    "\4\3\1\310\51\3\2\0\2\3\17\0\1\3\10\0"+
    "\20\3\1\311\35\3\2\0\2\3\17\0\1\3\10\0"+
    "\5\3\1\312\50\3\2\0\2\3\17\0\1\3\10\0"+
    "\20\3\1\313\35\3\2\0\2\3\17\0\1\3\10\0"+
    "\41\3\1\314\14\3\2\0\2\3\17\0\1\3\10\0"+
    "\32\3\1\315\23\3\2\0\2\3\17\0\1\3\10\0"+
    "\20\3\1\316\35\3\2\0\2\3\17\0\1\3\10\0"+
    "\46\3\1\317\7\3\2\0\2\3\17\0\1\3\10\0"+
    "\7\3\1\320\46\3\2\0\2\3\17\0\1\3\10\0"+
    "\5\3\1\321\50\3\2\0\2\3\17\0\1\3\10\0"+
    "\33\3\1\322\22\3\2\0\2\3\17\0\1\3\10\0"+
    "\3\3\1\323\52\3\2\0\2\3\17\0\1\3\10\0"+
    "\33\3\1\324\22\3\2\0\2\3\17\0\1\3\10\0"+
    "\1\3\1\325\1\326\1\3\1\327\2\3\1\330\6\3"+
    "\1\331\1\332\4\3\1\333\31\3\2\0\2\3\17\0"+
    "\1\3\10\0\2\3\1\334\53\3\2\0\2\3\17\0"+
    "\1\3\10\0\1\335\14\3\1\336\5\3\1\337\32\3"+
    "\2\0\2\3\17\0\1\3\10\0\41\3\1\340\14\3"+
    "\2\0\2\3\17\0\1\3\10\0\2\3\1\341\53\3"+
    "\1\0\7\342\1\343\1\0\101\342\5\174\1\344\1\257"+
    "\103\174\2\0\1\345\11\0\1\260\1\346\75\0\2\3"+
    "\17\0\1\3\10\0\2\3\1\347\53\3\2\0\2\3"+
    "\17\0\1\3\10\0\3\3\1\350\52\3\2\0\2\3"+
    "\17\0\1\3\10\0\15\3\1\351\40\3\2\0\2\3"+
    "\17\0\1\3\10\0\43\3\1\352\12\3\2\0\2\3"+
    "\17\0\1\3\10\0\22\3\1\353\33\3\2\0\2\3"+
    "\17\0\1\3\10\0\20\3\1\354\35\3\2\0\2\3"+
    "\17\0\1\3\10\0\33\3\1\355\22\3\2\0\2\3"+
    "\17\0\1\3\10\0\55\3\1\356\2\0\2\3\17\0"+
    "\1\3\10\0\16\3\1\357\37\3\2\0\2\3\17\0"+
    "\1\3\10\0\34\3\1\360\21\3\2\0\2\3\17\0"+
    "\1\3\10\0\55\3\1\361\2\0\2\3\17\0\1\3"+
    "\10\0\32\3\1\362\23\3\2\0\2\3\17\0\1\3"+
    "\10\0\10\3\1\363\45\3\2\0\2\3\17\0\1\3"+
    "\10\0\47\3\1\364\6\3\2\0\2\3\17\0\1\3"+
    "\10\0\20\3\1\365\35\3\2\0\2\3\17\0\1\3"+
    "\10\0\3\3\1\366\52\3\2\0\2\3\17\0\1\3"+
    "\10\0\7\3\1\367\46\3\2\0\2\3\17\0\1\3"+
    "\10\0\7\3\1\370\46\3\2\0\2\3\17\0\1\3"+
    "\10\0\42\3\1\371\13\3\2\0\2\3\17\0\1\3"+
    "\10\0\33\3\1\372\22\3\2\0\2\3\17\0\1\3"+
    "\10\0\37\3\1\373\16\3\2\0\2\3\17\0\1\3"+
    "\10\0\25\3\1\374\30\3\2\0\2\3\17\0\1\3"+
    "\10\0\20\3\1\375\35\3\2\0\2\3\17\0\1\3"+
    "\10\0\12\3\1\376\43\3\2\0\2\3\17\0\1\3"+
    "\10\0\4\3\1\377\51\3\2\0\2\3\17\0\1\3"+
    "\10\0\3\3\1\u0100\52\3\2\0\2\3\17\0\1\3"+
    "\10\0\33\3\1\u0101\22\3\2\0\2\3\17\0\1\3"+
    "\10\0\41\3\1\u0102\14\3\2\0\2\3\17\0\1\3"+
    "\10\0\1\3\1\u0103\27\3\1\u0104\7\3\1\u0105\14\3"+
    "\2\0\2\3\17\0\1\3\10\0\37\3\1\u0106\16\3"+
    "\2\0\2\3\17\0\1\3\10\0\33\3\1\u0107\22\3"+
    "\2\0\2\3\17\0\1\3\10\0\34\3\1\u0108\21\3"+
    "\2\0\2\3\17\0\1\3\10\0\41\3\1\u0109\14\3"+
    "\2\0\2\3\17\0\1\3\10\0\3\3\1\u010a\52\3"+
    "\2\0\2\3\17\0\1\3\10\0\45\3\1\u010b\10\3"+
    "\2\0\2\3\17\0\1\3\10\0\46\3\1\u010c\7\3"+
    "\2\0\2\3\17\0\1\3\10\0\33\3\1\u010d\22\3"+
    "\2\0\2\3\17\0\1\3\10\0\45\3\1\u010e\10\3"+
    "\2\0\2\3\17\0\1\3\10\0\3\3\1\u010f\52\3"+
    "\1\0\7\342\1\u0110\111\342\1\u0111\102\342\2\0\1\345"+
    "\11\0\1\260\76\0\2\3\17\0\1\3\10\0\20\3"+
    "\1\u0112\35\3\2\0\2\3\17\0\1\3\10\0\5\3"+
    "\1\u0113\50\3\2\0\2\3\17\0\1\3\10\0\3\3"+
    "\1\u0114\52\3\2\0\2\3\17\0\1\3\10\0\3\3"+
    "\1\u0115\52\3\2\0\2\3\17\0\1\3\10\0\55\3"+
    "\1\u0116\2\0\2\3\17\0\1\3\10\0\37\3\1\u0117"+
    "\16\3\2\0\2\3\17\0\1\3\10\0\55\3\1\u0118"+
    "\2\0\2\3\17\0\1\3\10\0\43\3\1\u0119\12\3"+
    "\2\0\2\3\17\0\1\3\10\0\12\3\1\u011a\43\3"+
    "\2\0\2\3\17\0\1\3\10\0\33\3\1\u011b\22\3"+
    "\2\0\2\3\17\0\1\3\10\0\11\3\1\u011c\44\3"+
    "\2\0\2\3\17\0\1\3\10\0\3\3\1\u011d\52\3"+
    "\2\0\2\3\17\0\1\3\10\0\10\3\1\u011e\45\3"+
    "\2\0\2\3\17\0\1\3\10\0\10\3\1\u011f\45\3"+
    "\2\0\2\3\17\0\1\3\10\0\35\3\1\u0120\20\3"+
    "\2\0\2\3\17\0\1\3\10\0\1\u0121\55\3\2\0"+
    "\2\3\17\0\1\3\10\0\34\3\1\u0122\21\3\2\0"+
    "\2\3\17\0\1\3\10\0\5\3\1\u0123\50\3\2\0"+
    "\2\3\17\0\1\3\10\0\34\3\1\u0124\21\3\2\0"+
    "\2\3\17\0\1\3\10\0\42\3\1\u0125\13\3\2\0"+
    "\2\3\17\0\1\3\10\0\53\3\1\u0126\2\3\2\0"+
    "\2\3\17\0\1\3\10\0\33\3\1\u0127\22\3\2\0"+
    "\2\3\17\0\1\3\10\0\46\3\1\u0128\7\3\2\0"+
    "\2\3\17\0\1\3\10\0\46\3\1\u0129\7\3\2\0"+
    "\2\3\17\0\1\3\10\0\37\3\1\u012a\16\3\2\0"+
    "\2\3\17\0\1\3\10\0\34\3\1\u012b\21\3\2\0"+
    "\2\3\17\0\1\3\10\0\37\3\1\u012c\16\3\2\0"+
    "\2\3\17\0\1\3\10\0\43\3\1\u012d\12\3\2\0"+
    "\2\3\17\0\1\3\10\0\4\3\1\u012e\51\3\2\0"+
    "\2\3\17\0\1\3\10\0\33\3\1\u012f\22\3\2\0"+
    "\2\3\17\0\1\3\10\0\37\3\1\u0130\16\3\2\0"+
    "\2\3\17\0\1\3\10\0\33\3\1\u0131\22\3\2\0"+
    "\2\3\17\0\1\3\10\0\4\3\1\u0132\51\3\1\0"+
    "\7\342\1\u0133\111\342\1\u0133\1\342\1\u0134\100\342\1\0"+
    "\2\3\17\0\1\3\10\0\33\3\1\u0135\22\3\2\0"+
    "\2\3\17\0\1\3\10\0\33\3\1\u0136\22\3\2\0"+
    "\2\3\17\0\1\3\10\0\15\3\1\u0137\40\3\2\0"+
    "\2\3\17\0\1\3\10\0\3\3\1\u0138\52\3\2\0"+
    "\2\3\17\0\1\3\10\0\20\3\1\u0139\35\3\2\0"+
    "\2\3\17\0\1\3\10\0\33\3\1\u013a\22\3\2\0"+
    "\2\3\17\0\1\3\10\0\41\3\1\u013b\14\3\2\0"+
    "\2\3\17\0\1\3\10\0\35\3\1\u013c\20\3\2\0"+
    "\2\3\17\0\1\3\10\0\52\3\1\u013d\3\3\2\0"+
    "\2\3\17\0\1\3\10\0\41\3\1\u013e\14\3\2\0"+
    "\2\3\17\0\1\3\10\0\45\3\1\u013f\10\3\2\0"+
    "\2\3\17\0\1\3\10\0\42\3\1\u0140\13\3\2\0"+
    "\2\3\17\0\1\3\10\0\53\3\1\u0141\2\3\2\0"+
    "\2\3\17\0\1\3\10\0\37\3\1\u0142\16\3\2\0"+
    "\2\3\17\0\1\3\10\0\45\3\1\u0143\10\3\2\0"+
    "\2\3\17\0\1\3\10\0\33\3\1\u0144\22\3\2\0"+
    "\2\3\17\0\1\3\10\0\44\3\1\u0145\11\3\2\0"+
    "\2\3\17\0\1\3\10\0\5\3\1\u0146\50\3\2\0"+
    "\2\3\17\0\1\3\10\0\34\3\1\u0147\21\3\2\0"+
    "\2\3\17\0\1\3\10\0\20\3\1\u0148\35\3\2\0"+
    "\2\3\17\0\1\3\10\0\1\u0149\55\3\2\0\2\3"+
    "\17\0\1\3\10\0\5\3\1\u014a\50\3\1\0\7\342"+
    "\1\u0133\1\342\1\u014b\100\342\1\0\2\3\17\0\1\3"+
    "\10\0\51\3\1\u014c\4\3\2\0\2\3\17\0\1\3"+
    "\10\0\12\3\1\u014d\43\3\2\0\2\3\17\0\1\3"+
    "\10\0\20\3\1\u014e\35\3\2\0\2\3\17\0\1\3"+
    "\10\0\34\3\1\u014f\21\3\2\0\2\3\17\0\1\3"+
    "\10\0\46\3\1\u0150\7\3\2\0\2\3\17\0\1\3"+
    "\10\0\33\3\1\u0151\22\3\2\0\2\3\17\0\1\3"+
    "\10\0\32\3\1\u0152\23\3\2\0\2\3\17\0\1\3"+
    "\10\0\46\3\1\u0153\7\3\2\0\2\3\17\0\1\3"+
    "\10\0\41\3\1\u0154\14\3\2\0\2\3\17\0\1\3"+
    "\10\0\37\3\1\u0155\16\3\2\0\2\3\17\0\1\3"+
    "\10\0\50\3\1\u0156\5\3\2\0\2\3\17\0\1\3"+
    "\10\0\37\3\1\u0157\16\3\2\0\2\3\17\0\1\3"+
    "\10\0\32\3\1\u0158\23\3\2\0\2\3\17\0\1\3"+
    "\10\0\50\3\1\u0159\5\3\2\0\2\3\17\0\1\3"+
    "\10\0\37\3\1\u015a\16\3\2\0\2\3\17\0\1\3"+
    "\10\0\10\3\1\u015b\45\3\2\0\2\3\17\0\1\3"+
    "\10\0\43\3\1\u015c\12\3\2\0\2\3\17\0\1\3"+
    "\10\0\33\3\1\u015d\22\3\2\0\2\3\17\0\1\3"+
    "\10\0\43\3\1\u015e\12\3\2\0\2\3\17\0\1\3"+
    "\10\0\46\3\1\u015f\7\3\2\0\2\3\17\0\1\3"+
    "\10\0\33\3\1\u0160\22\3\2\0\2\3\17\0\1\3"+
    "\10\0\33\3\1\u0161\22\3\2\0\2\3\17\0\1\3"+
    "\10\0\33\3\1\u0162\22\3\2\0\2\3\17\0\1\3"+
    "\10\0\31\3\1\u0163\24\3\2\0\2\3\17\0\1\3"+
    "\10\0\44\3\1\u0164\11\3\2\0\2\3\17\0\1\3"+
    "\10\0\43\3\1\u0165\12\3\2\0\2\3\17\0\1\3"+
    "\10\0\20\3\1\u0166\35\3\2\0\2\3\17\0\1\3"+
    "\10\0\35\3\1\u0167\20\3\2\0\2\3\17\0\1\3"+
    "\10\0\32\3\1\u0168\23\3\2\0\2\3\17\0\1\3"+
    "\10\0\32\3\1\u0169\23\3\2\0\2\3\17\0\1\3"+
    "\10\0\3\3\1\u016a\5\3\1\u016b\44\3\2\0\2\3"+
    "\17\0\1\3\10\0\43\3\1\u016c\12\3\2\0\2\3"+
    "\17\0\1\3\10\0\33\3\1\u016d\22\3\2\0\2\3"+
    "\17\0\1\3\10\0\34\3\1\u016e\21\3\2\0\2\3"+
    "\17\0\1\3\10\0\17\3\1\u016f\36\3\2\0\2\3"+
    "\17\0\1\3\10\0\35\3\1\u0170\20\3\2\0\2\3"+
    "\17\0\1\3\10\0\36\3\1\u0171\17\3\2\0\2\3"+
    "\17\0\1\3\10\0\3\3\1\u0172\52\3\2\0\2\3"+
    "\17\0\1\3\10\0\34\3\1\u0173\21\3\2\0\2\3"+
    "\17\0\1\3\10\0\36\3\1\u0174\17\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20498];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\7\1\6\11\1\1\3\11"+
    "\1\1\1\11\40\1\1\0\1\11\1\0\5\11\1\0"+
    "\2\11\1\0\1\11\1\1\3\11\60\1\3\0\1\11"+
    "\56\1\4\0\1\11\60\1\2\0\1\11\1\0\1\11"+
    "\51\1\2\0\41\1\1\0\27\1\1\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme,componenteL;
    public int linea, columna;
    public Symbol token(int simbolo){
            Lexema lexema = new Lexema( yytext() );
            return new Symbol(simbolo,yyline+1,yycolumn,lexema);
    }
    public Symbol token(int simbolo,String componenteLexico){
            Lexema lexema = new Lexema( yytext() );
            return new Symbol(simbolo,yyline+1,yycolumn,lexema);
    }
    public Symbol token(int simbolo,int linea, int columna,String lexeme,String componenteLexico){
            Lexema lexema = new Lexema( yytext() );
            componenteL=componenteLexico;
            //Principal.setError("La cadena "+yytext()+" es invalida, se encontro en la linea "+(yyline+1)+", y en la columna "+(yycolumn+1));
            return new Symbol(simbolo,yyline,yycolumn,lexema);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 90: 
          { return token(sym.getHour, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getHour");
          }
        case 112: break;
        case 31: 
          { return token(sym.OPERDECREMENTO, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"OPERDECREMENTO");
          }
        case 113: break;
        case 78: 
          { return token(sym.SCRIPT, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"SCRIPT");
          }
        case 114: break;
        case 71: 
          { return token(sym.ARRAY, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ARRAY");
          }
        case 115: break;
        case 49: 
          { return token(sym.CSS, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"CSS");
          }
        case 116: break;
        case 29: 
          { return token(sym.MENORIGUAL, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"MENORIGUAL");
          }
        case 117: break;
        case 75: 
          { return token(sym.docOn, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"docOn");
          }
        case 118: break;
        case 102: 
          { return token(sym.makeTable, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"makeTable");
          }
        case 119: break;
        case 14: 
          { return token(sym.LLAVE_A, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"LLAVE_ABRIR");
          }
        case 120: break;
        case 101: 
          { return token(sym.FORMATTER, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"FORMATTER");
          }
        case 121: break;
        case 56: 
          { return token(sym.hvr, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"hvr");
          }
        case 122: break;
        case 33: 
          { return token(sym.ASIGNACIONMULT, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ASIGNACIONMULT");
          }
        case 123: break;
        case 30: 
          { return token(sym.DIFERENTE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"DIFERENTE");
          }
        case 124: break;
        case 27: 
          { System.out.println("Numero invalido"); return token(sym.INVNUMERO,linea=yyline+1,columna=yycolumn,lexeme=yytext(),"INVALID_NUMERO");
          }
        case 125: break;
        case 63: 
          { return token(sym.DATE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"DATE");
          }
        case 126: break;
        case 108: 
          { return token(sym.docGetElemID, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"docGetElemID");
          }
        case 127: break;
        case 76: 
          { return token(sym.CREATE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"CREATE");
          }
        case 128: break;
        case 80: 
          { return token(sym.RClass, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"RClass");
          }
        case 129: break;
        case 45: 
          { return token(sym.IF, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"IF");
          }
        case 130: break;
        case 58: 
          { return token(sym.THIS, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"THIS");
          }
        case 131: break;
        case 35: 
          { return token(sym.OR, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"OR");
          }
        case 132: break;
        case 3: 
          { System.out.println("Numero"); return token(sym.NUMERO,linea=yyline+1,columna=yycolumn,lexeme=yytext(),"NUMERO");
          }
        case 133: break;
        case 92: 
          { return token(sym.docCreateElemTag, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getDate");
          }
        case 134: break;
        case 20: 
          { return token(sym.COMA, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"COMA");
          }
        case 135: break;
        case 5: 
          { /*Ignore*/
          }
        case 136: break;
        case 103: 
          { return token(sym.getSecond, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getSecond");
          }
        case 137: break;
        case 70: 
          { return token(sym.Value, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"Value");
          }
        case 138: break;
        case 79: 
          { return token(sym.AClass, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"AClass");
          }
        case 139: break;
        case 51: 
          { return token(sym.VAR, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"VAR");
          }
        case 140: break;
        case 81: 
          { return token(sym.RChild, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"RChild");
          }
        case 141: break;
        case 17: 
          { return token(sym.CORCHETE_C, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"CORCHETE_CERRAR");
          }
        case 142: break;
        case 22: 
          { return token(sym.ANDSIMPLE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"AND_SIMPLE");
          }
        case 143: break;
        case 72: 
          { return token(sym.FALSE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"FALSE");
          }
        case 144: break;
        case 50: 
          { return token(sym.TRY, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"TRY");
          }
        case 145: break;
        case 9: 
          { return token(sym.MULTIPLICACION, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"MULTIPLICACION");
          }
        case 146: break;
        case 32: 
          { return token(sym.ASIGNACIONDECRE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ASIGNACIONDECRE");
          }
        case 147: break;
        case 41: 
          { return token(sym.HG, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"HG");
          }
        case 148: break;
        case 10: 
          { return token(sym.MAYORQUE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"MAYORQUE");
          }
        case 149: break;
        case 21: 
          { return token(sym.DOSPUNTOS, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"DOSPUNTOS");
          }
        case 150: break;
        case 68: 
          { return token(sym.Child, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"Child");
          }
        case 151: break;
        case 91: 
          { return token(sym.getYear, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getYear");
          }
        case 152: break;
        case 106: 
          { return token(sym.getMSecond, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getMSecond");
          }
        case 153: break;
        case 52: 
          { return token(sym.Val, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"Val");
          }
        case 154: break;
        case 82: 
          { return token(sym.RETURN, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"RETURN");
          }
        case 155: break;
        case 86: 
          { return token(sym.getAtt, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getAtt");
          }
        case 156: break;
        case 28: 
          { return token(sym.STRING,linea=yyline+1,columna=yycolumn,lexeme=yytext(),"STRING");
          }
        case 157: break;
        case 54: 
          { return token(sym.css, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"css");
          }
        case 158: break;
        case 23: 
          { return token(sym.XOR, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"XOR");
          }
        case 159: break;
        case 111: 
          { return token(sym.docCreateElemTag, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"docCreateElemTag");
          }
        case 160: break;
        case 64: 
          { return token(sym.ELSE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ELSE");
          }
        case 161: break;
        case 26: 
          { return token(sym.DIVISION, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"DIVISION");
          }
        case 162: break;
        case 98: 
          { return token(sym.fileName, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"fileName");
          }
        case 163: break;
        case 59: 
          { return token(sym.TRUE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"TRUE");
          }
        case 164: break;
        case 96: 
          { return token(sym.FUNCTION, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"FUNCTION");
          }
        case 165: break;
        case 61: 
          { return token(sym.MAPX, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"MAPX");
          }
        case 166: break;
        case 13: 
          { return token(sym.PARENTESIS_C, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"PARENTESIS_CERRAR");
          }
        case 167: break;
        case 84: 
          { return token(sym.JQElem, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"JQElem");
          }
        case 168: break;
        case 16: 
          { return token(sym.CORCHETE_A, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"CORCHETE_ABRIR");
          }
        case 169: break;
        case 95: 
          { return token(sym.setHTML, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"setHTML");
          }
        case 170: break;
        case 8: 
          { return token(sym.RESTA, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"RESTA");
          }
        case 171: break;
        case 109: 
          { return token(sym.docCreateElem, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"docCreateElem");
          }
        case 172: break;
        case 77: 
          { return token(sym.CONSOL, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"CONSOL");
          }
        case 173: break;
        case 34: 
          { return token(sym.MAYORIGUAL, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"MAYORIGUAL");
          }
        case 174: break;
        case 104: 
          { return token(sym.getMinute, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getMinute");
          }
        case 175: break;
        case 105: 
          { return token(sym.JQDocReady, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"JQDocReady");
          }
        case 176: break;
        case 94: 
          { return token(sym.outHTML, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"outHTML");
          }
        case 177: break;
        case 36: 
          { return token(sym.AND, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"AND");
          }
        case 178: break;
        case 12: 
          { return token(sym.PUNTO, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"PUNTO");
          }
        case 179: break;
        case 25: 
          { return token(sym.SUMA, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"SUMA");
          }
        case 180: break;
        case 57: 
          { return token(sym.HTML, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"HTML");
          }
        case 181: break;
        case 97: 
          { return token(sym.PrintCon, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"PrintCon");
          }
        case 182: break;
        case 88: 
          { return token(sym.Animate, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"Animate");
          }
        case 183: break;
        case 66: 
          { return token(sym.COMENTARIO, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"COMMENT");
          }
        case 184: break;
        case 4: 
          { return token(sym.COMILLA_SIMPLE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"COMILLA_SIMPLE");
          }
        case 185: break;
        case 19: 
          { return token(sym.PUNTOCOMA, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"PUNTO_COMA");
          }
        case 186: break;
        case 65: 
          { return token(sym.PAGE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"PAGE");
          }
        case 187: break;
        case 69: 
          { return token(sym.TABLE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"TABLE");
          }
        case 188: break;
        case 89: 
          { return token(sym.DECLARE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"DECLARE");
          }
        case 189: break;
        case 83: 
          { return token(sym.Remove, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"Remove");
          }
        case 190: break;
        case 44: 
          { return token(sym.EN, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"EN");
          }
        case 191: break;
        case 62: 
          { return token(sym.NULL, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"NULL");
          }
        case 192: break;
        case 18: 
          { return token(sym.GUIONBAJO, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"GUION_BAJO");
          }
        case 193: break;
        case 38: 
          { return token(sym.ASIGNACIONINCRE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ASIGNACIONINCRE");
          }
        case 194: break;
        case 2: 
          { return token(sym.ID,linea=yyline+1,columna=yycolumn,lexeme=yytext(),"IDENTIFICADOR");
          }
        case 195: break;
        case 60: 
          { return token(sym.MAIN, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"MAIN");
          }
        case 196: break;
        case 85: 
          { return token(sym.inHTML, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"inHTML");
          }
        case 197: break;
        case 48: 
          { return token(sym.IGUAL2, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"IGUAL2");
          }
        case 198: break;
        case 107: 
          { return token(sym.beforeChild, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"beforeChild");
          }
        case 199: break;
        case 74: 
          { return token(sym.WHILE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"WHILE");
          }
        case 200: break;
        case 93: 
          { return token(sym.getBody, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getBody");
          }
        case 201: break;
        case 43: 
          { return token(sym.TR, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"TR");
          }
        case 202: break;
        case 15: 
          { return token(sym.LLAVE_C, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"LLAVE_CERRAR");
          }
        case 203: break;
        case 100: 
          { return token(sym.ChildText, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ChildText");
          }
        case 204: break;
        case 40: 
          { return token(sym.ASIGNACIONDIV, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ASIGNACIONDIV");
          }
        case 205: break;
        case 11: 
          { return token(sym.PARENTESIS_A, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"PARENTESIS_ABRIR");
          }
        case 206: break;
        case 99: 
          { return token(sym.getMonth, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"getMonth");
          }
        case 207: break;
        case 6: 
          { return token(sym.MENORQUE, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"MENORQUE");
          }
        case 208: break;
        case 42: 
          { return token(sym.TH, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"TH");
          }
        case 209: break;
        case 110: 
          { return token(sym.docGetElemTag, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"docGetElemTag");
          }
        case 210: break;
        case 46: 
          { return token(sym.JS, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"JS");
          }
        case 211: break;
        case 73: 
          { return token(sym.BREAK, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"BREAK");
          }
        case 212: break;
        case 39: 
          { return token(sym.OPERCREMENTO, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"OPERCREMENTO");
          }
        case 213: break;
        case 67: 
          { return token(sym.CATCH, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"CATCH");
          }
        case 214: break;
        case 24: 
          { return token(sym.ASIGNACION, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ASIGNACION");
          }
        case 215: break;
        case 37: 
          { return token(sym.IGUAL, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"IGUAL");
          }
        case 216: break;
        case 53: 
          { return token(sym.FOR, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"FOR");
          }
        case 217: break;
        case 47: 
          { return token(sym.WD, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"WD");
          }
        case 218: break;
        case 1: 
          { return token(sym.ERROR,linea=yyline+1,columna=yycolumn,lexeme=yytext(),"ERROR");
          }
        case 219: break;
        case 55: 
          { return token(sym.div, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"div");
          }
        case 220: break;
        case 7: 
          { return token(sym.NOT, linea=yyline+1,columna=yycolumn,lexeme=yytext(),"NOT");
          }
        case 221: break;
        case 87: 
          { 
          }
        case 222: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
