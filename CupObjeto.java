
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 03 20:03:22 GMT-06:00 2017
//----------------------------------------------------

package mx.edu.ittepic.automatas;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 03 20:03:22 GMT-06:00 2017
  */
public class CupObjeto extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CupObjeto() {super();}

  /** Constructor which sets the default scanner. */
  public CupObjeto(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupObjeto(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\055\007\000\002\032\003\000\002\032\004" +
    "\000\002\020\003\000\002\020\004\000\002\020\003\000" +
    "\002\020\004\000\002\021\006\000\002\021\005\000\002" +
    "\012\007\000\002\022\012\000\002\033\003\000\002\033" +
    "\003\000\002\023\005\000\002\023\007\000\002\027\006" +
    "\000\002\027\007\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\005\000\002\026\005\000\002" +
    "\054\003\000\002\054\004\000\002\054\003\000\002\054" +
    "\004\000\002\054\003\000\002\054\004\000\002\054\003" +
    "\000\002\054\004\000\002\054\003\000\002\054\004\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\053\003\000\002\053\004\000\002\053\003\000" +
    "\002\053\004\000\002\053\003\000\002\053\004\000\002" +
    "\053\003\000\002\053\004\000\002\053\003\000\002\053" +
    "\004\000\002\037\006\000\002\041\010\000\002\041\006" +
    "\000\002\040\010\000\002\040\006\000\002\051\003\000" +
    "\002\051\003\000\002\042\003\000\002\044\006\000\002" +
    "\044\010\000\002\044\012\000\002\044\005\000\002\045" +
    "\003\000\002\045\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\047\003\000\002\043\006\000\002\043\005\000\002\050" +
    "\012\000\002\034\005\000\002\034\022\000\002\035\003" +
    "\000\002\035\005\000\002\052\007\000\002\052\006\000" +
    "\002\003\007\000\002\003\010\000\002\014\011\000\002" +
    "\014\010\000\002\013\007\000\002\015\006\000\002\016" +
    "\005\000\002\017\004\000\002\017\004\000\002\024\003" +
    "\000\002\024\003\000\002\004\007\000\002\004\006\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\010\012\000\002" +
    "\010\010\000\002\010\011\000\002\010\011\000\002\011" +
    "\003\000\002\011\004\000\002\031\003\000\002\031\004" +
    "\000\002\030\004\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\013\004\001\002\000\004\104\017\001" +
    "\002\000\006\002\000\021\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\024\012\001" +
    "\002\000\004\002\uffff\001\002\000\004\104\013\001\002" +
    "\000\004\044\014\001\002\000\004\045\015\001\002\000" +
    "\006\002\uffaa\021\010\001\002\000\004\002\uffa9\001\002" +
    "\000\004\044\020\001\002\000\004\011\021\001\002\000" +
    "\004\044\203\001\002\000\010\010\025\022\031\045\ufffd" +
    "\001\002\000\004\045\024\001\002\000\006\002\ufffe\021" +
    "\ufffe\001\002\000\004\042\165\001\002\000\004\045\ufffc" +
    "\001\002\000\010\010\025\022\031\045\ufff9\001\002\000" +
    "\010\010\025\022\031\045\ufffb\001\002\000\004\104\032" +
    "\001\002\000\004\044\033\001\002\000\016\012\042\014" +
    "\047\104\045\117\041\120\037\127\040\001\002\000\020" +
    "\012\uffd8\014\uffd8\045\uffd8\104\uffd8\117\uffd8\120\uffd8\127" +
    "\uffd8\001\002\000\020\012\uffdc\014\uffdc\045\uffdc\104\uffdc" +
    "\117\uffdc\120\uffdc\127\uffdc\001\002\000\020\012\uffd6\014" +
    "\uffd6\045\uffd6\104\uffd6\117\uffd6\120\uffd6\127\uffd6\001\002" +
    "\000\004\042\uffc4\001\002\000\004\042\160\001\002\000" +
    "\004\042\uffc5\001\002\000\004\104\154\001\002\000\020" +
    "\012\uffda\014\uffda\045\uffda\104\uffda\117\uffda\120\uffda\127" +
    "\uffda\001\002\000\004\042\115\001\002\000\006\042\104" +
    "\075\103\001\002\000\020\012\uffde\014\uffde\045\uffde\104" +
    "\uffde\117\uffde\120\uffde\127\uffde\001\002\000\004\104\057" +
    "\001\002\000\020\012\042\014\047\045\054\104\045\117" +
    "\041\120\037\127\040\001\002\000\020\012\uffd7\014\uffd7" +
    "\045\uffd7\104\uffd7\117\uffd7\120\uffd7\127\uffd7\001\002\000" +
    "\020\012\uffdb\014\uffdb\045\uffdb\104\uffdb\117\uffdb\120\uffdb" +
    "\127\uffdb\001\002\000\020\012\uffd5\014\uffd5\045\uffd5\104" +
    "\uffd5\117\uffd5\120\uffd5\127\uffd5\001\002\000\010\010\ufff5" +
    "\022\ufff5\045\ufff5\001\002\000\020\012\uffd9\014\uffd9\045" +
    "\uffd9\104\uffd9\117\uffd9\120\uffd9\127\uffd9\001\002\000\020" +
    "\012\uffdd\014\uffdd\045\uffdd\104\uffdd\117\uffdd\120\uffdd\127" +
    "\uffdd\001\002\000\004\042\060\001\002\000\006\043\062" +
    "\104\061\001\002\000\006\043\uff88\110\075\001\002\000" +
    "\004\044\071\001\002\000\004\043\064\001\002\000\004" +
    "\044\065\001\002\000\020\012\042\014\047\045\066\104" +
    "\045\117\041\120\037\127\040\001\002\000\020\012\uff8b" +
    "\014\uff8b\045\uff8b\104\uff8b\117\uff8b\120\uff8b\127\uff8b\001" +
    "\002\000\020\012\042\014\047\045\070\104\045\117\041" +
    "\120\037\127\040\001\002\000\020\012\uff8e\014\uff8e\045" +
    "\uff8e\104\uff8e\117\uff8e\120\uff8e\127\uff8e\001\002\000\020" +
    "\012\042\014\047\045\072\104\045\117\041\120\037\127" +
    "\040\001\002\000\020\012\uff8d\014\uff8d\045\uff8d\104\uff8d" +
    "\117\uff8d\120\uff8d\127\uff8d\001\002\000\020\012\042\014" +
    "\047\045\074\104\045\117\041\120\037\127\040\001\002" +
    "\000\020\012\uff8c\014\uff8c\045\uff8c\104\uff8c\117\uff8c\120" +
    "\uff8c\127\uff8c\001\002\000\004\104\077\001\002\000\004" +
    "\043\uff87\001\002\000\006\043\uff86\104\100\001\002\000" +
    "\006\043\uff8a\110\075\001\002\000\004\043\uff85\001\002" +
    "\000\004\043\uff89\001\002\000\010\104\111\106\113\107" +
    "\110\001\002\000\006\043\106\104\100\001\002\000\004" +
    "\043\107\001\002\000\020\012\uffb2\014\uffb2\045\uffb2\104" +
    "\uffb2\117\uffb2\120\uffb2\127\uffb2\001\002\000\020\012\uffb3" +
    "\014\uffb3\045\uffb3\104\uffb3\117\uffb3\120\uffb3\127\uffb3\001" +
    "\002\000\006\043\uff9d\051\uff9d\001\002\000\006\043\uff9c" +
    "\051\uff9c\001\002\000\004\051\114\001\002\000\006\043" +
    "\uff9b\051\uff9b\001\002\000\020\012\uff9e\014\uff9e\045\uff9e" +
    "\104\uff9e\117\uff9e\120\uff9e\127\uff9e\001\002\000\004\106" +
    "\116\001\002\000\004\043\117\001\002\000\022\012\uffc6" +
    "\014\uffc6\045\uffc6\053\120\104\uffc6\117\uffc6\120\uffc6\127" +
    "\uffc6\001\002\000\030\115\125\125\127\130\135\131\132" +
    "\132\134\133\123\134\131\140\126\143\122\161\133\162" +
    "\124\001\002\000\004\042\145\001\002\000\004\042\uffb4" +
    "\001\002\000\004\042\uffb9\001\002\000\004\042\uffb7\001" +
    "\002\000\004\042\uffba\001\002\000\004\042\uffbe\001\002" +
    "\000\004\042\uffb6\001\002\000\020\012\uffc7\014\uffc7\045" +
    "\uffc7\104\uffc7\117\uffc7\120\uffc7\127\uffc7\001\002\000\004" +
    "\042\uffbd\001\002\000\004\042\uffbc\001\002\000\004\042" +
    "\uffb8\001\002\000\004\042\uffb5\001\002\000\004\042\uffbb" +
    "\001\002\000\004\042\143\001\002\000\004\042\140\001" +
    "\002\000\004\106\141\001\002\000\004\043\142\001\002" +
    "\000\032\012\uffc2\014\uffc2\016\uffc2\045\uffc2\104\uffc2\117" +
    "\uffc2\120\uffc2\123\uffc2\127\uffc2\165\uffc2\166\uffc2\170\uffc2" +
    "\001\002\000\004\043\144\001\002\000\032\012\uffbf\014" +
    "\uffbf\016\uffbf\045\uffbf\104\uffbf\117\uffbf\120\uffbf\123\uffbf" +
    "\127\uffbf\165\uffbf\166\uffbf\170\uffbf\001\002\000\004\106" +
    "\146\001\002\000\004\110\147\001\002\000\004\106\150" +
    "\001\002\000\004\043\151\001\002\000\034\012\uffc1\014" +
    "\uffc1\016\uffc1\045\uffc1\053\152\104\uffc1\117\uffc1\120\uffc1" +
    "\123\uffc1\127\uffc1\165\uffc1\166\uffc1\170\uffc1\001\002\000" +
    "\030\115\125\125\127\130\135\131\132\132\134\133\123" +
    "\134\131\140\126\143\122\161\133\162\124\001\002\000" +
    "\032\012\uffc0\014\uffc0\016\uffc0\045\uffc0\104\uffc0\117\uffc0" +
    "\120\uffc0\123\uffc0\127\uffc0\165\uffc0\166\uffc0\170\uffc0\001" +
    "\002\000\004\075\155\001\002\000\010\104\111\106\113" +
    "\107\110\001\002\000\004\051\157\001\002\000\020\012" +
    "\uff9f\014\uff9f\045\uff9f\104\uff9f\117\uff9f\120\uff9f\127\uff9f" +
    "\001\002\000\010\104\111\106\113\107\110\001\002\000" +
    "\004\043\162\001\002\000\020\012\uffca\014\uffca\045\uffca" +
    "\104\uffca\117\uffca\120\uffca\127\uffca\001\002\000\004\045" +
    "\ufffa\001\002\000\004\045\ufff8\001\002\000\006\104\166" +
    "\106\167\001\002\000\004\110\ufff2\001\002\000\004\110" +
    "\ufff3\001\002\000\004\110\171\001\002\000\004\046\172" +
    "\001\002\000\004\106\173\001\002\000\004\052\177\001" +
    "\002\000\004\047\175\001\002\000\004\043\176\001\002" +
    "\000\010\010\ufff4\022\ufff4\045\ufff4\001\002\000\004\106" +
    "\200\001\002\000\006\047\ufff1\110\201\001\002\000\004" +
    "\106\173\001\002\000\004\047\ufff0\001\002\000\016\016" +
    "\205\045\210\123\206\165\215\166\214\170\211\001\002" +
    "\000\016\016\uffe6\045\uffe6\123\uffe6\165\uffe6\166\uffe6\170" +
    "\uffe6\001\002\000\004\042\273\001\002\000\004\042\uffc3" +
    "\001\002\000\004\042\266\001\002\000\010\010\ufff6\022" +
    "\ufff6\045\ufff6\001\002\000\004\042\257\001\002\000\016" +
    "\016\uffe2\045\uffe2\123\uffe2\165\uffe2\166\uffe2\170\uffe2\001" +
    "\002\000\016\016\205\045\256\123\206\165\215\166\214" +
    "\170\211\001\002\000\004\104\244\001\002\000\004\042" +
    "\221\001\002\000\016\016\uffe8\045\uffe8\123\uffe8\165\uffe8" +
    "\166\uffe8\170\uffe8\001\002\000\016\016\uffe4\045\uffe4\123" +
    "\uffe4\165\uffe4\166\uffe4\170\uffe4\001\002\000\016\016\uffe0" +
    "\045\uffe0\123\uffe0\165\uffe0\166\uffe0\170\uffe0\001\002\000" +
    "\006\043\223\106\222\001\002\000\004\110\224\001\002" +
    "\000\016\016\uffb0\045\uffb0\123\uffb0\165\uffb0\166\uffb0\170" +
    "\uffb0\001\002\000\004\046\225\001\002\000\004\106\226" +
    "\001\002\000\006\047\uffae\110\242\001\002\000\004\047" +
    "\230\001\002\000\004\110\231\001\002\000\004\046\232" +
    "\001\002\000\004\106\226\001\002\000\004\047\234\001" +
    "\002\000\004\110\235\001\002\000\004\046\236\001\002" +
    "\000\004\106\226\001\002\000\004\047\240\001\002\000" +
    "\004\043\241\001\002\000\016\016\uffaf\045\uffaf\123\uffaf" +
    "\165\uffaf\166\uffaf\170\uffaf\001\002\000\004\106\226\001" +
    "\002\000\004\047\uffad\001\002\000\004\044\245\001\002" +
    "\000\016\016\205\045\246\123\206\165\215\166\214\170" +
    "\211\001\002\000\016\016\uffab\045\uffab\123\uffab\165\uffab" +
    "\166\uffab\170\uffab\001\002\000\016\016\205\045\251\123" +
    "\206\165\215\166\214\170\211\001\002\000\016\016\uffe5" +
    "\045\uffe5\123\uffe5\165\uffe5\166\uffe5\170\uffe5\001\002\000" +
    "\016\016\uffac\045\uffac\123\uffac\165\uffac\166\uffac\170\uffac" +
    "\001\002\000\016\016\uffe1\045\uffe1\123\uffe1\165\uffe1\166" +
    "\uffe1\170\uffe1\001\002\000\016\016\uffe7\045\uffe7\123\uffe7" +
    "\165\uffe7\166\uffe7\170\uffe7\001\002\000\016\016\uffe3\045" +
    "\uffe3\123\uffe3\165\uffe3\166\uffe3\170\uffe3\001\002\000\016" +
    "\016\uffdf\045\uffdf\123\uffdf\165\uffdf\166\uffdf\170\uffdf\001" +
    "\002\000\010\010\ufff7\022\ufff7\045\ufff7\001\002\000\004" +
    "\106\260\001\002\000\004\110\261\001\002\000\004\046" +
    "\262\001\002\000\004\106\226\001\002\000\004\047\264" +
    "\001\002\000\004\043\265\001\002\000\016\016\uffb1\045" +
    "\uffb1\123\uffb1\165\uffb1\166\uffb1\170\uffb1\001\002\000\004" +
    "\106\267\001\002\000\004\043\270\001\002\000\020\016" +
    "\uffc8\045\uffc8\053\271\123\uffc8\165\uffc8\166\uffc8\170\uffc8" +
    "\001\002\000\030\115\125\125\127\130\135\131\132\132" +
    "\134\133\123\134\131\140\126\143\122\161\133\162\124" +
    "\001\002\000\016\016\uffc9\045\uffc9\123\uffc9\165\uffc9\166" +
    "\uffc9\170\uffc9\001\002\000\004\012\274\001\002\000\004" +
    "\104\341\001\002\000\004\051\316\001\002\000\004\043" +
    "\277\001\002\000\004\044\300\001\002\000\016\016\205" +
    "\045\303\123\206\165\215\166\214\170\211\001\002\000" +
    "\016\016\uffd2\045\uffd2\123\uffd2\165\uffd2\166\uffd2\170\uffd2" +
    "\001\002\000\016\016\205\045\311\123\206\165\215\166" +
    "\214\170\211\001\002\000\016\016\uffa7\045\uffa7\123\uffa7" +
    "\165\uffa7\166\uffa7\170\uffa7\001\002\000\016\016\uffce\045" +
    "\uffce\123\uffce\165\uffce\166\uffce\170\uffce\001\002\000\016" +
    "\016\uffd0\045\uffd0\123\uffd0\165\uffd0\166\uffd0\170\uffd0\001" +
    "\002\000\016\016\uffcc\045\uffcc\123\uffcc\165\uffcc\166\uffcc" +
    "\170\uffcc\001\002\000\016\016\uffd4\045\uffd4\123\uffd4\165" +
    "\uffd4\166\uffd4\170\uffd4\001\002\000\016\016\uffd1\045\uffd1" +
    "\123\uffd1\165\uffd1\166\uffd1\170\uffd1\001\002\000\016\016" +
    "\uffa8\045\uffa8\123\uffa8\165\uffa8\166\uffa8\170\uffa8\001\002" +
    "\000\016\016\uffcd\045\uffcd\123\uffcd\165\uffcd\166\uffcd\170" +
    "\uffcd\001\002\000\016\016\uffcf\045\uffcf\123\uffcf\165\uffcf" +
    "\166\uffcf\170\uffcf\001\002\000\016\016\uffcb\045\uffcb\123" +
    "\uffcb\165\uffcb\166\uffcb\170\uffcb\001\002\000\016\016\uffd3" +
    "\045\uffd3\123\uffd3\165\uffd3\166\uffd3\170\uffd3\001\002\000" +
    "\006\104\321\107\320\001\002\000\004\051\334\001\002" +
    "\000\022\051\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\001\002\000\022\051\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\001" +
    "\002\000\020\062\326\063\324\064\330\065\323\066\325" +
    "\067\331\070\327\001\002\000\006\104\uff92\107\uff92\001" +
    "\002\000\006\104\uff94\107\uff94\001\002\000\006\104\uff91" +
    "\107\uff91\001\002\000\006\104\uff95\107\uff95\001\002\000" +
    "\006\104\uff8f\107\uff8f\001\002\000\006\104\uff93\107\uff93" +
    "\001\002\000\006\104\uff90\107\uff90\001\002\000\006\104" +
    "\321\107\320\001\002\000\004\051\uffa4\001\002\000\004" +
    "\104\335\001\002\000\006\102\340\103\337\001\002\000" +
    "\004\043\uffa6\001\002\000\004\043\uffa3\001\002\000\004" +
    "\043\uffa2\001\002\000\004\075\342\001\002\000\004\107" +
    "\343\001\002\000\004\051\uffa5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\002\005\055\004\001\001\000\002\001" +
    "\001\000\004\003\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\021\032\022\001\001\000\002\001\001\000\010\012\027" +
    "\020\025\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\027" +
    "\020\163\022\026\001\001\000\010\012\027\020\162\022" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\045\006\047\010\034\037\042\040\033\043\035\051" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\055\010\051\037\054\040\050\043\052\051\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\062\001\001\000\004\030" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\045\006\066\010\034\037\042\040" +
    "\033\043\035\051\043\001\001\000\002\001\001\000\016" +
    "\004\055\010\051\037\054\040\050\043\052\051\043\001" +
    "\001\000\002\001\001\000\020\004\045\006\072\010\034" +
    "\037\042\040\033\043\035\051\043\001\001\000\002\001" +
    "\001\000\016\004\055\010\051\037\054\040\050\043\052" +
    "\051\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\100\001\001\000\004\030\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\111\001\001\000\004\011\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\044\127\045\120\046\136\047\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\044\152" +
    "\045\120\046\136\047\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\201\001\001\000\002\001\001\000\020\014" +
    "\217\034\203\041\215\042\206\050\211\052\216\054\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\254\034\247\041\252\042" +
    "\206\050\251\052\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\217\034\203\041\215\042\206\050\211\052\216\054" +
    "\246\001\001\000\002\001\001\000\016\014\254\034\247" +
    "\041\252\042\206\050\251\052\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\044\271\045\120\046\136\047\135\001" +
    "\001\000\002\001\001\000\006\013\275\015\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\306\034\300\041\304\042\206" +
    "\050\303\052\305\053\301\001\001\000\002\001\001\000" +
    "\016\014\314\034\307\041\312\042\206\050\311\052\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\316\024\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\332" +
    "\001\001\000\002\001\001\000\004\017\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupObjeto$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupObjeto$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupObjeto$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean esId;
    String tipoActual;
    String salidaTipoActual;
    Object valorActual;
    String valorActualTipo;
    String fil,col;
    ArrayList<Error1> ManejadorDeErrores;
    ArrayList<Variables> ManejadorVariables;
    boolean esDAssig=false;
    int fl;


    public CupObjeto(java_cup.runtime.Scanner s,ArrayList<Variables> v,ArrayList<Error1> m,int tfl) {
        super(s);
        ManejadorDeErrores =m;
        ManejadorVariables = v;
        fl = tfl;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        report_error("No se encontró ;",s);

    }

    public void syntax_error(Symbol s){
        //report_error("Sintactico",s);
    }

    public void report_error(String message, Object info){
        if(info!=null){
            java_cup.runtime.Symbol s =(java_cup.runtime.Symbol)info;
            String valor="";
            if(s.value!=null){
                valor = s.value.toString();
            }
        ManejadorDeErrores.add(new Error1(message,s.left,s.right,valor));
        }else{
            ManejadorDeErrores.add(new Error1(message,-1,-1,"?????"));
        }
    }
    /*public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
            try{
                Object result = sintactico.parse().value;
            }catch(Exception ex){


            }
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CupObjeto$actions {


    static String fin="",finJs="",finFun="",finCss="";
    static String v="",v2="",v3="",v4="",v5="", vText="",jsText="";
    static String attrElem="",attrElem2="", listaElem="";
    static String expFor1="",expFor2="",expFor3="",expForOper="",expForAsig="",forElem="", varFor="",
                    varExpFor1="",varCssCadena="",varCss1="",varCss2="",varFor2="",varFor3="";
    
  private final CupObjeto parser;

  /** Constructor */
  CUP$CupObjeto$actions(CupObjeto parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CupObjeto$do_action(
    int                        CUP$CupObjeto$act_num,
    java_cup.runtime.lr_parser CUP$CupObjeto$parser,
    java.util.Stack            CUP$CupObjeto$stack,
    int                        CUP$CupObjeto$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupObjeto$result;

      /* select the action based on the action number */
      switch (CUP$CupObjeto$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros2 ::= COMA ID parametros 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		v3=v3+e.toString()+",";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("parametros2",22, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametros2 ::= COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		v3=v3+e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("parametros2",22, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametros3 ::= ID parametros2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		v4=e.toString()+",";v5="true";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("parametros3",23, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametros3 ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		v4=e.toString(); v5="true";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("parametros3",23, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros ::= ID parametros2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		v3=e.toString()+",";v4=e.toString()+",";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametros ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		v3=e.toString();v4=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funcion ::= FUNCTION ID PARENTESIS_A parametros3 PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-6)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-6)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funcion ::= FUNCTION ID PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funcion ::= FUNCTION ID PARENTESIS_A parametros3 PARENTESIS_C LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-6)).value;
		
                    System.out.println("Entro func");
                        finFun="function "+e.toString()+"("+v4.toString()+") {"+finFun+"}\n";
                        finJs=finJs+"function "+e.toString()+"("+v4.toString()+") {"+finFun+"}\n";
                   finFun="";v5="";
                
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-7)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expForAsig=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("comparador",3, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comparador ::= IGUAL2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expForAsig=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("comparador",3, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comparador ::= IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expForAsig=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("comparador",3, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comparador ::= MENORIGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expForAsig=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("comparador",3, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // comparador ::= MENORQUE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expForAsig=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("comparador",3, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // comparador ::= MAYORIGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expForAsig=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("comparador",3, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // comparador ::= MAYORQUE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expForAsig=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("comparador",3, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // compuerta ::= XOR 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("compuerta",5, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // compuerta ::= ORSIMPLE 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("compuerta",5, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // compuerta ::= OR 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("compuerta",5, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // compuerta ::= ANDSIMPLE 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("compuerta",5, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // compuerta ::= AND 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("compuerta",5, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NUMIDSTR ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		v3=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",19, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NUMIDSTR ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		v3=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",19, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NUMIDSTR ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		v3=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NUMIDSTR",19, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignarVariable ::= ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		
                        if(v5.equals("true")){
                              finFun=finFun+e.toString()+" ="+v3+";\n";
                          }else{
                              finJs=finJs+e.toString()+" ="+v3+";\n";
                          }
                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("asignarVariable",2, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // asignarVariable ::= VAR ID ASIGNACION NUMIDSTR PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		
                        if(v5.equals("true")){
                            finFun=finFun+"var "+e.toString()+" ="+v3+";\n";
                        }else{
                            finJs=finJs+"var "+e.toString()+" ="+v3+";\n";
                        }

                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("asignarVariable",2, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NUMID ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expFor2=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NUMID",18, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NUMID ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expFor2=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NUMID",18, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expFor3 ::= ID OPERDECREMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expFor3=e.toString();
              expForOper=o.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("expFor3",13, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expFor3 ::= ID OPERCREMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expFor3=e.toString();
              expForOper=o.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("expFor3",13, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expFor2 ::= NUMID comparador NUMID 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("expFor2",12, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expFor1 ::= VAR ID ASIGNACION NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		expFor1=e.toString();
                 varExpFor1=i.toString();
                   varFor="true";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("expFor1",11, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicionFor ::= expFor1 PUNTOCOMA expFor2 PUNTOCOMA expFor3 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("condicionFor",9, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A LLAVE_C 
            {
              Object RESULT =null;
		System.out.println("entro");
                        String[] x= varExpFor1.split("");

                        if(!varFor.equals("true")){
                            finJs=finJs+"FOR(var "+varExpFor1+" = "+Integer.parseInt(expFor1)+";"+expFor2+" "+expForAsig+" "+expFor2+";"+varExpFor1+expForOper+"){};\n";
                        }
                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaFor",10, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentenciaFor ::= FOR PARENTESIS_A condicionFor PARENTESIS_C LLAVE_A cuerpoFor LLAVE_C 
            {
              Object RESULT =null;
		
                        String x ="";
                        if(expForAsig.equals("<")){
                            if(expForOper.equals("++")){

                                for(int i=Integer.parseInt(expFor1);i<(Integer.parseInt(expFor2)-1);i++){
                                    //System.out.print("Prueba-");
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }else if(expForOper.equals("--")){
                                 for(int i=Integer.parseInt(expFor1);i<(Integer.parseInt(expFor2)-1);i--){
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }

                        }else if(expForAsig.equals(">")){
                            if(expForOper.equals("++")){
                                for(int i=Integer.parseInt(expFor1);i>(Integer.parseInt(expFor2)-1);i++){
                                    //System.out.print("Prueba-");
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }else if(expForOper.equals("--")){
                                 for(int i=Integer.parseInt(expFor1);i>(Integer.parseInt(expFor2)-1);i--){
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }

                        }else if(expForAsig.equals("<=")){
                            if(expForOper.equals("++")){
                                for(int i=Integer.parseInt(expFor1);i<=(Integer.parseInt(expFor2)-1);i++){
                                    //System.out.print("Prueba-");
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }else if(expForOper.equals("--")){
                                 for(int i=Integer.parseInt(expFor1);i<=(Integer.parseInt(expFor2)-1);i--){
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }

                        }else if(expForAsig.equals(">=")){
                            if(expForOper.equals("++")){

                                for(int i=Integer.parseInt(expFor1);i>=(Integer.parseInt(expFor2)-1);i++){
                                    //System.out.print("Prueba-");
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }else if(expForOper.equals("--")){
                                 for(int i=Integer.parseInt(expFor1);i>=(Integer.parseInt(expFor2)-1);i--){
                                    x=x+forElem;
                                }
                                fin=fin+x;
                            }

                        }
                        if(!varFor.equals("true")){
                            finJs=finJs+"FOR(var "+varExpFor1+" = "+Integer.parseInt(expFor1)+";"+expFor2+" "+expForAsig+" "+expFor2+";"+varExpFor1+expForOper+"){"+forElem+"};\n";
                        }


                     
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaFor",10, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-6)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",1, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaDeclare ::= DECLARE PAGE ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaDeclare",1, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // divElem ::= DIV ID LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("divElem",40, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // divElem ::= DIV ID LLAVE_A cuerpo2 LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		fin="<div id='"+e.toString()+"'>\n"+fin+"</div>\n";
            varFor3="";
                varFor2="<div id='"+e.toString()+"'>\n"+fin+"</div>\n"; 
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("divElem",40, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cuerpoTabla ::= STRING COMA cuerpoTabla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).value;
		listaElem=listaElem+e.toString()+",";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",27, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cuerpoTabla ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		listaElem=listaElem+e.toString()+",";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoTabla",27, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tabla ::= TABLE PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-13)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-13)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-13)).value;
		
                String[] x = listaElem.split(",");
                String x2="",x3="",x4="";
                int r = ((x.length)/3);
                int r2= r,r3=r*2;
                //Strin[] id=e.toString().split("");
                for(int i=0;i<r;i++){
                    x2=x2+"<th>"+x[i]+"</th>\n";
                    x3=x3+"<th>"+x[r2]+"</th>\n";
                    x4=x4+"<th>"+x[r3]+"</th>\n";
                    r2++;r3++;
                }
                x2="<tr>\n"+x2+"</tr>\n";
                x3="<tr>\n"+x3+"</tr>\n";
                x4="<tr>\n"+x4+"</tr>\n";
                fin=fin+"<table id="+e.toString()+" class='table col-sm-4 table-striped'>\n"+x2+x3+x4+"</table>\n";
                varFor2="<table id="+e.toString()+" class='table col-sm-4 table-striped'>\n"+x2+x3+x4+"</table>\n";
                listaElem="";
            
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-15)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tabla ::= TABLE PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		fin=fin+"<table class='table'></table>\n";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("tabla",26, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista ::= LIST PARENTESIS_A STRING COMA CORCHETE_A cuerpoTabla CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)).value;
		
                String[] x=e.toString().split("\"");
                String[] x2 = listaElem.toString().split(",");
                String x3="";
                for(int i=0; i<x2.length;i++){
                    String[] x4=x2[i].split("\"");
                    x3=x3+"\n<li class='list-group-item list-group-item-success'>"+x4[1]+"</li>";
                }
                fin=fin+"<ul id="+e.toString()+" class='list-group col-sm-4'>"+x3+"\n</ul>\n";
                varFor2="<ul id="+e.toString()+" class='list-group col-sm-4'>"+x3+"\n</ul>\n";
                listaElem="";
            
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("lista",38, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-7)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // llamarFuncion ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).value;
		
                        finJs=finJs+e.toString()+"();\n";
                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("llamarFuncion",33, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // llamarFuncion ::= ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		
                        finJs=finJs+e.toString()+"("+v3+");\n";
                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("llamarFuncion",33, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funciones4 ::= inHTML 
            {
              Object RESULT =null;
		v3="inHTML";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones4",37, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funciones3 ::= ChildTextH 
            {
              Object RESULT =null;
		v3="ChildTextH";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones3",36, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // funciones3 ::= Remove 
            {
              Object RESULT =null;
		v3="Remove";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones3",36, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funciones3 ::= RClass 
            {
              Object RESULT =null;
		v3="RClass";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones3",36, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funciones3 ::= AClass 
            {
              Object RESULT =null;
		v3="AClass";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones3",36, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funciones3 ::= RChild 
            {
              Object RESULT =null;
		v3="RChild";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones3",36, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // funciones3 ::= getAtt 
            {
              Object RESULT =null;
		v3="getAtt";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones3",36, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // funciones3 ::= Child 
            {
              Object RESULT =null;
		v3="Child";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones3",36, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funciones3 ::= ChildText 
            {
              Object RESULT =null;
		v3="ChildText";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones3",36, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funciones2 ::= beforeChild 
            {
              Object RESULT =null;
		v2="beforeChild";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones2",35, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funciones2 ::= setHTML 
            {
              Object RESULT =null;
		v2="setHTML";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones2",35, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funciones ::= funciones4 PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		
                    if(v3.equals("inHTML")){
                        jsText=".innerHTML;\n";
                    }
                
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones",34, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funciones ::= funciones2 PARENTESIS_A STRING COMA STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		
                    if(v2.equals("setHTML")){
                    String[] x= e2.toString().split("\"");
                    String[] x2= e1.toString().split("\"");
                    attrElem=attrElem+x2[1]+",";
                    attrElem2=attrElem2+x[1]+",";
                    }
                    jsText=jsText+"\n";
                
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones",34, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-7)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funciones ::= funciones2 PARENTESIS_A STRING COMA STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		
                    if(v2.equals("setHTML")){
                    String[] x= e2.toString().split("\"");
                    String[] x2= e1.toString().split("\"");
                    attrElem=attrElem+x2[1]+",";
                    attrElem2=attrElem2+x[1]+",";
                    }else if(v2.equals("beforeChild")){
                        jsText=".insertBefore(document.getElementById("+e1.toString()+"), document.getElementById("+e2.toString()+"));\n";
                    }
                
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones",34, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funciones ::= funciones3 PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		
                if(v3.equals("ChildText")){
                    vText=e.toString();
                    jsText=".appendChild(document.createTextNode("+e.toString()+"));\n";
                }else if(v3.equals("Child")){
                    jsText=".appendChild(document.getElementById("+e.toString()+"));\n";
                }else if(v3.equals("beforeChild")){
                    jsText=".insertBefore(newItem, list.childNodes[0]);\n";
                }else if(v3.equals("getAtt")){
                        jsText=".getAttribute("+e.toString()+");\n";
                }else if(v3.equals("RChild")){
                    jsText=".removeChild("+e.toString()+");\n";
                }else if(v3.equals("AClass")){
                    jsText=".addClass( "+e.toString()+" );\n";
                }else if(v3.equals("RClass")){
                    jsText=".removeClass( "+e.toString()+" );\n";
                }else if(v3.equals("Remove")){
                    jsText=".removeChild( "+e.toString()+" );\n";
                }
                else if(v3.equals("ChildTextH")){
                    vText=e.toString();
                }
            
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("funciones",34, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // elementos2 ::= docCreateElem 
            {
              Object RESULT =null;
		v="docCreateElem";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("elementos2",32, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elementos ::= docGetElemClass 
            {
              Object RESULT =null;
		v="docCreateElem";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("elementos",39, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elementos ::= docGetElemID 
            {
              Object RESULT =null;
		v="docGetElemID";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("elementos",39, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // obtenerElemento ::= elementos PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		
                            if(v.equals("docGetElemID")){
                                if(v5.equals("true")){
                                    finFun=finFun+"document.getElementById("+e.toString()+");\n";
                                }else{
                                    finJs=finJs+"document.getElementById("+e.toString()+");\n";
                                }

                            }
                        
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("obtenerElemento",30, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // obtenerElemento ::= elementos PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		
                            if(v.equals("docGetElemID")){
                                if(v5.equals("true")){
                                    finFun=finFun+"document.getElementById("+e.toString()+")"+jsText+"\n";
                                }else{
                                    finJs=finJs+"document.getElementById("+e.toString()+")"+jsText+"\n";
                                }

                            }
                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("obtenerElemento",30, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // crearElemento ::= elementos2 PARENTESIS_A STRING PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		
                            if(v.equals("docCreateElem")){
                                String[] x= e.toString().split("\"");
                                fin=fin+"<"+x[1]+"></"+x[1]+">\n";
                            }
                        
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("crearElemento",31, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // crearElemento ::= elementos2 PARENTESIS_A STRING PARENTESIS_C PUNTO funciones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		
                                String x4="";
                                String[] x= e.toString().split("\"");
                                String[] x2 = attrElem2.toString().split(",");
                                String[] x3 = attrElem.toString().split(",");
                                String[] x5=  vText.split("\"");
                                for(int i=0; i<x3.length;i++){
                                    x4=x4+x3[i]+"='"+x2[i]+"' ";
                                }
                                if(vText.equals("") || vText==null ){
                                    fin=fin+"<"+x[1]+" "+x4+"></"+x[1]+">\n";
                                    varFor2="<"+x[1]+" "+x4+"></"+x[1]+">\n";
                                    varFor3=varFor3+"<"+x[1]+" "+x4+"></"+x[1]+">\n";
                                }else{
                                    fin=fin+"<"+x[1]+" "+x4+">"+x5[1]+"</"+x[1]+">\n";
                                    varFor2="<"+x[1]+" "+x4+">"+x5[1]+"</"+x[1]+">\n";
                                    varFor3=varFor3+"<"+x[1]+" "+x4+">"+x5[1]+"</"+x[1]+">\n";
                                }
                                attrElem="";
                                attrElem2="";
                                vText="";
                        
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("crearElemento",31, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-5)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // consola ::= CONSOL PARENTESIS_A NUMIDSTR PARENTESIS_C 
            {
              Object RESULT =null;
		
                System.out.println(v3);
                for (int i = 0; i <= parser.ManejadorVariables.size() - 1; i++) {
                     String variableNombre = parser.ManejadorVariables.get(i).nombre;
                     if(v3.equals(variableNombre)){

                     }
                 }
                //finJs=finJs+"console.log("+v3+");\n";
            
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("consola",29, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpoFor ::= cuerpoFor divElem 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpoFor ::= divElem 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpoFor ::= cuerpoFor lista 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpoFor ::= lista 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpoFor ::= cuerpoFor crearElemento 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpoFor ::= crearElemento 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpoFor ::= cuerpoFor tabla 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpoFor ::= tabla 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpoFor ::= cuerpoFor sentenciaFor 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpoFor ::= sentenciaFor 
            {
              Object RESULT =null;
		forElem=forElem+varFor2;varFor2="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpoFor",41, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo ::= cuerpo llamarFuncion 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= llamarFuncion 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= cuerpo obtenerElemento 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= obtenerElemento 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= cuerpo consola 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= consola 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= cuerpo funcion 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo ::= funcion 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo ::= cuerpo asignarVariable 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo ::= asignarVariable 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cuerpo2 ::= cuerpo2 sentenciaFor 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cuerpo2 ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cuerpo2 ::= cuerpo2 lista 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cuerpo2 ::= lista 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpo2 ::= cuerpo2 divElem 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo2 ::= divElem 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpo2 ::= cuerpo2 tabla 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpo2 ::= tabla 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpo2 ::= cuerpo2 crearElemento 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpo2 ::= crearElemento 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cuerpo2",42, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NI ::= STRING SUMA NUMERO 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NI",20, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NI ::= NUMERO SUMA STRING 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NI",20, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NI ::= STRING 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NI",20, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NI ::= ID 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NI",20, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NI ::= NUMERO 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("NI",20, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI condicionCSS2 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("condicionCSS2",21, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicionCSS2 ::= COMA STRING DOSPUNTOS NI 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("condicionCSS2",21, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condicionCSS ::= STRING DOSPUNTOS STRING COMA condicionCSS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).value;
		
                        String[] x=e.toString().split("\"");
                        String[] x2=e2.toString().split("\"");
                        varCss1=varCss1+x[1]+":"+x2[1]+";\n";
                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("condicionCSS",17, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicionCSS ::= STRING DOSPUNTOS STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		
                        String[] x=e.toString().split("\"");
                        String[] x2=e2.toString().split("\"");
                        varCss1=varCss1+x[1]+":"+x2[1]+";\n";
                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("condicionCSS",17, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cadena ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		varCssCadena=e.toString();
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cadena",25, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cadena ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.peek()).value;
		String[] x=e.toString().split("\"");varCssCadena=x[1];
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("cadena",25, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentenciaCSS ::= CSS PARENTESIS_A cadena COMA CORCHETE_A condicionCSS CORCHETE_C PARENTESIS_C 
            {
              Object RESULT =null;
		finCss=finCss+varCssCadena+"{\n"+varCss1+"}\n";varCss1="";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaCSS",16, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-7)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentenciaJS ::= JS ID LLAVE_A cuerpo LLAVE_C 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaJS",8, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentenciaHTML ::= HTML LLAVE_A LLAVE_C 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",15, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-2)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentenciaHTML ::= HTML LLAVE_A cuerpo2 LLAVE_C 
            {
              Object RESULT =null;
		//fin="HTML { \n"+fin+"}H\n";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaHTML",15, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciasInterior ::= sentenciaCSS sentenciasInterior 
            {
              Object RESULT =null;
		Principal.codigointerCss="\n"+finCss;
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",14, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentenciasInterior ::= sentenciaCSS 
            {
              Object RESULT =null;
		Principal.codigointerCss="\n"+finCss;
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",14, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentenciasInterior ::= sentenciaJS sentenciasInterior 
            {
              Object RESULT =null;
		Principal.codigointerJs="\n"+finJs;
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",14, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciasInterior ::= sentenciaJS 
            {
              Object RESULT =null;
		Principal.codigointerJs="\n"+finJs;
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciasInterior",14, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primeraSentencia ::= sentenciaHTML sentenciasInterior 
            {
              Object RESULT =null;
		Principal.codigointer=""+fin;
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("primeraSentencia",24, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // primeraSentencia ::= sentenciaHTML 
            {
              Object RESULT =null;
		Principal.codigointer=""+fin;
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("primeraSentencia",24, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentenciaMain ::= MAIN ID LLAVE_A primeraSentencia LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-3)).value;
		//fin="MAIN "+e+" { \n"+fin+"}M\n";
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("sentenciaMain",43, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-4)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= sentenciaMain sentenciaDeclare 
            {
              Object RESULT =null;

              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentenciaMain 
            {
              Object RESULT =null;
		
                    //fin=fin+"\n";


                    
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          return CUP$CupObjeto$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)).value;
		RESULT = start_val;
              CUP$CupObjeto$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.elementAt(CUP$CupObjeto$top-1)), ((java_cup.runtime.Symbol)CUP$CupObjeto$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupObjeto$parser.done_parsing();
          return CUP$CupObjeto$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

